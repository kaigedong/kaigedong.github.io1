<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Linux crontab定时任务</title>
      <link href="/2019/08/20/Linux%E4%B8%8Bcrontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2019/08/20/Linux%E4%B8%8Bcrontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>Linux crontab是用来定期执行程序的命令。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>crond命令每分钟会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。</p><p>而linux任务调度的工作主要分为以下两类：</p><ul><li>1、系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存</li><li>2、个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置</li></ul><p>crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。</p><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">crontab [ -u user ] file<br></code></pre></td></tr></table></figure><p>或</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">crontab [ -u user ] &#123; -l | -r | -e &#125;<br></code></pre></td></tr></table></figure><ul><li>-u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。</li><li>-e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)</li><li>-r : 删除目前的时程表</li><li>-l : 列出目前的时程表</li></ul><h3 id="时程表的格式如下："><a href="#时程表的格式如下：" class="headerlink" title="时程表的格式如下："></a>时程表的格式如下：</h3><figure class="hljs highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-symbol">f1</span> <span class="hljs-built_in">f2</span> <span class="hljs-built_in">f3</span> <span class="hljs-built_in">f4</span> <span class="hljs-built_in">f5</span> program<br></code></pre></td></tr></table></figure><p> 其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。</p><ul><li>当 f1 为 <em> 时表示每分钟都要执行 program，f2 为 </em> 时表示每小时都要执行程序，其余类推</li><li>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</li><li>当 f1 为 <em>/n 时表示每 n 分钟个时间间隔执行一次，f2 为 </em>/n 表示每 n 小时个时间间隔执行一次，其馀类推</li><li>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其馀类推</li></ul><p>使用者也可以将所有的设定先存放在文件中，用 crontab file 的方式来设定时程表。</p><h2 id="常用命令格式："><a href="#常用命令格式：" class="headerlink" title="常用命令格式："></a>常用命令格式：</h2><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">Schedule cron jobs to run on a time interval for the current user.<br>Job definition format: "(min) (hour) (day_of_month) (month) (day_of_week) command_to_execute".<br><br>Edit the crontab file for the current user:<br><br>    crontab -e<br><br>Edit the crontab file for a specific user:<br><br>    sudo crontab -e -u user<br><br>View a list of existing cron jobs for current user:<br><br>    crontab -l<br><br>Remove all cron jobs for the current user:<br><br>    crontab -r<br><br>Sample job which runs at 10:00 every day (* means any value):<br><br>    0 10 * * * command_to_execute<br><br>Sample job which runs every minute on the 3rd of April:<br><br>    * * 3 Apr * command_to_execute<br><br>Sample job which runs a certain script at 02:30 every Friday:<br><br>    30 2 * * Fri /absolute/path/to/script.sh<br></code></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="hljs highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-symbol">0 </span>* * * * /bin/ls # 每月每天每小时的第 <span class="hljs-number">0</span> 分钟执行一次 /bin/ls<br><br><span class="hljs-symbol">0 </span><span class="hljs-number">6</span>-<span class="hljs-number">12</span>/<span class="hljs-number">3</span> * <span class="hljs-number">12</span> * /<span class="hljs-keyword">usr</span>/bin/backup # 在 <span class="hljs-number">12</span> 月内, 每天的早上 <span class="hljs-number">6</span> 点到 <span class="hljs-number">12</span> 点，每隔 <span class="hljs-number">3</span> 个小时 <span class="hljs-number">0</span> 分钟执行一次 /<span class="hljs-keyword">usr</span>/bin/backup<br><br><span class="hljs-symbol">0 </span><span class="hljs-number">17</span> * * <span class="hljs-number">1</span>-<span class="hljs-number">5</span> mail -s <span class="hljs-string">"hi"</span> alex@domain.<span class="hljs-keyword">name</span> &lt; /tmp/maildata # <span class="hljs-number">0</span> <span class="hljs-number">17</span> * * <span class="hljs-number">1</span>-<span class="hljs-number">5</span> mail -s <span class="hljs-string">"hi"</span> alex@domain.<span class="hljs-keyword">name</span> &lt; /tmp/maildata<br><br><span class="hljs-symbol">20 </span><span class="hljs-number">0</span>-<span class="hljs-number">23</span>/<span class="hljs-number">2</span> * * * echo <span class="hljs-string">"haha"</span> # <span class="hljs-number">20</span> <span class="hljs-number">0</span>-<span class="hljs-number">23</span>/<span class="hljs-number">2</span> * * * echo <span class="hljs-string">"haha"</span><br><br><span class="hljs-symbol">0 </span>*/<span class="hljs-number">2</span> * * * /sbin/service httpd restart # 每两个小时重启一次apache <br><br><span class="hljs-symbol">50 </span><span class="hljs-number">7</span> * * * /sbin/service sshd start # 每天<span class="hljs-number">7</span>：<span class="hljs-number">50</span>开启ssh服务 <br><br><span class="hljs-symbol">50 </span><span class="hljs-number">22</span> * * * /sbin/service sshd <span class="hljs-keyword">stop</span> # 每天<span class="hljs-number">22</span>：<span class="hljs-number">50</span>关闭ssh服务 <br><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span>,<span class="hljs-number">15</span> * * fsck /home  # 每月<span class="hljs-number">1</span>号和<span class="hljs-number">15</span>号检查/home 磁盘 <br><br><span class="hljs-symbol">1 </span>* * * * /home/bruce/backup # 每小时的第一分执行 /home/bruce/backup这个文件 <br><br><span class="hljs-symbol">00 </span><span class="hljs-number">03</span> * * <span class="hljs-number">1</span>-<span class="hljs-number">5</span> find /home <span class="hljs-string">"*.xxx"</span> -mtime +<span class="hljs-number">4</span> -exec rm &#123;&#125; \;  # 每周一至周五<span class="hljs-number">3</span>点钟，在目录/home中，查找文件名为*.xxx的文件，并删除<span class="hljs-number">4</span>天前的文件。<br><span class="hljs-symbol">30 </span><span class="hljs-number">6</span> */<span class="hljs-number">10</span> * * ls  # 每月的<span class="hljs-number">1</span>、<span class="hljs-number">11</span>、<span class="hljs-number">21</span>、<span class="hljs-number">31</span>日是的<span class="hljs-number">6</span>：<span class="hljs-number">30</span>执行一次ls命令<br></code></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Manjaro-安装配置到GPU</title>
      <link href="/2019/04/11/Manjaro-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%88%B0GPU/"/>
      <url>/2019/04/11/Manjaro-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%88%B0GPU/</url>
      <content type="html"><![CDATA[<blockquote><p>Manjaro的安装、配置、设置steam使用GPU，pytorch使用GPU</p></blockquote><a id="more"></a><h2 id="安装Manjaro"><a href="#安装Manjaro" class="headerlink" title="安装Manjaro"></a>安装Manjaro</h2><blockquote><p>下载、安装Manjaro (xface)<br>中科大镜像：<a href="https://mirrors.ustc.edu.cn/manjaro-cd/" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/manjaro-cd/</a></p></blockquote><figure class="hljs highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ wget https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/manjaro-cd/</span>xfce<span class="hljs-regexp">/18.0.4/m</span>anjaro-xfce-<span class="hljs-number">18.0</span>.<span class="hljs-number">4</span>-stable-x86_64.iso<br></code></pre></td></tr></table></figure><blockquote><p>Mac OS系统下制作U盘启动：</p></blockquote><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ sudo diskutil list<br><span class="hljs-built_in">..</span>.<br>/dev/disk8 (external, physical):<br>   #:                      <span class="hljs-built_in"> TYPE </span>NAME                    SIZE       IDENTIFIER<br>   0:     FDisk_partition_scheme                        <span class="hljs-number">*31</span>.0 GB    disk8<br>   1:             Windows_FAT_32 KINGSTON                31.0 GB    disk8s1<br><br>$ diskutil umount /dev/disk8s1 <br>Volume KINGSTON on disk8s1 unmounted<br><br>$ sudo dd <span class="hljs-attribute">if</span>=/path/of/manjaro-xfce-18.0.4-stable-x86_64.iso  <span class="hljs-attribute">of</span>=/dev/disk8 <span class="hljs-attribute">bs</span>=1m<br></code></pre></td></tr></table></figure><blockquote><p>安装的时候，先选英文。装好系统再改为中文(这样~下的文件夹就会是英文的了)。</p><p>Manjaro 国内源 + ArchlinuxCN 国内源 设置</p></blockquote><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> sudo pacman-mirrors -i -c China -m rank  <span class="hljs-comment"># 生成可用中国镜像站列表，勾选 http://mirrors.ustc.edu.cn/manjaro/ ，然后按 OK 键两次。</span></span><br><span class="hljs-meta">$</span><span class="bash"> sudo pacman -Syyu <span class="hljs-comment"># 升级系统到最新</span></span><br></code></pre></td></tr></table></figure><blockquote><p>ArchLinuxCN 中科大源 (Arch Linux 中文社区仓库是由 Arch Linux 中文社区驱动的非官方用户仓库)。</p></blockquote><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> /etc/pacman.conf 文件末尾添加：</span><br><br>[archlinuxcn]<br>Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch<br><span class="hljs-meta"><br>#</span><span class="bash"> 然后安装 archlinuxcn-keyring 包以导入 GPG key。</span><br><span class="hljs-meta">$</span><span class="bash"> sudo pacman -Syyu</span><br><span class="hljs-meta">$</span><span class="bash"> sudo pacman -S archlinuxcn-keyring</span><br></code></pre></td></tr></table></figure><h2 id="开机挂载第二块硬盘"><a href="#开机挂载第二块硬盘" class="headerlink" title="开机挂载第二块硬盘"></a>开机挂载第二块硬盘</h2><p>查看硬盘信息：<br><code>$ sudo fdisk -l # 查看我的是/dev/sdb1</code><br><code>$ ls -l /dev/disk/by-uuid/</code># 查看对应的UUID</p><p>然后编辑　<code>/etc/fstab</code><br>增加一行:<br><code>UUID=a8786e51-eda0-41fe-... /home/bobo/Data ext4 defaults 0 0</code></p><p>要注意建立个文件夹：` 要是bobo的所有权，否则干啥都要root，硬盘将挂载在这里。</p><p>然后<strong>重启</strong>之后就自动挂载了。</p><h2 id="Arch-配置服务"><a href="#Arch-配置服务" class="headerlink" title="Arch 配置服务"></a>Arch 配置服务</h2><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">当通过Arch wiki 查到不同软件提供的服务之后，可以按照下面命令控制这些服务<br><span class="hljs-meta"><br>$</span><span class="bash"> systemctl <span class="hljs-built_in">enable</span> sshd.service     开机启动</span><br><span class="hljs-meta">$</span><span class="bash"> systemctl start sshd.service      立即启动</span><br><span class="hljs-meta">$</span><span class="bash"> systemctl restart sshd.service    立即重启</span><br></code></pre></td></tr></table></figure><h2 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h2><figure class="hljs highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sudo pacman -S code vim guake zotero pycharm-professional typora skype dbeaver shadowsocks-qt<span class="hljs-number">5</span> telegram-desktop electronic-wechat teamviewer<br><br>sudo pacman -S chromium  # 启用代理，用以同步 chromium --proxy-server=<span class="hljs-string">"socks5://127.0.0.1:1080"</span><br>sudo pacman -S flameshot # 最好的截图工具，配置开机启动，全局快捷键<br>udo pacman -S adobe-source-han-serif-cn-fonts adobe-source-han-serif-tw-fonts adobe-source-han-sans-cn-fonts adobe-source-han-sans-tw-fonts # 安装中文简体、繁体字体<br><br>sudo teamviewer --daemon start <br>sudo pacman -S mysql # https://wiki.archlinux.org/index.php/MariaDB_(<span class="hljs-symbol">%E7</span><span class="hljs-symbol">%AE</span><span class="hljs-symbol">%80</span><span class="hljs-symbol">%E4</span><span class="hljs-symbol">%BD</span><span class="hljs-symbol">%93</span><span class="hljs-symbol">%E4</span><span class="hljs-symbol">%B8</span><span class="hljs-symbol">%AD</span><span class="hljs-symbol">%E6</span><span class="hljs-symbol">%96</span><span class="hljs-symbol">%87</span>)#<span class="hljs-symbol">%E5</span><span class="hljs-symbol">%AE</span><span class="hljs-symbol">%89</span><span class="hljs-symbol">%E8</span><span class="hljs-symbol">%A3</span><span class="hljs-symbol">%85</span><br></code></pre></td></tr></table></figure><blockquote><p>flameshot截图的命令是 <code>flameshot gui</code>， 设置到系统的自定义快捷键。</p><p>安装完Teamviewer之后，打开网络有问题。执行<code>sudo teamviewer --daemon start</code>，再次打开，过一会就好了。参考<a href="https://bbs.archlinux.org/viewtopic.php?id=192406" target="_blank" rel="noopener">https://bbs.archlinux.org/viewtopic.php?id=192406</a></p></blockquote><h3 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h3><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ sudo pacman -S fcitx fcitx-configtool<br>$ sudo pacman -S fcitx-im # 就选default(=all)，会安装fcitx-gtk2 fcitx-gtk3 fcitx-qt4 fcitx-qt5<br>$ sudo pacman -S fcitx-sogoupinyin<br><br>$ vim ~/.xprofile<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GTK_IM_MODULE</span>=fcitx<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">QT_IM_MODULE</span>=fcitx<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">XMODIFIERS</span>=<span class="hljs-string">"@im=fcitx"</span><br><br>重启之后，配置即可。<br></code></pre></td></tr></table></figure><h3 id="安装AUR管理器"><a href="#安装AUR管理器" class="headerlink" title="安装AUR管理器"></a>安装AUR管理器</h3><figure class="hljs highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://aur.archlinux.org/yay.git<br>makepkg -si<br><br><span class="hljs-comment"># 用法</span><br>yay install some-package<br></code></pre></td></tr></table></figure><h3 id="配置vim"><a href="#配置vim" class="headerlink" title="配置vim"></a>配置vim</h3><figure class="hljs highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git clone <span class="hljs-params">--depth=1</span> https:<span class="hljs-string">//github.com/amix/vimrc.git</span> ~<span class="hljs-string">/.vim_runtime</span><br>sh ~<span class="hljs-string">/.vim_runtime/install_awesome_vimrc.sh</span><br></code></pre></td></tr></table></figure><h3 id="配置zsh"><a href="#配置zsh" class="headerlink" title="配置zsh"></a>配置zsh</h3><blockquote><p>安装oh-my-zsh</p></blockquote><figure class="hljs highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git clone https:<span class="hljs-string">//github.com/robbyrussell/oh-my-zsh.git</span> ~<span class="hljs-string">/.oh-my-zsh</span><br>cp ~<span class="hljs-string">/.oh-my-zsh/templates/zshrc.zsh-template</span> ~<span class="hljs-string">/.zshrc</span><br><br>修改默认shell, 或自动启动zsh，对我没必要，我使用的是guake，可设置开启终端时的默认shell。<br>chsh -s <span class="hljs-string">/bin/zsh</span> 或者 <span class="hljs-keyword">echo</span> <span class="hljs-string">"exec /path/of/zsh --login"</span> &gt;&gt; <span class="hljs-string">.bash_profile</span> <span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><blockquote><p>oh-my-zsh 主题及插件下载</p></blockquote><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 下载插件：</span><br><span class="hljs-meta">#</span><span class="bash"> 1. spaceship-prompt 主题 (https://github.com/denysdovhan/spaceship-prompt)</span><br><span class="hljs-meta"><br>$</span><span class="bash"> zsh</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/denysdovhan/spaceship-prompt.git <span class="hljs-string">"<span class="hljs-variable">$ZSH_CUSTOM</span>/themes/spaceship-prompt"</span></span><br><span class="hljs-meta">$</span><span class="bash"> ln -s <span class="hljs-string">"<span class="hljs-variable">$ZSH_CUSTOM</span>/themes/spaceship-prompt/spaceship.zsh-theme"</span> <span class="hljs-string">"<span class="hljs-variable">$ZSH_CUSTOM</span>/themes/spaceship.zsh-theme"</span></span><br><span class="hljs-meta"><br><br>#</span><span class="bash"> 2. zsh-syntax-highlighting 语法高亮插件</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></code></pre></td></tr></table></figure><blockquote><p><code>.zshrc</code> 的一些配置</p></blockquote><figure class="hljs highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># .zshrc: </span><br><span class="hljs-comment"># tldr代替man，fd 代替find，在rust那里下载安装。</span><br><br>alias la=<span class="hljs-string">"ls -lth"</span><br>alias man=<span class="hljs-string">"tldr"</span><br><br>ZSH_THEME=<span class="hljs-string">"spaceship"</span><br><br>HIST_STAMPS=<span class="hljs-string">"yyyy-mm-dd"</span><br><br>plugins=(<br>  extract git zsh-syntax-highlighting<br>)<br></code></pre></td></tr></table></figure><h3 id="安装rust环境"><a href="#安装rust环境" class="headerlink" title="安装rust环境"></a>安装rust环境</h3><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 1. 安装rust 中科大镜像加速rust安装 (参考https://lug.ustc.edu.cn/wiki/mirrors/<span class="hljs-built_in">help</span>/rust-static)</span><br>添加到 .zshrc<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">export</span> RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static  <span class="hljs-comment"># (用于更新 toolchain)</span></span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">export</span> RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup  <span class="hljs-comment"># (用于更新 rustup)</span></span><br><br>curl https://sh.rustup.rs -sSf | sh  # 官网的安装程序<br><span class="hljs-meta"><br>#</span><span class="bash"> 2. 设置中科大Rust crates镜像 (https://lug.ustc.edu.cn/wiki/mirrors/<span class="hljs-built_in">help</span>/rust-crates)</span><br><span class="hljs-meta">#</span><span class="bash"> 在 <span class="hljs-variable">$HOME</span>/.cargo/config 添加下面内容</span><br><br>[source.crates-io]<br>registry = "https://github.com/rust-lang/crates.io-index"<br>replace-with = 'ustc'<br>[source.ustc]<br>registry = "git://mirrors.ustc.edu.cn/crates.io-index"<br><span class="hljs-meta"><br>#</span><span class="bash"> 3. 添加rust可执行程序文件夹到~/.zshrc</span><br><br>echo "export PATH=$PATH:$HOME/.cargo/bin" &gt;&gt; ~/.zshrc<br><span class="hljs-meta"><br>#</span><span class="bash"> 4. 安装好用的rust程序 fd &amp; tldr</span><br>cargo install fd-find<br>cargo install tealdeer<br></code></pre></td></tr></table></figure><h2 id="xfce-添加网速监控"><a href="#xfce-添加网速监控" class="headerlink" title="xfce 添加网速监控"></a>xfce 添加网速监控</h2><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$<span class="hljs-built_in"> ip </span>addr # 结果显示<br><br>1: lo: <span class="hljs-built_in">..</span>.<br>2: enp7s0: <span class="hljs-built_in">..</span>.<br>3. wlp6s0: <span class="hljs-built_in">..</span>.<br></code></pre></td></tr></table></figure><blockquote><p>其中第三个是我的无线网卡，在面板下面<code>右键</code>，<code>面板</code>–<code>添加新项目</code>中添加<code>网速监控</code>，则面板下方出现一个<code>Net</code>。</p><p>然后在面板的Net上右键<code>网速监控模块</code>–<code>属性</code>–在网络设备填入<code>wlp6s0</code>即可！</p></blockquote><h3 id="pip使用中科大源"><a href="#pip使用中科大源" class="headerlink" title="pip使用中科大源"></a>pip使用中科大源</h3><blockquote><p><code>pyenv</code> . github<a href="https://github.com/pyenv/pyenv" target="_blank" rel="noopener">地址</a>用法看<a href="https://kaigedong.github.io/2018/12/25/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">python虚拟环境</a></p></blockquote><blockquote><p>Pip:</p></blockquote><figure class="hljs highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># $HOME/.config/pip/pip.conf</span><br><span class="hljs-section">[global]</span><br><span class="hljs-attr">index-url</span> = https://mirrors.ustc.edu.cn/pypi/web/simple<br><span class="hljs-attr">format</span> = columns<br></code></pre></td></tr></table></figure><h2 id="配置英伟达显卡！！"><a href="#配置英伟达显卡！！" class="headerlink" title="配置英伟达显卡！！"></a>配置英伟达显卡！！</h2><h3 id="steam-使用NVIDIA显卡"><a href="#steam-使用NVIDIA显卡" class="headerlink" title="steam 使用NVIDIA显卡"></a>steam 使用NVIDIA显卡</h3><p>我的笔记本：Acer VN7 592G；Intel + GTX 960M 双显卡</p><p>搞好再搞下面。搞坏重新装系统。</p><p>先看了<a href="http://www.cnblogs.com/smlile-you-me/p/8830949.html，没成功。但很有帮助。" target="_blank" rel="noopener">http://www.cnblogs.com/smlile-you-me/p/8830949.html，没成功。但很有帮助。</a><br>又看了<a href="https://www.youtube.com/watch?v=7KgX-LgDwQw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=7KgX-LgDwQw</a> 终于成功了！</p><p>这次终于能够运行steam了！</p><p>首先，安装系统并更新系统，并重启。重启后：</p><blockquote><p>修改GRUB</p></blockquote><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 上面的视频教程需要这个步骤，我没有ACPI错误，没进行这一步也没问题。</span><br><span class="hljs-meta">$</span><span class="bash"> sudo nano /etc/default/grub</span><br>修改：GRUB_CMDLINE_LINUX_DEFAULT="quiet resume=UUID... acpi_osi=! acpi_osi='Windows 2009'"<br><span class="hljs-meta">#</span><span class="bash"> 如果要运行NVIDIA显卡，需要添加后面两个 acpi_osi=! acpi_osi=<span class="hljs-string">'Windows 2009'</span>；不然有可能黑屏进不去系统，或者出现ACPI 错误。</span><br><span class="hljs-meta">$</span><span class="bash"> sudo update-grub <span class="hljs-comment"># 更新grub， 再次重启系统</span></span><br></code></pre></td></tr></table></figure><blockquote><p>按照教程安装NVIDIA系统<br><figure class="hljs highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ sudo mhwd -a pci nonfree 0300<br><br># 上面的步骤安装了9个软件： <br># Packages (9) egl-wayland<span class="hljs-string">-1</span>.1.2<span class="hljs-string">-1</span>  eglexternalplatform<span class="hljs-string">-1</span>.0<span class="hljs-string">+3</span>+g7c8f8e2<span class="hljs-string">-1</span>  primus<span class="hljs-string">-20151110</span><span class="hljs-string">-8</span>  bumblebee<span class="hljs-string">-3</span>.2.1<span class="hljs-string">-22</span>  lib32-nvidia-utils<span class="hljs-string">-1</span>:418.43<span class="hljs-string">-2</span>  lib32-primus<span class="hljs-string">-20151110</span><span class="hljs-string">-4</span>  linux419-bbswitch<span class="hljs-string">-0</span>.8<span class="hljs-string">-27</span>  linux419-nvidia<span class="hljs-string">-1</span>:418.43<span class="hljs-string">-9</span>  nvidia-utils<span class="hljs-string">-1</span>:418.43<span class="hljs-string">-2</span><br><br>sudo gpasswd -a xxx bumblebee # 将用户添加到bumblebee组，后面运行NVIDIA的setting组件，会提示错误。<br></code></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>重启</strong>检查是否安装好了</p></blockquote><figure class="hljs highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ mhwd -li 可以发现<br><br><span class="hljs-comment">--------------------------------------------------------------------------------</span><br>                  NAME               VERSION          FREEDRIVER           <span class="hljs-keyword">TYPE</span><br><span class="hljs-comment">--------------------------------------------------------------------------------</span><br>         network-r8168            <span class="hljs-number">2016.04</span>.<span class="hljs-number">20</span>                <span class="hljs-literal">true</span>            PCI<br>           video-linux            <span class="hljs-number">2018.05</span>.<span class="hljs-number">04</span>                <span class="hljs-literal">true</span>            PCI<br>video-hybrid-intel-nvidia-bumblebee            <span class="hljs-number">2018.08</span>.<span class="hljs-number">09</span>               <span class="hljs-literal">false</span>            PCI<br><br><br>$ sudo optirun glxgears # Ran后跑起来一个轮子测试一下，会出现一个小正方形动图。<br><br>我们看看GPU是OFF 还是 <span class="hljs-keyword">ON</span>？<br>$ watch cat /proc/acpi/bbswitch # refresh every <span class="hljs-number">2</span> seconds, <span class="hljs-keyword">to</span> see whether GPU <span class="hljs-keyword">is</span> <span class="hljs-symbol">'ON</span>' <span class="hljs-keyword">or</span> <span class="hljs-symbol">'OFF</span>'<br><br>然后再看一下，有哪些程序运行在NVIDIA上<br>$ nvidia-smi<br></code></pre></td></tr></table></figure><blockquote><p>到上面，就已经安装好了NVIDIA，当需要的时候是能够运行NVIDIA的。</p><p>那么怎么启动呢？其实，Manjaro网站上的教程很详细，<a href="https://wiki.manjaro.org/index.php?title=Configure_NVIDIA_(non-free)_settings_and_load_them_on_Startup" target="_blank" rel="noopener">https://wiki.manjaro.org/index.php?title=Configure_NVIDIA_(non-free)_settings_and_load_them_on_Startup</a></p><p>当我们需要用显卡运行一个程序，运行命令<code>primusrun program1</code> (program是steam主程序，我的会有点问题)</p><p>当我们想要用显卡运行steam里面的游戏，进去steam的库，右键游戏，点<code>属性</code>，然后点<code>设置启动选项</code>,里面输入<code>primusrun %command%</code>，不要输错，不要改。Ran后再运行游戏，就能调用显卡就行了！！</p></blockquote><h3 id="pytorch-调用显卡"><a href="#pytorch-调用显卡" class="headerlink" title="pytorch 调用显卡"></a>pytorch 调用显卡</h3><figure class="hljs highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined"># 首先安装<br>sudo pacman -S python-pytorch-cuda<br>#　这将安装以下包，之所以不用pytorch官网的方法，是太慢啦。<br>Packages (8) cblas<span class="hljs-string">-3</span>.8.0<span class="hljs-string">-2</span>  cuda<span class="hljs-string">-10</span>.1.105<span class="hljs-string">-6</span>  cudnn<span class="hljs-string">-7</span>.5.0.56<span class="hljs-string">-1</span>  nccl<span class="hljs-string">-2</span>.4.2<span class="hljs-string">-4</span>  opencl-nvidia<span class="hljs-string">-1</span>:418.43<span class="hljs-string">-1</span>  opencv<span class="hljs-string">-4</span>.0.1<span class="hljs-string">-6</span>  python-numpy<span class="hljs-string">-1</span>.16.2<span class="hljs-string">-1</span>  python-pytorch-cuda<span class="hljs-string">-1</span>.0.1<span class="hljs-string">-5</span><br><br># 测试pytorch能否调用NVIDIA显卡<br>$ python<br>&gt;&gt;&gt;import torch<br>&gt;&gt;&gt;print(torch.cuda.is_available())<br>False<br><br># 因为NVIDIA显卡没有开！下面命令打开和关闭NVIDIA程序，当是ON的时候，上面就是TRUE了！！<br><br>sudo tee /proc/acpi/bbswitch &lt;&lt;&lt; ON<br>sudo tee /proc/acpi/bbswitch &lt;&lt;&lt; OFF<br></code></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Nvidia </tag>
            
            <tag> GPU </tag>
            
            <tag> Manjaro </tag>
            
            <tag> Arch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>饥荒mod1</title>
      <link href="/2019/04/09/%E9%A5%A5%E8%8D%92mod1/"/>
      <url>/2019/04/09/%E9%A5%A5%E8%8D%92mod1/</url>
      <content type="html"><![CDATA[<p>如何制作饥荒mod教程</p><a id="more"></a><p>快速开始</p><ol><li><p>如何安装并使用mod？</p><ul><li><p>从steam 创意工坊安装并启用 略。</p></li><li><p>从Klei下载并安装：</p><ul><li><p>首先转到下载页面：<a href="https://forums.kleientertainment.com/files/，" target="_blank" rel="noopener">https://forums.kleientertainment.com/files/，</a> 下载喜欢的mod</p></li><li><p>然后双击打开下载的压缩包，并将文件夹拷贝到mod文件夹：</p><figure class="hljs highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Steam/Windows: C:<span class="hljs-tag">\<span class="hljs-name">Program</span></span> Files (x86)<span class="hljs-tag">\<span class="hljs-name">Steam</span></span><span class="hljs-tag">\<span class="hljs-name">SteamApps</span></span><span class="hljs-tag">\<span class="hljs-name">common</span></span><span class="hljs-tag">\<span class="hljs-name">dont</span></span>_starve<span class="hljs-tag">\<span class="hljs-name">mods</span></span><span class="hljs-tag">\<span class="hljs-name"><br></span></span>Standalone/Windows: C:<span class="hljs-tag">\<span class="hljs-name">Program</span></span> Files<span class="hljs-tag">\<span class="hljs-name">dontstarve</span></span><span class="hljs-tag">\<span class="hljs-name">mods</span></span><br>Standalone/Mac: /Applications/Don't Starve/Don't Starve.app/Contents/mods/<br>Steam/Linux: /home/username/.local/share/Steam/SteamApps/common/dont_starve/mods<br></code></pre></td></tr></table></figure></li><li><p>然后打开饥荒，并在饥荒中启用该mod</p></li></ul></li></ul></li><li><p>开始之前</p><p>  需要对困难有一定的认知。</p><p>  要学一点lua语言。</p></li><li><p>Mod API更新(API V6, 2014)</p><p><strong>MOD_API_VERSION</strong> 如名，当时的API版本是6，在Don’t Starve Together之前不会增加新API了。</p><p><strong>Mod Capatibility</strong> Mod兼容性很重要，最好在modinfo.lua中指明兼容性，不指名会有警告的log。(我猜大概是<code>modinfo.lua</code> 中的<code>api_version</code>参数)</p></li></ol><blockquote><p>把你的mod升级到新的mod 兼容性</p></blockquote><p>3.1.打开modinfo.lua</p><p>3.2.添加<code>dont_starve_compatible</code> 和 <code>reign_of_giants_compatible</code> 布尔变量到<code>modinfo</code>，比如<code>dont_starve_compatible = falsereign_of_giants_compatible = true</code>, 这些兼容性信息将会在mod列表的名字处显示。</p><p>一个例子是(<code>modinfo.lua</code>)：</p><p><img src="../pic/2019-04/image-20190410092130663.png" alt="image-20190410092130663"></p><p><strong>Mod Configuration Options</strong> 是新特性，允许给他们的mod设一组选项。就是在modinfo.lua 中设置mod的一些参数。这些参数可以通过函数获得。</p><h2 id="Art-篇"><a href="#Art-篇" class="headerlink" title="Art 篇"></a>Art 篇</h2>]]></content>
      
      <categories>
          
          <category> 游戏 </category>
          
          <category> 饥荒 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 饥荒 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python排序算法</title>
      <link href="/2019/04/09/Python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2019/04/09/Python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>python实现常见排序算法</p><a id="more"></a><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">'''冒泡排序，我的第一版'''</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(arr)</span>:</span><br>    n = len(arr)<br>    <span class="hljs-keyword">while</span> n &gt;= <span class="hljs-number">1</span>:<br>        i, j = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> j &lt;= n <span class="hljs-number">-1</span>:<br>            <span class="hljs-keyword">if</span> arr[i] &gt; arr[j]:<br>                arr[i], arr[j] = arr[j], arr[i]<br>            <br>            i += <span class="hljs-number">1</span><br>            j += <span class="hljs-number">1</span><br>        n -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> arr<br><br><br><span class="hljs-string">'''冒泡排序，从文章来'''</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort2</span><span class="hljs-params">(lists)</span>:</span><br>    <br>    count = len(lists)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, count):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i + <span class="hljs-number">1</span>, count):<br>            <span class="hljs-keyword">if</span> lists[i] &gt; lists[j]:<br>                lists[i], lists[j] = lists[j], lists[i]<br>    <span class="hljs-keyword">return</span> lists<br><br><br><span class="hljs-string">'''冒泡排序，我的第二版:while 改成for'''</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort3</span><span class="hljs-params">(lists)</span>:</span><br>    count = len(lists)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(count, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(count<span class="hljs-number">-1</span>): <span class="hljs-comment"># count-1是因为它是慢指针，与它右边的值进行比较</span><br>            <span class="hljs-keyword">if</span> lists[j] &gt; lists[j+<span class="hljs-number">1</span>]:<br>                lists[j], lists[j+<span class="hljs-number">1</span>] = lists[j+<span class="hljs-number">1</span>], lists[j]<br>    <span class="hljs-keyword">return</span> lists<br></code></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">'''插入排序, 我的第一版'''</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_sort</span><span class="hljs-params">(lists)</span>:</span><br>    <span class="hljs-keyword">if</span> len(lists) &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> lists<br><br>    out = [lists[<span class="hljs-number">0</span>]]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lists[<span class="hljs-number">1</span>:]:<br>        out.append(i)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(out)<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>):<br>            <span class="hljs-keyword">if</span> out[i<span class="hljs-number">-1</span>] &gt; out[i]:<br>                out[i<span class="hljs-number">-1</span>], out[i] = out[i], out[i<span class="hljs-number">-1</span>]<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> lists<br><br><br><span class="hljs-string">'''插入排序，文章来'''</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_sort2</span><span class="hljs-params">(lists)</span>:</span><br>    <span class="hljs-comment"># 插入排序</span><br>    count = len(lists)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, count):<br>        key = lists[i]<br>        j = i - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> j &gt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> lists[j] &gt; key:<br>                lists[j + <span class="hljs-number">1</span>] = lists[j]<br>                lists[j] = key<br>            j -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> lists<br><br><span class="hljs-string">'''插入排序，我的第二版：原址排序'''</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_sort3</span><span class="hljs-params">(lists)</span>:</span><br>    count = len(lists)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, count):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>):<br>            <span class="hljs-keyword">if</span> lists[j<span class="hljs-number">-1</span>] &gt; lists[j]:<br>                lists[j<span class="hljs-number">-1</span>], lists[j] = lists[j], lists[j<span class="hljs-number">-1</span>]<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">return</span> lists<br></code></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>每次从未排序部分选择最小值，将其放到已排序的末尾</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">'''select sort'''</span><br><span class="hljs-string">'''我的需要多比n次。可以在前面添加：if len(count) &lt;= 1: return lists'''</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">select_sort1</span><span class="hljs-params">(lists)</span>:</span><br>    count = len(lists)<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(count):<br>        min_n = i<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i, count):<br>            <span class="hljs-keyword">if</span> lists[j] &lt; lists[min_n]:<br>                min_n = j<br>        lists[min_n], lists[i] = lists[i], lists[min_n]<br>            <br>    <span class="hljs-keyword">return</span> lists<br><br><br><span class="hljs-string">'''from 文章'''</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">select_sort2</span><span class="hljs-params">(lists)</span>:</span><br>    <span class="hljs-comment"># 选择排序</span><br>    count = len(lists)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, count):<br>        min = i<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i + <span class="hljs-number">1</span>, count):<br>            <span class="hljs-keyword">if</span> lists[min] &gt; lists[j]:<br>                min = j<br>        lists[min], lists[i] = lists[i], lists[min]<br>    <span class="hljs-keyword">return</span> lists<br></code></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>对于递归算法，主要是写出递归公式及终止条件。</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">递归公式：<br><span class="hljs-function"><span class="hljs-title">merge_sort</span><span class="hljs-params">(p..r)</span></span> = merge(merge_sort(<span class="hljs-selector-tag">p</span>..q), merge_sort(q+<span class="hljs-number">1</span>...r))<br><br>终止条件：<br><span class="hljs-selector-tag">p</span> &gt;= r 不用再继续分解<br></code></pre></td></tr></table></figure><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">'''归并排序, 我的第一版'''</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(lists)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span><span class="hljs-params">(list1, list2)</span>:</span><br>        i, j = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        out = []<br>        <span class="hljs-keyword">while</span> i &lt; len(list1) <span class="hljs-keyword">and</span> j &lt; len(list2):<br>            <span class="hljs-keyword">if</span> list1[i] &gt;= list2[j]:<br>                out.append(list2[j])<br>                j += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                out.append(list1[i])<br>                i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> i == len(list1):<br>            out.extend(list2[j:])<br>        <span class="hljs-keyword">else</span>:<br>            out.extend(list1[i:])<br>        <span class="hljs-keyword">return</span> out<br><br>    <span class="hljs-keyword">if</span> len(lists) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> lists<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> merge(merge_sort(lists[:len(lists)//<span class="hljs-number">2</span>]), merge_sort(lists[len(lists)//<span class="hljs-number">2</span>:]))<br><br>    <span class="hljs-keyword">return</span> lists<br></code></pre></td></tr></table></figure><blockquote><p>感觉我的merge函数不太好。要修改一下。</p></blockquote><figure class="hljs highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># 高级版merge函数！</span><br>def merge_sort(arr):<br>    def <span class="hljs-built_in">merge</span>(left, <span class="hljs-literal">right</span>):<br>        <span class="hljs-built_in">result</span> = []<br>        <span class="hljs-keyword">while</span> left <span class="hljs-keyword">and</span> <span class="hljs-literal">right</span>:<br>            <span class="hljs-built_in">result</span>.append((left <span class="hljs-keyword">if</span> left[<span class="hljs-number">0</span>] &lt; <span class="hljs-literal">right</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">else</span> <span class="hljs-literal">right</span>).pop(<span class="hljs-number">0</span>))<br>        <span class="hljs-built_in">result</span> = <span class="hljs-built_in">result</span> + left + <span class="hljs-literal">right</span><br>        <span class="hljs-literal">return</span> <span class="hljs-built_in">result</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-literal">return</span> arr<br>    <span class="hljs-keyword">mid</span> = <span class="hljs-built_in">len</span>(arr<span class="hljs-comment">)//2</span><br>    <span class="hljs-literal">return</span> <span class="hljs-built_in">merge</span>(merge_sort(arr[:<span class="hljs-keyword">mid</span>]), merge_sort(arr[<span class="hljs-keyword">mid</span>:]))<br></code></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><blockquote><p>这个挖坑填数+分治法甚好。<a href="https://blog.csdn.net/MoreWindows/article/details/6684558" target="_blank" rel="noopener">https://blog.csdn.net/MoreWindows/article/details/6684558</a></p></blockquote><figure class="hljs highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># 基础版</span><br>def quick_sort(arr):<br>    arr_len = <span class="hljs-built_in">len</span>(arr)<br>    <br>    <span class="hljs-keyword">if</span> arr_len &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-literal">return</span> arr<br>    <span class="hljs-keyword">else</span>:<br>        less, greater = [], []<br>        pivot = arr.pop()<br>        <span class="hljs-keyword">for</span> <span class="hljs-keyword">element</span> <span class="hljs-keyword">in</span> arr:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">element</span> &lt; pivot:<br>                less.append(<span class="hljs-keyword">element</span>)<br>            <span class="hljs-keyword">else</span>:<br>                greater.append(<span class="hljs-keyword">element</span>)<br>        <span class="hljs-literal">return</span> quick_sort(less) + [pivot] + quick_sort(greater)<br></code></pre></td></tr></table></figure><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 挖坑分治法</span><br></code></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>文章算法参考：<a href="http://python.jobbole.com/82270/" target="_blank" rel="noopener">八大排序算法的 Python 实现</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>学习制作饥荒mod</title>
      <link href="/2019/04/09/%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9C%E9%A5%A5%E8%8D%92mod/"/>
      <url>/2019/04/09/%E5%AD%A6%E4%B9%A0%E5%88%B6%E4%BD%9C%E9%A5%A5%E8%8D%92mod/</url>
      <content type="html"><![CDATA[<p>目标：制作个路灯mod + 无限耐久火把mod</p><a id="more"></a><p>第一部分：先说火把</p><ul><li>所需要的图片有</li></ul><p>1.放在装备栏里的图片</p><p>2.扔在地上图片</p><p>3.拿在手中的图片</p><p>看我PS大法。一波操作之后…</p><p><img src="" alt="装备栏火炬"></p><p><img src="" alt="扔在地上的火炬"></p><p><img src="" alt="拿在手中的火炬"></p><ul><li>需要什么来合成呢？一定得难一点。</li></ul><p>金10</p><p>内部很复杂，齿轮⚙2个</p><p>祥云能够燃烧15分钟</p><p>祥云需要酒(酒的制作？？)</p><p>路灯需要酒，酒的制作？？</p><p>酒降低精神，立刻睡觉会很快恢复。</p><p>刚好那个粮食，学一学。制作酒。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>python虚拟环境</title>
      <link href="/2018/12/25/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/12/25/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>virtualenv 和 pyenv的使用</p><a id="more"></a><h2 id="第一部分：virtualenv的使用"><a href="#第一部分：virtualenv的使用" class="headerlink" title="第一部分：virtualenv的使用"></a>第一部分：virtualenv的使用</h2><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 首先用pip3安装virtualenv</span><br>pip3 install virtualenv<br><span class="hljs-meta"><br>#</span><span class="bash"> 创建独立的python运行环境：</span><br>virtualenv --no-site-packages venv<br><span class="hljs-meta"><br>#</span><span class="bash"> 其他参数：</span><br><span class="hljs-meta">#</span><span class="bash"> --always-copy 默认行为是符号链接需要的文件， 可以强制复制，而非拷贝。</span><br><span class="hljs-meta">#</span><span class="bash"> -p PYTHON_EXE 指定python解析器</span><br><span class="hljs-meta"><br><br>#</span><span class="bash"> 激活</span><br>source venv/bin/activate<br><span class="hljs-meta"><br>#</span><span class="bash"> 退出</span><br>deactivate<br></code></pre></td></tr></table></figure><figure class="hljs highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># python环境的备份</span><br>pip freeze &gt; requirements.txt<br>pip <span class="hljs-keyword">install</span> -r requirements.txt<br></code></pre></td></tr></table></figure><h2 id="第二部分：pyenv的使用"><a href="#第二部分：pyenv的使用" class="headerlink" title="第二部分：pyenv的使用"></a>第二部分：pyenv的使用</h2><h3 id="pyenv的工作原理"><a href="#pyenv的工作原理" class="headerlink" title="pyenv的工作原理"></a>pyenv的工作原理</h3><p>当我们使用命令比如<code>pip</code> 或者<code>python</code>时，Linux通过<code>PATH</code>环境变量来查找这个可执行程序。比如<code>PATH</code> 是<code>/usr/local/bin:/usr/bin:/bin</code>，则Linux从左到右查找是否存在<code>python</code>命令，在第一个文件夹<code>/usr/local/bin</code>下找到了<code>python</code>，就不再继续查找了。</p><p><strong>pyenv的工作原理</strong>就是基于<code>PATH</code>变量。</p><p><code>pyenv</code>在<code>PATH</code>前面插入一个目录，变成了<code>$(pyenv root)/shims:/usr/local/bin:/usr/bin:/bin</code>。</p><p>切换的秘诀就是<code>shims</code>文件夹下的<code>python文件内容</code>的改变 (<code>pip</code>等也变)。</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># 首先安装一个python版本，参考下面。</span><br><br>$ cd ~/.pyenv/shims &amp;&amp; pyenv versions<br> <span class="hljs-built_in"> system<br></span>* 3.7.3 (<span class="hljs-builtin-name">set</span> by /Users/kaigedong/.pyenv/version)<br>$ ./python --version<br>Python 3.7.3<br><br>$ pyenv global<span class="hljs-built_in"> system </span>&amp;&amp; pyenv versions<br>*<span class="hljs-built_in"> system </span>(<span class="hljs-builtin-name">set</span> by /Users/kaigedong/.pyenv/version)<br>  3.7.3<br><br>$ ./python --version<br>Python 2.7.10<br><br>$ echo <span class="hljs-variable">$PATH</span><br>/Users/kaigedong/.pyenv/shims:/Users/kaigedong/.pyenv/bin:<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br></code></pre></td></tr></table></figure><h3 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h3><figure class="hljs highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git clone https:<span class="hljs-string">//github.com/pyenv/pyenv.git</span> ~<span class="hljs-string">/.pyenv</span><br><span class="hljs-keyword">echo</span> 'export PYENV_ROOT=<span class="hljs-string">"$HOME/.pyenv"</span>' &gt;&gt; ~<span class="hljs-string">/.zshrc</span><br><span class="hljs-keyword">echo</span> 'export PATH=<span class="hljs-string">"$PYENV_ROOT/bin:$PATH"</span>' &gt;&gt;~<span class="hljs-string">/.zshrc</span><br><span class="hljs-keyword">echo</span> -e '<span class="hljs-keyword">if</span> <span class="hljs-keyword">command</span> -v pyenv 1&gt;<span class="hljs-string">/dev/null</span> 2&gt;&amp;1; then\n  eval <span class="hljs-string">"$(pyenv init -)"</span>\nfi' &gt;&gt; ~<span class="hljs-string">/.zshrc</span><br>exec <span class="hljs-string">"$SHELL"</span><br></code></pre></td></tr></table></figure><h3 id="安装一个python-版本"><a href="#安装一个python-版本" class="headerlink" title="安装一个python 版本"></a>安装一个python 版本</h3><figure class="hljs highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">pyenv install -l <span class="hljs-comment"># 列出所有能够安装的python版本</span><br>pyenv install <span class="hljs-number">3.7</span><span class="hljs-number">.3</span> (Mac 下报错：zipimport.ZipImportError: can't decompress data; zlib <span class="hljs-keyword">not</span> available，但是brew install zlib：Warning: zlib <span class="hljs-number">1.2</span><span class="hljs-number">.11</span> <span class="hljs-keyword">is</span> already installed <span class="hljs-keyword">and</span> up-<span class="hljs-keyword">to</span>-dat； 这是因为zlib的库没有正确链接。) <br><br>ln -s /usr/<span class="hljs-keyword">local</span>/Cellar/zlib/<span class="hljs-number">1.2</span><span class="hljs-number">.11</span>/include/* /usr/<span class="hljs-keyword">local</span>/include<br>ln -s /usr/<span class="hljs-keyword">local</span>/Cellar/zlib/<span class="hljs-number">1.2</span><span class="hljs-number">.11</span>/lib/* /usr/<span class="hljs-keyword">local</span>/lib<br>pyenv install <span class="hljs-number">3.7</span><span class="hljs-number">.3</span><br></code></pre></td></tr></table></figure><h3 id="版本的切换-全局"><a href="#版本的切换-全局" class="headerlink" title="版本的切换: 全局"></a>版本的切换: 全局</h3><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ pyenv versions<br>*<span class="hljs-built_in"> system </span>(<span class="hljs-builtin-name">set</span> by /Users/kaigedong/.pyenv/version)<br>  3.7.3<br><br>$ pyenv global 3.7.3<br><br>$ pyenv versions<br> <span class="hljs-built_in"> system<br></span>* 3.7.3 (<span class="hljs-builtin-name">set</span> by /Users/kaigedong/.pyenv/version)<br></code></pre></td></tr></table></figure><h3 id="版本的切换：local"><a href="#版本的切换：local" class="headerlink" title="版本的切换：local"></a>版本的切换：local</h3><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ cd ~ &amp;&amp; mkdir test_pyenv<br>$ pyenv local<span class="hljs-built_in"> system </span>&amp;&amp; pyenv versions<br>*<span class="hljs-built_in"> system </span>(<span class="hljs-builtin-name">set</span> by /Users/kaigedong/test_pyenv/.python-version)<br>  3.7.3<br>$ ls -a<br>.python-version # 该目录下有这个文件，内容是system<br><br><br>$ cd <span class="hljs-built_in">..</span> &amp;&amp; pyenv versions<br> <span class="hljs-built_in"> system<br></span>* 3.7.3 (<span class="hljs-builtin-name">set</span> by /Users/kaigedong/.pyenv/version)<br></code></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyenv </tag>
            
            <tag> virtualenv </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>吴恩达机器学习笔记</title>
      <link href="/2018/12/16/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/12/16/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>占坑，待更新。</p><a id="more"></a><h1 id="初识机器学习"><a href="#初识机器学习" class="headerlink" title="初识机器学习"></a>初识机器学习</h1><p>机器学习无处不在：搜索引擎，排序算法，照片分类算法，垃圾邮件过滤等。</p><p>应用：</p><ul><li>数据挖掘：更好的服务用户，医疗记录，生物学数据，工程领域；</li><li>无法实现的算法：自动直升飞机，自然语言处理，手写字识别，计算机视觉等；</li><li>网站推荐程序：亚马逊、YouTube的推荐算法；</li><li>理解人类大脑</li></ul><h2 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h2><p>实际上没有统一的定义。</p><h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><h2 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h2>]]></content>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django+Apache wsgi 部署</title>
      <link href="/2018/12/13/Django-Apache-wsgi-%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/12/13/Django-Apache-wsgi-%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<ul><li>找对了文档非常简单…</li></ul><a id="more"></a><blockquote><p>官方文档非常简单，而且能确保正确。网上的博客质量参差不齐，或者因为软件发展太快，导致可能会有各种错误。</p></blockquote><h2 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h2><blockquote><p>首先设置<code>http.conf</code> </p></blockquote><figure class="hljs highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">WSGIScriptAlias / /path/<span class="hljs-keyword">to</span>/mysite.<span class="hljs-keyword">com</span>/mysite/wsgi.<span class="hljs-keyword">py</span> # 这里 / 我设置成了 /dbweb<br>WSGIPythonHome /path/<span class="hljs-keyword">to</span>/venv<br>WSGIPythonPath /path/<span class="hljs-keyword">to</span>/mysite.<span class="hljs-keyword">com</span><br><br>&lt;Directory /path/<span class="hljs-keyword">to</span>/mysite.<span class="hljs-keyword">com</span>/mysite&gt;<br>&lt;Files wsgi.<span class="hljs-keyword">py</span>&gt;<br>Require <span class="hljs-keyword">all</span> granted<br>&lt;/Files&gt;<br>&lt;/Directory&gt;<br></code></pre></td></tr></table></figure><h2 id="使用mod-wsgi"><a href="#使用mod-wsgi" class="headerlink" title="使用mod_wsgi"></a>使用<code>mod_wsgi</code></h2><p>Django官方使用的是 <code>official mod_wsgi</code>, 我们直接去看看如何安装上这个模块。进入：<a href="https://modwsgi.readthedocs.io/en/develop/installation.html" target="_blank" rel="noopener">installation and configuration documentation</a> ,按照说明：</p><figure class="hljs highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/GrahamDumpleton/m</span>od_wsgi<span class="hljs-regexp">/archive/</span><span class="hljs-number">4.6</span>.<span class="hljs-number">5</span>.zip <span class="hljs-comment"># 更新很快，自己去看看新版本。</span><br>.<span class="hljs-regexp">/configure --with-apxs=/u</span>sr<span class="hljs-regexp">/local/</span>apache<span class="hljs-regexp">/bin/</span>apxs --with-python=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>python<br>make<br>make install<br></code></pre></td></tr></table></figure><p>然后在<code>httpd.conf</code> 添加一行</p><figure class="hljs highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute"><span class="hljs-nomarkup">LoadModule</span></span> wsgi_module modules/mod_wsgi.so<br></code></pre></td></tr></table></figure><p>并重启Apache服务。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.djangoproject.com/zh-hans/2.1/howto/deployment/wsgi/modwsgi/#how-to-use-django-with-apache-and-mod-wsgi" target="_blank" rel="noopener">How to use Django with Apache and <code>mod_wsgi</code></a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Apache 部署 Django</title>
      <link href="/2018/12/12/Apache-%E9%83%A8%E7%BD%B2-Django/"/>
      <url>/2018/12/12/Apache-%E9%83%A8%E7%BD%B2-Django/</url>
      <content type="html"><![CDATA[<p>Apache + uwsgi部署Django</p><a id="more"></a><p>Apache 部署Django的尝试</p><ul><li><p>Apache版本：见前面博文</p></li><li><p>Python环境：</p><figure class="hljs highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">Django</span>==<span class="hljs-number">2.1</span>.<span class="hljs-number">3</span><br><span class="hljs-attr">django-datatables-view</span>==<span class="hljs-number">1.17</span>.<span class="hljs-number">0</span><br><span class="hljs-attr">mysql-connector-python</span>==<span class="hljs-number">8.0</span>.<span class="hljs-number">5</span><br><span class="hljs-attr">protobuf</span>==<span class="hljs-number">3.6</span>.<span class="hljs-number">1</span><br><span class="hljs-attr">pytz</span>==<span class="hljs-number">2018.7</span><br><span class="hljs-attr">six</span>==<span class="hljs-number">1.11</span>.<span class="hljs-number">0</span><br><span class="hljs-attr">uWSGI</span>==<span class="hljs-number">2.0</span>.<span class="hljs-number">17.1</span><br></code></pre></td></tr></table></figure></li></ul><p>Apache 需要加载<code>modules/mod_wsgi.so</code>模块，python也要安装<code>uwsgi</code>。</p><p>在<a href="https://github.com/unbit/uwsgi/blob/master/apache2/mod_uwsgi.c" target="_blank" rel="noopener">https://github.com/unbit/uwsgi/blob/master/apache2/mod_uwsgi.c</a> 下载该文件，使用Apache提供的<code>apxs</code>自己编译：</p><figure class="hljs highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/unbit/u</span>wsgi<span class="hljs-regexp">/blob/m</span>aster<span class="hljs-regexp">/apache2/m</span>od_uwsgi.c<br>apxs -i -a -c mod_uwsgi.c <span class="hljs-comment"># 这样就会在modules文件夹增加mod_wsgi.so， 并且会自动修改http.conf,我们只要重启Apache就行了</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.iitshare.com/apache-uwsgi-django-multi-sites.html" target="_blank" rel="noopener">http://www.iitshare.com/apache-uwsgi-django-multi-sites.html</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>PyTorch 60min教程</title>
      <link href="/2018/12/09/pytorch%2060min/"/>
      <url>/2018/12/09/pytorch%2060min/</url>
      <content type="html"><![CDATA[<p>PyTorch 60min教程</p><a id="more"></a><!--more--><h2 id="什么是PyTorch"><a href="#什么是PyTorch" class="headerlink" title="什么是PyTorch"></a>什么是PyTorch</h2><p>基于Python的科学计算包，有以下目标：1.替代NumPy以支持GPU；2.支持深度学习领域，以提供灵活性和速度</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="Tensors"><a href="#Tensors" class="headerlink" title="Tensors"></a>Tensors</h4><blockquote><p>Tensors与Numpy的ndarray (n维数组)很像，并且多了在GPU上运算的能力。</p></blockquote><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">import torch<br><br>构建一个<span class="hljs-number">5</span>x3的矩阵,很多方法：<br>x = torch.empty(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)<br>x = torch.zeros(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>) # 推荐。<br>x = torch.rand(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)<br>print(x)<br></code></pre></td></tr></table></figure><blockquote><p>直接从数据构建tensor</p></blockquote><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">x = torch.tensor([<span class="hljs-number">5.5</span>, <span class="hljs-number">3</span>]); print(x)<br><br># tensor([<span class="hljs-number">5.5000</span>, <span class="hljs-number">3.0000</span>])<br></code></pre></td></tr></table></figure><blockquote><p>获得大小</p></blockquote><figure class="hljs highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">print(<span class="hljs-name">x</span>.size())<br></code></pre></td></tr></table></figure><h4 id="Tensor的操作"><a href="#Tensor的操作" class="headerlink" title="Tensor的操作"></a>Tensor的操作</h4><figure class="hljs highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">In <span class="hljs-comment">[19]</span>: x = torch.rand(5,3)                                                                                                                                                                                  <br><br>In <span class="hljs-comment">[20]</span>: y = torch.rand(5,3)                                                                                                                                                                                  <br><br>In <span class="hljs-comment">[21]</span>: x+y                                                                                                                                                                                                  <br>Out<span class="hljs-comment">[21]</span>: <br>tensor(<span class="hljs-comment">[<span class="hljs-comment">[0.5382, 1.8239, 0.2713]</span>,<br>        <span class="hljs-comment">[1.0294, 1.0171, 1.0428]</span>,<br>        <span class="hljs-comment">[1.4945, 1.1763, 1.2707]</span>,<br>        <span class="hljs-comment">[1.8769, 0.7077, 1.7810]</span>,<br>        <span class="hljs-comment">[1.7013, 1.4604, 0.4329]</span>]</span>)<br></code></pre></td></tr></table></figure><h4 id="与numpy转换"><a href="#与numpy转换" class="headerlink" title="与numpy转换"></a>与numpy转换</h4><blockquote><p>tensor 转ndarray</p></blockquote><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">a = torch.ones(<span class="hljs-number">5</span>)<br>print(a)<br><br>tensor([<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>])<br><br>b = a.numpy(); print(b)<br></code></pre></td></tr></table></figure><blockquote><p>ndarray转tensor</p></blockquote><figure class="hljs highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">In</span> [<span class="hljs-number">28</span>]: import numpy <span class="hljs-keyword">as</span> np                                                                                                                                                                                   <br><br><span class="hljs-keyword">In</span> [<span class="hljs-number">29</span>]: a = np.ones(<span class="hljs-number">5</span>)                                                                                                                                                                                       <br><br><span class="hljs-keyword">In</span> [<span class="hljs-number">30</span>]: b = torch.from_numpy(a)<br></code></pre></td></tr></table></figure><h4 id="cuda-tensors"><a href="#cuda-tensors" class="headerlink" title="cuda tensors"></a>cuda tensors</h4><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">x                                                                                                                                                                                                    <br><br>tensor([[<span class="hljs-number">0.3044</span>, <span class="hljs-number">0.9737</span>, <span class="hljs-number">0.1535</span>],<br>        [<span class="hljs-number">0.8429</span>, <span class="hljs-number">0.8485</span>, <span class="hljs-number">0.0721</span>],<br>        [<span class="hljs-number">0.7615</span>, <span class="hljs-number">0.7300</span>, <span class="hljs-number">0.5238</span>],<br>        [<span class="hljs-number">0.9435</span>, <span class="hljs-number">0.3953</span>, <span class="hljs-number">0.9996</span>],<br>        [<span class="hljs-number">0.7440</span>, <span class="hljs-number">0.8475</span>, <span class="hljs-number">0.0657</span>]])<br></code></pre></td></tr></table></figure><blockquote><p>直接在GPU上创建tensor</p></blockquote><figure class="hljs highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">y = torch.ones_like(x, device=<span class="hljs-string">'cuda'</span>)<br><br>y<br>tensor([[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>        [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>        [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>        [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>        [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]], device=<span class="hljs-string">'cuda:0'</span>)<br></code></pre></td></tr></table></figure><blockquote><p>CPU上的tensor 转到GPU上</p></blockquote><figure class="hljs highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">x</span> = <span class="hljs-keyword">x</span>.<span class="hljs-keyword">to</span>(device)<br></code></pre></td></tr></table></figure><blockquote><p>GPU转到CPU</p></blockquote><figure class="hljs highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">z = <span class="hljs-keyword">x</span>+y<br>z.<span class="hljs-keyword">to</span>('cpu', torch.<span class="hljs-keyword">double</span>)<br></code></pre></td></tr></table></figure><h2 id="自动微分"><a href="#自动微分" class="headerlink" title="自动微分"></a>自动微分</h2><p>Pytorch所有神经网络的核心是<code>autograd</code>包。</p><p><code>torch.Tensor</code>是该包的核心类。如果设置了它的属性<code>.requires_grad</code>为<code>True</code>，它将追踪其上所有的操作。当完成计算之后，调用<code>.backward()</code>即可自动计算素有的梯度。该tensor的梯度存在<code>.grad</code>属性中。</p><p>要想阻止张量追踪，可以调用<code>.detach()</code></p><p><code>Tensor</code> 和 <code>Function</code>相互连接构成非循环图 (想象一下一个tensor，然后用function计算…)。每个<code>tensor</code>有一个<code>.grad_fn</code>属性用来记录创建他们的<code>Function</code>,除了用户自己创建的tensor。</p><p>如果想要计算导数，可以在<code>Tensor</code>上调用`.backward()。</p><figure class="hljs highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs undefined">In <span class="hljs-comment">[68]</span>: import torch                                                                                                                                                                                         <br><br>In <span class="hljs-comment">[69]</span>: x = torch.ones(2,2,requires_grad=True)                                                                                                                                                               <br><br>In <span class="hljs-comment">[70]</span>: x                                                                                                                                                                                                    <br>Out<span class="hljs-comment">[70]</span>: <br>tensor(<span class="hljs-comment">[<span class="hljs-comment">[1., 1.]</span>,<br>        <span class="hljs-comment">[1., 1.]</span>]</span>, requires_grad=True)<br><br>In <span class="hljs-comment">[71]</span>: y = x + 2                                                                                                                                                                                            <br><br>In <span class="hljs-comment">[72]</span>: y                                                                                                                                                                                                    <br>Out<span class="hljs-comment">[72]</span>: <br>tensor(<span class="hljs-comment">[<span class="hljs-comment">[3., 3.]</span>,<br>        <span class="hljs-comment">[3., 3.]</span>]</span>, grad_fn=&lt;AddBackward0&gt;)<br><br>In <span class="hljs-comment">[73]</span>: y.grad_fn # 因为y是计算产生的，所以有grad_fn                                                                                                                                                                                            <br>Out<span class="hljs-comment">[73]</span>: &lt;AddBackward0 at 0x7fa2dc92a198&gt;<br></code></pre></td></tr></table></figure><blockquote><p>设置<code>requires_grad</code>的值,以便tensor能够追踪创建它的函数。</p></blockquote><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">In</span> [81]: a                                                                                                                                                                                                    <br>Out[81]: <br>tensor([[ -1.2560, -11.1015],<br>        [ -2.4457,   1.9479]])<br><br><span class="hljs-keyword">In</span> [82]: <span class="hljs-builtin-name">print</span>(a.requires_grad)                                                                                                                                                                               <br><span class="hljs-literal">False</span><br><br><span class="hljs-keyword">In</span> [83]: a.requires_grad_(<span class="hljs-literal">True</span>)                                                                                                                                                                               <br>Out[83]: <br>tensor([[ -1.2560, -11.1015],<br>        [ -2.4457,   1.9479]], <span class="hljs-attribute">requires_grad</span>=<span class="hljs-literal">True</span>)<br><br>a.<span class="hljs-attribute">requires_grad</span>=<span class="hljs-literal">False</span><br>a.<span class="hljs-attribute">requires_grad</span>=<span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><blockquote><p>然后可以调用<code>.backward</code>进行求导</p></blockquote><figure class="hljs highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">out</span>.backward()<br><span class="hljs-keyword">print</span>(x.grad) # 即求`<span class="hljs-built_in">d</span>(<span class="hljs-keyword">out</span>)/dx`<br></code></pre></td></tr></table></figure><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p>可以使用<code>torch.nn</code>来构建神经网络。</p><p><code>nn</code>依赖于<code>autograd</code>(自动梯度)来定义模型。<code>nn.Module</code>包含layers，和一个<code>forward(input)</code>方法，并返回<code>output</code></p><p><img src="https://pytorch.org/tutorials/_images/mnist.png" alt="convnet"></p><p>一个典型的神经网络训练：</p><ul><li>定义神经网络，使它有一些可学习的参数(或权重)</li><li>迭代输入数据集</li><li>通过神经网络处理输入</li><li>计算loss (与正确的输入有多远)</li><li>将梯度传播到神经网络的参数</li><li>更新神经网络，通常用很简单的更新规则：<code>weight = weight - learning_rate * graient</code></li></ul><h2 id="训练一个分类器"><a href="#训练一个分类器" class="headerlink" title="训练一个分类器"></a>训练一个分类器</h2><h2 id="数据并行化"><a href="#数据并行化" class="headerlink" title="数据并行化"></a>数据并行化</h2>]]></content>
      
      
    </entry>
    
    <entry>
      <title>无root安装UCSC genome browser</title>
      <link href="/2018/12/09/%E6%97%A0root%E5%AE%89%E8%A3%85UCSC-genome-browser/"/>
      <url>/2018/12/09/%E6%97%A0root%E5%AE%89%E8%A3%85UCSC-genome-browser/</url>
      <content type="html"><![CDATA[<p>如何在本地实现一个定制化的UCSC genome browser?</p><a id="more"></a><h2 id="1-安装必要的软件"><a href="#1-安装必要的软件" class="headerlink" title="1. 安装必要的软件"></a>1. 安装必要的软件</h2><p>需要安装Apache 及 MySQL (版本5.x)， 其中Apache可以更换成Nginx，MySQL后面直接同步UCSC的数据库到本地，因此不要更改。</p><p>MySQL有编译好的版本，Apache编译好的版本已经比较老了。两者的安装方法很简单，请看<strong>前面的文章</strong>。</p><p>另外，由于UCSC部分代码是C语言实现的，请<strong><em>确保你的glibc版本！！！</em></strong>至少大于等于<code></code>GLIBC_2.17<code>，你应该能通过下面的命令看到</code>GLIBC_2.17`：</p><h4 id="检查glibc版本"><a href="#检查glibc版本" class="headerlink" title="检查glibc版本"></a>检查glibc版本</h4><figure class="hljs highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-variable">$strings</span> <span class="hljs-regexp">/lib64/</span>libc.so.<span class="hljs-number">6</span> |grep GLIBC<br></code></pre></td></tr></table></figure><p>版本太低会报错：<code>/lib64/libc.so.6: version &#39;GLIBC_2.14&#39; not found</code> ,  <code>/lib64/libc.so.6: version &#39;GLIBC_2.17&#39; not found</code></p><h2 id="2-请确保一下事情已经做好："><a href="#2-请确保一下事情已经做好：" class="headerlink" title="2. 请确保一下事情已经做好："></a>2. 请确保一下事情已经做好：</h2><ul><li><code>glibc</code> 大于等于2.17</li><li><code>Apache</code> 已安装并正常运行</li><li><code>MySQL(v5.x)</code> 已安装并正常运行，再次强调版本是<code>5.x</code></li></ul><h2 id="3-几个目录的说明："><a href="#3-几个目录的说明：" class="headerlink" title="3. 几个目录的说明："></a>3. 几个目录的说明：</h2><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Apache 的安装目录</span><br>drwxr-xr-x.  2 dongkaige rnomics   39 Dec 11 10:10 logs<br>drwxr-xr-x.  9 dongkaige rnomics 4.0K Dec 10 20:43 htdocs<br>drwxr-xr-x.  4 dongkaige rnomics  145 Dec  8 20:31 conf<br>drwxr-xr-x.  2 dongkaige rnomics 4.0K Dec  8 02:28 modules<br>drwxr-xr-x.  2 dongkaige rnomics   74 Dec  7 16:50 cgi-bin<br>drwxr-xr-x.  2 dongkaige rnomics 4.0K Dec  2 23:02 bin<br>......<br></code></pre></td></tr></table></figure><ul><li>几个重要目录<ul><li><code>htdocs</code> 这个目录就是你网站的默认根目录。安装好Apache之后，访问的第一个网页就在这里放着！</li><li><code>conf</code> Apache的配置目录，前期要经常修改配置文件。</li><li><code>cgi-bin</code> 存放的是可执行程序，由网页调用。这是安装好Apache之后的默认可执行程序存放路径，我们后面会修改。比如你写了个<code>helloWorld.py</code> ，正确的配置将使它显示执行结果而不是在网页显示你的代码。</li><li><code>logs</code> 这个文件很有用！显示Apache执行日志以及错误日志；</li><li><code>bin</code> 存放Apache主程序，后面可能经常用到 <code>./apachectl restart</code></li><li><code>modules</code>:存放MySQL默认编译好的模块，后面我们自己编译的模块也需要放到这里面。</li></ul></li></ul><figure class="hljs highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># MySQL 的安装目录</span><br>-rw-r-----. <span class="hljs-number"> 1 </span>dongkaige rnomics 145K Dec<span class="hljs-number"> 11 </span>12:13 error.log<br>drwxr-x---.<span class="hljs-number"> 11 </span>dongkaige rnomics 4.0K Dec<span class="hljs-number"> 10 </span>14:45 data<br>-rw-r--r--. <span class="hljs-number"> 1 </span>dongkaige rnomics <span class="hljs-number"> 552 </span>Dec <span class="hljs-number"> 9 </span>14:19 my.cnf<br>drwxr-xr-x. <span class="hljs-number"> 2 </span>dongkaige rnomics 4.0K Dec <span class="hljs-number"> 7 </span>16:02 bin<br>...<br></code></pre></td></tr></table></figure><ul><li>几个重要目录<ul><li><code>my.cnf</code> MySQL配置文件，一般配置好了就不再修改了。</li><li><code>data</code> MySQL 数据库文件，里面一个文件夹就是一个数据库！</li><li><code>bin</code> MySQL 主程序，常用语法就那么几个，看前面博客。</li></ul></li></ul><h2 id="4-下载静态文件，让UCSC主页显示出来"><a href="#4-下载静态文件，让UCSC主页显示出来" class="headerlink" title="4. 下载静态文件，让UCSC主页显示出来!"></a>4. 下载静态文件，让UCSC主页显示出来!</h2><p>前面说过，Apache下的<code>htdocs</code> 目录存放的是网页信息，我们在其中下载静态网页：</p><figure class="hljs highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">cd htdocs &amp;&amp; mkdir genomebrowser<br>rsync -avzP rsync:<span class="hljs-comment">//hgdownload.cse.ucsc.edu/htdocs/ genomebrowser/</span><br><br><span class="hljs-meta"># 然后，在htdocs目录下(一些网页引用资源的相对位置在其本身的上层目录)：</span><br><span class="hljs-built_in">ln</span> -s genomebrowser/js<br><span class="hljs-built_in">ln</span> -s genomebrowser/style<br><span class="hljs-built_in">ln</span> -s genomebrowser/images<br><br><span class="hljs-meta"># 下载完之后，浏览器打开http:<span class="hljs-comment">//your.url:port/genomebrowser 将能显示浏览器主页！</span></span><br><br><span class="hljs-meta"># 在genomebrowser文件夹 新建一个cgi-bin，并下载网页后台调用的程序：</span><br>mkdir genomebrowser/cgi-bin<br>rsync -avzP rsync:<span class="hljs-comment">//hgdownload.cse.ucsc.edu/cgi-bin/ genomebrowser/cgi-bin/</span><br></code></pre></td></tr></table></figure><p>参考这个图，理解下面的内容：<img src="/pic/2018-12/genome_browser_1.png" alt="genomebrowser 1"></p><h4 id="让Apache找到可执行程序"><a href="#让Apache找到可执行程序" class="headerlink" title="让Apache找到可执行程序"></a>让Apache找到可执行程序</h4><p>现在静态文件已经能显示出来了，但导航栏是用<code>cgi-bin</code>程序实现的，现在并不能看到。我们需要配置Apache，让它知道到<strong>如何找到</strong>这些可执行程序，这里需要配置<code>httpd.conf</code> (Apache 的配置文件)，添加下面内容：</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ScriptAlias /genomebrowser/cgi-bin /your/path/to/apache_2.<span class="hljs-number">4.37</span>/htdocs/genomebrowser/cgi-bin<br>&lt;Directory <span class="hljs-string">"/your/path/to/apache_2.4.37/htdocs/genomebrowser/cgi-bin"</span>&gt;<br>AllowOverride None<br><span class="hljs-selector-id">#Options</span> +ExecCGI -MultiViews +SymLinksIfOwnerMatch<br>Options +ExecCGI<br>Order allow,deny<br>Allow from all<br>AddHandler cgi-script <span class="hljs-selector-class">.cgi</span> <span class="hljs-selector-class">.pl</span> <span class="hljs-selector-class">.py</span><br>Require all granted<br>&lt;/Directory&gt;<br></code></pre></td></tr></table></figure><blockquote><p>大意就是添加一个可执行程序的位置，并将几种后缀认为是可执行程序(<code>.cgi</code>, <code>.pi</code>, <code>.py</code> 没必要添加<code>.py</code>，我是为了测试用)，并允许这个文件夹下内容访问远程资源。</p></blockquote><p>另外在<code>httpd.conf</code>中添加下面内容使得网页正确显示：<br><figure class="hljs highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">XBitHack</span> <span class="hljs-literal">on</span><br><span class="hljs-section">&lt;Directory /your/pach/to/genomebrowser&gt;</span><br><span class="hljs-attribute">AllowOverride</span> AuthConfig<br><span class="hljs-attribute"><span class="hljs-nomarkup">Options</span></span> +Includes<br><span class="hljs-section">&lt;/Directory&gt;</span><br></code></pre></td></tr></table></figure></p><p>现在，<code>Apache</code>已经知道如何找到UCSC的可执行程序了，还需要进一步配置，让可执行程序找到MySQL的数据：</p><h4 id="让可执行程序访问MySQL"><a href="#让可执行程序访问MySQL" class="headerlink" title="让可执行程序访问MySQL"></a>让可执行程序访问MySQL</h4><p><strong><em><code>hg.conf</code></em></strong> 这个文件至关重要，应用程序通过它访问MySQL。可以下载个样本：<code>http://genome-test.cse.ucsc.edu/~kent/src/unzipped/product/ex.hg.conf</code> 看看。</p><p>在配置<code>hg.conf</code>之前，先进行MySQL的配置(按前面博客)，然后建立三个用户，使之拥有不同权限：</p><ul><li><code>ucsc_read</code>: 只读权限的用户:</li><li><code>ucsc_readwrite</code>: 对一个数据库具有读写权限的用户，因为<code>cgi-bin</code>程序需要更新 <code>hgcentral</code> 来维护用户的cookie设置</li><li><code>ucsc_admin</code>: 一个MySQL用户，具有所有browser和genome数据库的权限:</li></ul><figure class="hljs highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"># 创建三个用户，并赋予不同权限<br>GRANT ALL PRIVILEGES <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">'ucsc_admin'</span>@<span class="hljs-string">'%'</span>;<br>GRANT <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">'ucsc_read'</span>@<span class="hljs-string">'%'</span>;<br>GRANT ALL PRIVILEGES <span class="hljs-keyword">ON</span> hgcentral <span class="hljs-keyword">TO</span> <span class="hljs-string">'ucsc_readwrite'</span>@<span class="hljs-string">'%'</span>;<br>flush PRIVILEGES;<br></code></pre></td></tr></table></figure><p><code>hg.conf</code>配置如下：</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs undefined">db.<span class="hljs-attribute">host</span>=10.10.123.123 # 填你自己的。这里写localhost似乎不行，因为这样写会导致port(端口) 的设置无效！<br>db.<span class="hljs-attribute">socket</span>=/picb/rnomics2/RBP_database/dbweb/Softwares/mysql_5/mysql.sock # MySQL运行时的sock文件！<br>db.<span class="hljs-attribute">port</span>=7090 # 访问MySQL的端口<br><br>db.<span class="hljs-attribute">user</span>=ucsc_read # 填你自己的MySQL用户名<br>db.<span class="hljs-attribute">password</span>=PASSWORD<br><br>db.<span class="hljs-attribute">trackDb</span>=trackDb # trackDb 是MySQL中 hgcentral 数据库的一个表，这个数据库后面再创建，这里主要是让UCSC能访问MySQL！<br>db.<span class="hljs-attribute">grp</span>=grp<br><span class="hljs-attribute">defaultGenome</span>=Human<br><br>central.<span class="hljs-attribute">host</span>=10.10.123.123<br>central.<span class="hljs-attribute">socket</span>=/picb/rnomics2/RBP_database/dbweb/Softwares/mysql_5/mysql.sock # MySQL运行时的sock文件！<br>central.<span class="hljs-attribute">port</span>=7090 # 访问MySQL的端口<br><br>central.<span class="hljs-attribute">user</span>=ucsc_readwrite<br>central.<span class="hljs-attribute">password</span>=PASSWORD<br>central.<span class="hljs-attribute">db</span>=hgcentral # 我们后面会创建这个数据库：hgcentral<br>central.domain=<br></code></pre></td></tr></table></figure><blockquote><p><strong><em>重要说明：</em></strong></p><p>因为我们本地非root安装了MySQL，运行MySQL的端口和<code>sock</code>文件是自己指定的，所以<code>hg.conf</code>一定要指定端口和<code>sock</code>文件才能正确连接！</p><p>及时查看Apache的log文件，查看MySQL的连接状态。<code>central.socket</code> 与 <code>central.port</code> 虽然别的参考里都没有提，但是就是这里没有设置引起的错误困扰了我很久。参考<code>db.socket</code>与<code>db.port</code>于是新增了<code>central</code>的两个设置。</p></blockquote><p>然后重启Apache，试试看能否显示<code>导航栏</code>！要是不能，需要检查前面的步骤，进行排错。(因为导航栏是由可执行程序进行显示的，如果上面没设置好，是看不到导航栏的。)</p><h4 id="hg-conf文件"><a href="#hg-conf文件" class="headerlink" title="~/.hg.conf文件"></a><code>~/.hg.conf</code>文件</h4><p>UCSC 提供了一些程序来方便的管理MySQL数据库，这些程序通过访问<code>~/.hg.conf</code>来连接MySQL。这些程序可由源代码编译，或直接从<code>linux.x86_64</code>下载得到。位于<code>cgi-bin</code>不使用该配置文件。</p><p><code>.hg.conf</code>配置如下：</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">db.<span class="hljs-attribute">host</span>=10.10.123.123<br>db.<span class="hljs-attribute">socket</span>=/path/to/your/mysql.sock<br>db.<span class="hljs-attribute">port</span>=your_mysql_port<br><br>db.<span class="hljs-attribute">user</span>=ucsc_admin<br>db.<span class="hljs-attribute">password</span>=ucsc_admin_passwd<br></code></pre></td></tr></table></figure><p><code>.hg.conf</code>的权限应该是<code>-rw———</code>，否则报错。</p><p>现在服务器应该已经能访问MySQL了，但是MySQL里还没有任何数据，我们下载一些进行测试：</p><h2 id="5-配置MySQL服务器"><a href="#5-配置MySQL服务器" class="headerlink" title="5. 配置MySQL服务器"></a>5. 配置MySQL服务器</h2><h4 id="UCSC需要的数据在两个位置进行存储"><a href="#UCSC需要的数据在两个位置进行存储" class="headerlink" title="UCSC需要的数据在两个位置进行存储"></a>UCSC需要的数据在两个位置进行存储</h4><ul><li>大部分数据，如<code>注释</code> 存储在<strong>MySQL</strong>数据库中；</li><li>有些数据，例如<code>参考基因组</code>是2bit 格式，直接存放在硬盘里，这个位置被编码进MySQL表，默认为<code>/gbdb</code>，且没有直接配置它位置的选项。后面我们可以通过更新MySQL表来修改，大部分是在<code>hgcentral.dbDB</code>中。</li></ul><p>MySQL数据库中的<code>hgcentral</code>: 用来存储其他数据库的信息。请参考这个图理解<code>hgcentral</code>: <img src="/pic/2018-12/genome_browser_2.png" alt=""></p><figure class="hljs highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># 建立关键数据库 hgcentral</span><br>wget http:<span class="hljs-string">//hgdownload.cse.ucsc.edu/admin/hgcentral.sql</span><br><span class="hljs-comment"># 自己修改hgcentral.sql 将 /gbdb/ 替换成你自己的 /your/path/to/gbdb/ 路径</span><br>sed 's/\<span class="hljs-string">/gbdb</span>\<span class="hljs-string">//</span>\<span class="hljs-string">/your</span>\<span class="hljs-string">/path</span>\<span class="hljs-string">/to</span>\<span class="hljs-string">/gbdb</span>\<span class="hljs-string">//g</span>' hgcentral.sql &gt; hgcentral_new.sql<br>mysql  –u用户名 –p密码 -e <span class="hljs-string">"create database hgcentral"</span><br>mysql  –u用户名 –p密码 hgcentral &lt; hgcentral_new.sql<br><span class="hljs-comment"># 给你自己的MySQL用户操作这个数据库的权限</span><br></code></pre></td></tr></table></figure><blockquote><p>这里通过修改<code>hgcentral.sql</code>，来解决它的<code>gbdb</code>设置都是在根目录的问题。</p></blockquote><h4 id="MySQL数据库的作用"><a href="#MySQL数据库的作用" class="headerlink" title="MySQL数据库的作用"></a>MySQL数据库的作用</h4><ul><li>hgcentral</li><li>hg19</li></ul><p>数据库<code>hgcentral</code>包含其他数据库的信息，<code>hgcentral.dbDb.nibPath</code> (hgcentral的dbDb表的nibPath字段)，它相当于网关火地址簿；另一个表<code>hgcentral.genomeClade</code>控制基因组浏览器上一些信息。</p><p><code>hgcentral</code>看起来像是这样：</p><figure class="hljs highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs undefined">+---------------------+<br>|<span class="hljs-string"> Tables_in_hgcentral </span>|<br>+---------------------+<br>|<span class="hljs-string"> blatServers         </span>|<br>|<span class="hljs-string"> clade               </span>|<br>|<span class="hljs-string"> dbDb                </span>|<br>|<span class="hljs-string"> dbDbArch            </span>|<br>|<span class="hljs-string"> defaultDb           </span>|<br>|<span class="hljs-string"> gbMembers           </span>|<br>|<span class="hljs-string"> genomeClade         </span>|<br>|<span class="hljs-string"> hubPublic           </span>|<br>|<span class="hljs-string"> hubStatus           </span>|<br>|<span class="hljs-string"> liftOverChain       </span>|<br>|<span class="hljs-string"> namedSessionDb      </span>|<br>|<span class="hljs-string"> sessionDb           </span>|<br>|<span class="hljs-string"> targetDb            </span>|<br>|<span class="hljs-string"> userDb              </span>|<br>+---------------------+<br>14 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><p>MySQL 中每个参考基因组都有自己的数据库，在每个基因组数据库中，都有一些必要的特定名称的表格。<code>annotation</code>表是上传track创建的，后面讨论。对于你的基因组，数据库看起来应该像这样：</p><figure class="hljs highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined">+------------------------+<br>|<span class="hljs-string"> Tables_in_abcDef1      </span>|<br>+------------------------+<br>|<span class="hljs-string"> Custom_Annotation_1    </span>|<br>|<span class="hljs-string"> Custom_Annotation_2    </span>|<br>|<span class="hljs-string"> chromInfo              </span>|<br>|<span class="hljs-string"> gap                    </span>|<br>|<span class="hljs-string"> gc5Base                </span>|<br>|<span class="hljs-string"> gold                   </span>|<br>|<span class="hljs-string"> grp                    </span>|<br>|<span class="hljs-string"> hgFindSpec             </span>|<br>|<span class="hljs-string"> history                </span>|<br>|<span class="hljs-string"> trackDb                </span>|<br>+------------------------+<br></code></pre></td></tr></table></figure><p><code>trackDb</code>包含<code>Custom_Annotation_1</code>, <code>Custom_Annotation_2</code>和其他你自己制作的track的信息。</p><p>上面简要说明了MySQL中的数据库，下面还需要<code>/gbdb/</code>后面再说。</p><h4 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h4><p>为了节省时间出来进行排错，这里选取一个小数据集(dm3)，首先下载一些MySQL数据表：</p><figure class="hljs highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs undefined">cd <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/mysql/</span>data<br>mkdir dm3<br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/chromInfo.MYD /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/chromInfo.MYI /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/chromInfo.frm /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br><br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/cytoBandIdeo.MYD /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/cytoBandIdeo.MYI /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/cytoBandIdeo.frm /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br><br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/grp.MYD /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/grp.MYI /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/grp.frm /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br><br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/hgFindSpec.MYD /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/hgFindSpec.MYI /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/hgFindSpec.frm /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br><br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/trackDb.MYD /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/trackDb.MYI /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br>rsync -avzP  rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/mysql/</span>dm3<span class="hljs-regexp">/trackDb.frm /</span>home<span class="hljs-regexp">/mysql/</span>dm3<br><br><span class="hljs-comment"># dm3文件夹是个数据库，每三个文件是一个表，具体后缀的含义，自己查。</span><br></code></pre></td></tr></table></figure><p>重启MySQL，你将能看到<code>dm3</code> 这个<strong>数据库</strong>已经存在在MySQL里了(我用Navicat软件可视化操作的)。</p><p>本来按照教程，我们应该准备<code>gbdb</code>文件了(是不能或者不适合保存在MySQL数据库的文件，如二进制的基因组、bigwig文件等。)：</p><figure class="hljs highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># 下载gbdb数据: (大概6 G) 在这个位置创建的 /gbdb 无法直接在浏览器里显示，需要修改MySQL里的hgcentral数据库的相关表，其中存储的有比如基因组位置;默认是/gbdb/dm3/??.2bit 这样的格式，是在根目录的。因为是非Root，所以还是老实修改表吧。我上面创建 hgcentral 数据库时已经修改了表。</span><br>mkdir -p genomebrowser<span class="hljs-regexp">/gbdb/</span>dm3<br>rsync -avzP --<span class="hljs-keyword">delete</span> --max-<span class="hljs-keyword">delete</span>=<span class="hljs-number">20</span> rsync:<span class="hljs-regexp">//</span>hgdownload.cse.ucsc.edu<span class="hljs-regexp">/gbdb/</span>dm3<span class="hljs-regexp">/ /</span>home<span class="hljs-regexp">/genomebrowser/g</span>bdb<span class="hljs-regexp">/dm3/</span><br></code></pre></td></tr></table></figure><blockquote><p>建议下载之前看看有多大，命令在后面。</p></blockquote><p>但是因为网速问题，这就不下了。但为了看看前面做的怎么样，还是看下效果：在你的浏览器里打开 <a href="http://your/url:port/genomebrows/cgi-bin/hgGateway?db=dm3" target="_blank" rel="noopener">http://your/url:port/genomebrows/cgi-bin/hgGateway?db=dm3</a></p><p>和 <a href="http://your/url:port/genomebrows/cgi-bin/hgTracks?db=dm3" target="_blank" rel="noopener">http://your/url:port/genomebrows/cgi-bin/hgTracks?db=dm3</a></p><blockquote><p>这个URL 透漏了很多信息：就是执行cgi-bin下的hgGateway 文件，进行查询，看数据库里有没有dm3这个东西！</p></blockquote><p>最后开始添加<code>Custom Track</code> !这个步骤，对于理解整个流程至关重要，如果前面一头雾水，这里要实际操作一下！</p><blockquote><p><code>gbdb</code>文件夹 这个文件夹我花了很长时间才搞懂(主要是前面各种错误用了了很多时间)。这个文件夹是为了存储一些二进制文件，不方便存储在MySQL的文件。应用程序如何找到这些二进制文件呢？其实，这些文件的位置是作为数据存放在<code>hgcentral</code>数据库的表里的。对于默认的基因组，比如hg19，它们的位置(也就是MySQL表里存放的hg19基因组的位置)是<code>/gbdb/hg19/hg19.2bit</code>，是从根目录开始的，对于你自己的<code>custom track</code>来说，因为上传track时需要指定路径，则不需要修改MySQL表格，就能正确显示。</p><p>这个直接把数据位置写进到MySQL的做法，被下面一个引用称为猴子才会做的事情。这篇文章还被UCSC官方推荐为参考之一。。</p></blockquote><h2 id="6-trash-文件夹"><a href="#6-trash-文件夹" class="headerlink" title="6. trash 文件夹"></a>6. trash 文件夹</h2><p>这里主要用来存放临时数据、临时track的，对我来说没什么用，就没配置。同样需要在<code>hg.conf</code>中配置其位置。详细看后面的参考链接。</p><h2 id="7-MySQL的SSL配置"><a href="#7-MySQL的SSL配置" class="headerlink" title="7. MySQL的SSL配置"></a>7. MySQL的SSL配置</h2><p>UCSC教程里有，我没有做</p><h2 id="8-添加Custom-Track"><a href="#8-添加Custom-Track" class="headerlink" title="8. 添加Custom Track"></a>8. 添加Custom Track</h2><p>其实非常简单:最简单只需要三步，但前面还是要做很多事情：</p><p>首先下载一些程序：这些程序能读取<code>~/.hg.conf</code> 来访问我们的MySQL数据库，从而方便将track数据写到MySQL表中。其中大部分程序用不上，但是还是都下了吧：</p><figure class="hljs highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git clone <span class="hljs-symbol">git:</span>/<span class="hljs-regexp">/genome-source.cse.ucsc.edu/kent</span>.git <span class="hljs-comment"># 这个其实是cgi-bin的源代码，一会会用到里面的sql语句</span><br>rsync -azvP <span class="hljs-symbol">rsync:</span>/<span class="hljs-regexp">/hgdownload.soe.ucsc.edu/genome</span><span class="hljs-regexp">/admin/exe</span><span class="hljs-regexp">/linux.x86_64/</span> ./<br></code></pre></td></tr></table></figure><p>修改了配置文件，才能正确访问MySQL：(这个配置文件一定要在<code>~/</code>也就是主目录下，没找到如何自定义它的位置的参数。)</p><p><code>~/.hg.conf</code> 如下配置：</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">db.<span class="hljs-attribute">host</span>=10.10.123.123<br>db.<span class="hljs-attribute">socket</span>=/mysqlPath/mysql_5/mysql.sock<br>db.<span class="hljs-attribute">port</span>=yourPort<br><br>db.<span class="hljs-attribute">user</span>=your_mysql_user<br>db.<span class="hljs-attribute">password</span>=your_mysql_password<br><br>central.<span class="hljs-attribute">host</span>=10.10.123.123<br>central.<span class="hljs-attribute">socket</span>=/mysqlPath/mysql_5/mysql.sock<br>central.<span class="hljs-attribute">port</span>=your_port<br><br>central.<span class="hljs-attribute">user</span>=your_mysql_user<br>central.<span class="hljs-attribute">password</span>=your_mysql_password<br><br>central.<span class="hljs-attribute">db</span>=hgcentral<br></code></pre></td></tr></table></figure><p>这样，UCSC提前写好的程序就能通过<code>~/.hg.conf</code> 访问我们的数据库了。</p><blockquote><p>本来按照教程，<code>linux.x86_64</code> 里有个<code>hgsql</code>，能让我们<code>hgsql -e &quot;show databases;&quot; mysql</code> 这样优雅的，不用输密码的访问MySQL数据的，但是我的有问题，只好把教程里的类似步骤都换成MySQL语法，手动去做了。</p></blockquote><p>然后，比如有个bigwig文件，放在<code>gbd/hg38/bw/a.bw</code>这里，我们想把它上传上去，需要修改<code>/gbdb/hg38</code>下的<code>track.ra</code>文件，</p><p><code>track.ra</code></p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">track bw2<br>shortLabel bw2_short<br>longLabel bw2_long<br>visibility dense<span class="hljs-built_in"><br>group </span>map<br>autoScale on<br>priority 20<br>color 62, 62, 62<span class="hljs-built_in"><br>type </span>bigwig<br></code></pre></td></tr></table></figure><figure class="hljs highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">linux.x86_64/hgTrackDb . hg38 trackDb kent/src/hg/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">trackDb</span>.<span class="hljs-title">sql</span> /<span class="hljs-title">picb</span>/<span class="hljs-title">rnomics2</span>/<span class="hljs-title">RBP_database</span>/<span class="hljs-title">dbweb</span>/<span class="hljs-title">Softwares</span>/<span class="hljs-title">apache_2</span>.4.37/<span class="hljs-title">htdocs</span>/<span class="hljs-title">genomebrowser</span>/<span class="hljs-title">gbdb</span>/<span class="hljs-title">hg38</span></span><br>linux.x86_64/hgBbiDbLink hg38 bw1 /picb/rnomics2/RBP_database/dbweb/Softwares/apache_2.<span class="hljs-number">4.37</span>/htdocs/genomebrowser/gbdb/hg38/bw/test/ENCFF100HQU.bw<br>linux.x86_64/hgFindSpec . hg38 hgFindSpec kent/src/hg/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">hgFindSpec</span>.<span class="hljs-title">sql</span> /<span class="hljs-title">picb</span>/<span class="hljs-title">rnomics2</span>/<span class="hljs-title">RBP_database</span>/<span class="hljs-title">dbweb</span>/<span class="hljs-title">Softwares</span>/<span class="hljs-title">apache_2</span>.4.37/<span class="hljs-title">htdocs</span>/<span class="hljs-title">genomebrowser</span>/<span class="hljs-title">gbdb</span>/<span class="hljs-title">hg38</span></span><br></code></pre></td></tr></table></figure><p>第一行意思是，从<code>gbdb/hg38</code>文件的<code>track.ra</code>读取track信息，并插入到hg38数据库的trackDB表格里。第二行是把<code>track.ra</code> 里的<code>bw2</code>这个track的实际路径添加进表格，第三行大概是刷新一下。</p><p>其他类型的数据上传，如bed，如2bit，以后再写。</p><ul><li><p><code>rsync</code>查看大小</p><figure class="hljs highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">rsync -hna --stats rsync:<span class="hljs-regexp">//</span>hgdownload.soe.ucsc.edu<span class="hljs-regexp">/gbdb/</span> | egrep <span class="hljs-string">"Number of files:|total size is"</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>MySQL配置过程中，可能要加载很多的模块，后面补充。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://genome.ucsc.edu/goldenpath/help/mirrorManual.html" target="_blank" rel="noopener">https://genome.ucsc.edu/goldenpath/help/mirrorManual.html</a></li><li><a href="http://oliverelliott.org/article/bioinformatics/tut_genomebrowser/" target="_blank" rel="noopener">http://oliverelliott.org/article/bioinformatics/tut_genomebrowser/</a></li><li><a href="http://blog.sciencenet.cn/blog-723745-569746.html" target="_blank" rel="noopener">http://blog.sciencenet.cn/blog-723745-569746.html</a></li><li><a href="http://emb-bioinfo.fsaa.ulaval.ca/bioinfo/html/admin/mirror.html" target="_blank" rel="noopener">http://emb-bioinfo.fsaa.ulaval.ca/bioinfo/html/admin/mirror.html</a></li><li>file:///Users/kaigedong/Desktop/UCSC%20Genome%20Browser%E5%AE%89%E8%A3%85.pdf</li><li><a href="http://genome.ucsc.edu/goldenPath/help/mirror.html#manual-installation-instructions" target="_blank" rel="noopener">Installation of a UCSC Genome Browser on a local machine (“mirror”)</a></li><li><a href="https://genome-store.ucsc.edu/" target="_blank" rel="noopener">Genome Browser source code</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>无root安装Apache</title>
      <link href="/2018/12/09/%E6%97%A0root%E5%AE%89%E8%A3%85Apache/"/>
      <url>/2018/12/09/%E6%97%A0root%E5%AE%89%E8%A3%85Apache/</url>
      <content type="html"><![CDATA[<p>简单的操作</p><a id="more"></a><h1 id="无root安装Apache"><a href="#无root安装Apache" class="headerlink" title="无root安装Apache"></a>无root安装Apache</h1><p>无root安装Apache非常简单</p><ol><li><p>下载(看参考)</p></li><li><p>根据官网说明安装(参考)</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 需要下载APR 和 APR-Util,并放入特定位置，并需要安装pcre</span><br>wget -c https://www-eu.apache.org/dist//httpd/httpd-2.4.37.tar.bz2<br>wget https://www-us.apache.org/dist//apr/apr-1.6.5.tar.gz<br>wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.42.zip # 注意！不是pcre2!<br>wget https://www-us.apache.org/dist//apr/apr-util-1.6.1.tar.gz<br><span class="hljs-meta"><br>#</span><span class="bash"> 将 apr, apr-util 解压去掉版本号，移动到 apache的 srclib 下</span><br><br>./configure --prefix=/picb/rnomics2/RBP_database/dbweb/Softwares/httpd_2.4.37 --with-included-apr --with-pcre=/home/dongkaige/rnomics2/RBP_database/dbweb/Softwares/pcre_8.42<br>make<br>make install<br></code></pre></td></tr></table></figure></li><li><p>启动、关闭与重启</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">./apachectl start<br>./apachectl stop<br>./apachectl restart<br></code></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://httpd.apache.org/download.cgi#apache24" target="_blank" rel="noopener">Apache24下载位置</a></li><li><a href="http://httpd.apache.org/docs/current/" target="_blank" rel="noopener">http://httpd.apache.org/docs/current/</a></li><li>Apache <a href="https://www.jianshu.com/p/c36dd3946e74" target="_blank" rel="noopener">配置与优化–之乎专栏</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>服务器无root安装MySQL</title>
      <link href="/2018/12/09/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0root%E5%AE%89%E8%A3%85MySQL/"/>
      <url>/2018/12/09/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0root%E5%AE%89%E8%A3%85MySQL/</url>
      <content type="html"><![CDATA[<ul><li>无root安装MySQL</li></ul><a id="more"></a><h1 id="MySQL-安装"><a href="#MySQL-安装" class="headerlink" title="MySQL 安装"></a>MySQL 安装</h1><blockquote><p>5.7版本和8.0版本都可以通过这个方法</p></blockquote><ol><li><p>下载并解压MySQL 5.7</p></li><li><p>MySQL解压后，进入文件夹并新建配置文件<code>my.cnf</code>。<code>my.cnf</code>的内容：</p><figure class="hljs highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-section">[client]</span><br><span class="hljs-attr">local-infile</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3336</span><br><span class="hljs-attr">socket</span>=/path/to/your/mysql.sock<br><span class="hljs-section"><br>[mysqld]</span><br><span class="hljs-attr">local-infile</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">default-storage-engine</span>=MYISAM<br><span class="hljs-attr">bind-address</span> = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3336</span><br><span class="hljs-attr">basedir</span>=/path/to/your/mysql<br><span class="hljs-attr">datadir</span>=/path/to/your/mysql/data<br><span class="hljs-attr">pid-file</span>=/path/to/your/mysql/mysql.pid<br><span class="hljs-attr">socket</span>=/path/to/your/mysql/mysql.sock<br><span class="hljs-attr">log_error</span>=/path/to/your/mysql/error.log<br><span class="hljs-attr">server-id</span>=<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><blockquote><p><code>mysql.sock</code> 位置很重要</p><p><code>bind-address</code>不设置，或者设置成<code>0.0.0.0</code>表示任意IP都可以连接到MySQL</p><p>需要设置自动加载本地数据库的参数(<strong>MySQL 8不能这么做，不确定如何做</strong>)：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> [mysqld]</span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-built_in">local</span>-infile=1</span><br><span class="hljs-meta">&gt;</span><span class="bash"> </span><br><span class="hljs-meta">&gt;</span><span class="bash"> [client]</span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-built_in">local</span>-infile=1</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p>需要设置UCSC支持的引擎：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> [mysqld]</span><br><span class="hljs-meta">&gt;</span><span class="bash"> default-storage-engine=MYISAM</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br></code></pre></td></tr></table></figure></blockquote></li><li><p>初始化</p><figure class="hljs highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">bin/mysqld --defaults-file=/path/of/my.cnf \<br>-<span class="ruby">-initialize \ <span class="hljs-comment"># 自动生成带随机密码的root用户,比如我的是root<span class="hljs-doctag">@localhost</span>: gc&amp;p6Rqh?w3t</span><br></span>-<span class="ruby">-user=dongkaige \<br></span>-<span class="ruby">-basedir=<span class="hljs-regexp">/path/to</span><span class="hljs-regexp">/your/mysql</span>_5 \<br></span>-<span class="ruby">-datadir=<span class="hljs-regexp">/path/to</span><span class="hljs-regexp">/your/mysql</span>_5/data</span><br></code></pre></td></tr></table></figure><blockquote><p>查看<code>error.log</code>，可以找到初始root密码</p></blockquote></li><li><p>更改密码及创建用户</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/mysql -u root -p -S /path/to/your/mysql/mysql.sock<br>Enter password: <br><span class="hljs-meta"><br>mysql&gt;</span><span class="bash"> ALTER USER <span class="hljs-string">'root'</span>@<span class="hljs-string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">'新密码'</span>;</span><br><span class="hljs-meta">#</span><span class="bash">修改密码 </span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> flush privileges;</span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> show databases;</span><br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>4 rows in set (0.00 sec)<br><span class="hljs-meta"><br>#</span><span class="bash"> 设置该数据库能够远程登录：</span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> use mysql;</span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> update user <span class="hljs-built_in">set</span> host=<span class="hljs-string">'%'</span> <span class="hljs-built_in">where</span> user=<span class="hljs-string">'root'</span>;</span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> select host, user from user;</span><br>+-----------+------------------+<br>| host      | user             |<br>+-----------+------------------+<br>| %         | root             |<br>| localhost | mysql.infoschema |<br>| localhost | mysql.session    |<br>| localhost | mysql.sys        |<br>+-----------+------------------+<br>4 rows in set (0.00 sec)<br><span class="hljs-meta"><br>mysql&gt;</span><span class="bash"> fulsh privileges;</span><br></code></pre></td></tr></table></figure></li><li><p>关闭及运行</p><ul><li><p>关闭：<code>ps aux | grep mysql</code>；然后根据pid，关掉： <code>kill pid</code></p></li><li><p>关闭方式2</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/mysqladmin shutdown -u root -p<br></code></pre></td></tr></table></figure></li><li><p>开启</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/mysqld_safe \<br>--defaults-file=/path/to/your/mysql/my.cnf \<br>--user=dongkaige &amp;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/tianpy5/article/details/79842888" target="_blank" rel="noopener">Linux普通用户安装mysql-5.7.21</a></li><li><a href="https://genome.ucsc.edu/goldenpath/help/mirrorManual.html" target="_blank" rel="noopener">Manual installation of the UCSC Genome Browser on a Unix server</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GIVE安装笔记</title>
      <link href="/2018/12/07/GIVE%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/12/07/GIVE%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<ul><li>革命尚未成功</li></ul><a id="more"></a><h2 id="Github-地址"><a href="#Github-地址" class="headerlink" title="Github 地址"></a>Github 地址</h2><p><a href="https://github.com/Zhong-Lab-UCSD/Genomic-Interactive-Visualization-Engine" target="_blank" rel="noopener">https://github.com/Zhong-Lab-UCSD/Genomic-Interactive-Visualization-Engine</a></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li>包含两个主要部分：<ul><li><strong>GIVE Web Components</strong>： 也就是网页部分</li><li><strong>GIVE server</strong>： 服务器部分，包括<strong>GIVE server-side</strong>（主要由PHP实现） 和 <strong>GIVE data source</strong></li></ul></li></ul><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ol><li><p>克隆源代码</p><figure class="hljs highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/Zhong-Lab-UCSD/Genomic-Interactive-Visualization-Engine.git<br></code></pre></td></tr></table></figure></li><li><p>安装Web Server</p><ol><li><p>安装MySQL</p></li><li><p>Apache </p></li><li><p>PHP + cURL</p><figure class="hljs highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-symbol">https:</span><span class="hljs-comment">//curl.haxx.se/download.html 获取最新curl,并安装。</span><br><span class="hljs-meta"># 编译PHP：</span><br>./configure --prefix=<span class="hljs-meta-keyword">/picb/</span>rnomics2/RBP_database<span class="hljs-meta-keyword">/dbweb/</span>Softwares/php_7<span class="hljs-number">.2</span><span class="hljs-number">.12</span> --with-apxs2=<span class="hljs-meta-keyword">/picb/</span>rnomics2/RBP_database<span class="hljs-meta-keyword">/dbweb/</span>Softwares/apache_2<span class="hljs-number">.4</span><span class="hljs-number">.37</span><span class="hljs-meta-keyword">/bin/</span>apxs --with-mysqli --with-curl=<span class="hljs-meta-keyword">/home/</span>dongkaige<span class="hljs-meta-keyword">/rnomics2/</span>RBP_database<span class="hljs-meta-keyword">/dbweb/</span>Softwares/curl_7<span class="hljs-number">.62</span> --with-config-file-path=<span class="hljs-meta-keyword">/picb/</span>rnomics2/RBP_database<span class="hljs-meta-keyword">/dbweb/</span>Softwares/php_7<span class="hljs-number">.2</span><span class="hljs-number">.12</span>/php.ini<br>/RBP_database<span class="hljs-meta-keyword">/dbweb/</span>Softwares/curl_7<span class="hljs-number">.62</span><br>make test<br>make -j <span class="hljs-number">40</span><br>make install<br><span class="hljs-meta"># 然后把编译文件夹里的 php.ini-development 复制成 php.ini 上面的-with-config-file-path 指定的原来是dir路径。</span><br>cp php.ini-development <span class="hljs-meta-keyword">/picb/</span>rnomics2/RBP_database<span class="hljs-meta-keyword">/dbweb/</span>Softwares/php_7<span class="hljs-number">.2</span><span class="hljs-number">.12</span><br><span class="hljs-meta"># 测试：</span><br>$ ./php -ini | grep Configuration<br>Configuration File (php.ini) Path =&gt; <span class="hljs-meta-keyword">/picb/</span>rnomics2/RBP_database<span class="hljs-meta-keyword">/dbweb/</span>Softwares/php_7<span class="hljs-number">.2</span><span class="hljs-number">.12</span>/php.ini<br>Loaded Configuration File =&gt; <span class="hljs-meta-keyword">/picb/</span>rnomics2/RBP_database<span class="hljs-meta-keyword">/dbweb/</span>Softwares/php_7<span class="hljs-number">.2</span><span class="hljs-number">.12</span>/php.ini/php.ini<br>Configuration<br><span class="hljs-meta"># 修改http.conf: 添加php.ini 位置</span><br></code></pre></td></tr></table></figure><p><img src="/pic/2018-12/20170419151014605.png" alt="修改配置：添加php.ini位置"></p></li></ol></li><li><p>安装GIVE Server</p></li></ol><ol start="4"><li><p>使用<code>GIVE-toolbox</code>管理数据track</p><blockquote><p>GIVE 支持<code>gene annotation</code>, <code>bed</code>, <code>bigWig</code>, <code>interaction</code> data track类型。</p><p><code>GIVE-toolbox</code>包含9个脚本，用来管理数据。</p></blockquote><ul><li><code>config_host.sh</code>: 对 GIVE service 进行设置</li><li><code>initial_ref.sh</code>: 初始化MySQL数据库结构并建立genome reference</li><li><code>add_track_geneAnnot.sh</code>: 从UCSC gene table 文件添加基因注释</li><li><code>add_trackGroup.sh</code>: 添加track组</li><li><code>add_track_bed.sh</code>: 添加bed注释</li><li><code>add_track_bigWig.sh</code>: 添加bigwig 注释</li><li><code>add_track_interaction.sh</code>: 添加interaction注释</li><li><code>list_tracks.sh</code>: 列出GIVE数据结构或特定的track组，或特定track的设置</li><li><code>remove_data.sh</code>: 删除一个track，或track group，或整个参考基因组</li></ul></li></ol><p>4.1 演示：</p><p>文档太差了。Docker版的都跑不起来。暂时放弃了。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>搬瓦工2: v2ray</title>
      <link href="/2018/12/06/%E6%90%AC%E7%93%A6%E5%B7%A5v2ray/"/>
      <url>/2018/12/06/%E6%90%AC%E7%93%A6%E5%B7%A5v2ray/</url>
      <content type="html"><![CDATA[<p>搬瓦工搭建v2ray 一键搭建wireguard (centos7)</p><a id="more"></a><ul><li><p>系统：centos7 64bit with bbs</p></li><li><p><a href="https://www.v2ray.com/chapter_00/install.html" target="_blank" rel="noopener">https://www.v2ray.com/chapter_00/install.html</a></p></li><li><p><a href="https://toutyrater.github.io/prep/install.html" target="_blank" rel="noopener">https://toutyrater.github.io/prep/install.html</a></p></li><li><p>安装日志</p>  <figure class="hljs highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta"># bash &lt;(curl -L -s https:<span class="hljs-comment">//install.direct/go.sh)</span></span><br><span class="hljs-meta">## 安装位置</span><br><span class="hljs-meta-keyword">/usr/</span>bin<span class="hljs-meta-keyword">/v2ray/</span>v2ray：V2Ray 程序；<br><span class="hljs-meta-keyword">/usr/</span>bin<span class="hljs-meta-keyword">/v2ray/</span>v2ctl：V2Ray 工具；<br><span class="hljs-meta-keyword">/etc/</span>v2ray/config.json：配置文件；<br><span class="hljs-meta-keyword">/usr/</span>bin<span class="hljs-meta-keyword">/v2ray/</span>geoip.dat：IP 数据文件<br><span class="hljs-meta-keyword">/usr/</span>bin<span class="hljs-meta-keyword">/v2ray/</span>geosite.dat：域名数据文件<br></code></pre></td></tr></table></figure></li></ul><h2 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h2><figure class="hljs highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">pip <span class="hljs-keyword">install</span> shadowsocks<br></code></pre></td></tr></table></figure><h2 id="wireguard"><a href="#wireguard" class="headerlink" title="wireguard"></a>wireguard</h2><ul><li><p><a href="https://zrstea.com/268/" target="_blank" rel="noopener">https://zrstea.com/268/</a></p></li><li><p><a href="https://www.wireguard.com/install/" target="_blank" rel="noopener">https://www.wireguard.com/install/</a></p></li><li><p><a href="https://centos.pkgs.org/7/epel-x86_64/dkms-2.6.1-1.el7.noarch.rpm.html" target="_blank" rel="noopener">https://centos.pkgs.org/7/epel-x86_64/dkms-2.6.1-1.el7.noarch.rpm.html</a></p></li><li><p><a href="https://support.azul.com/hc/en-us/articles/217293566-Using-DKMS-on-RHEL-CentOS-or-Oracle-Linux-to-build-ZST-for-other-kernel-versions" target="_blank" rel="noopener">https://support.azul.com/hc/en-us/articles/217293566-Using-DKMS-on-RHEL-CentOS-or-Oracle-Linux-to-build-ZST-for-other-kernel-versions</a></p></li><li><p><a href="https://www.covertness.me/2018/03/25/%E8%BD%BB%E6%9D%BE%E5%87%A0%E6%AD%A5%E6%90%AD%E5%BB%BA%20WireGuard%20%EF%BC%88%E5%BF%AB%E9%80%9F%E5%AE%89%E5%85%A8%E7%9A%84%E4%B8%8B%E4%B8%80%E4%BB%A3%20VPN%EF%BC%89/" target="_blank" rel="noopener">https://www.covertness.me/2018/03/25/%E8%BD%BB%E6%9D%BE%E5%87%A0%E6%AD%A5%E6%90%AD%E5%BB%BA%20WireGuard%20%EF%BC%88%E5%BF%AB%E9%80%9F%E5%AE%89%E5%85%A8%E7%9A%84%E4%B8%8B%E4%B8%80%E4%BB%A3%20VPN%EF%BC%89/</a></p><figure class="hljs highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined"># 安装过程：<br>wget https://dl.fedoraproject.org/pub/epel/<span class="hljs-number">7</span>/x86_64/Packages/e/epel-<span class="hljs-keyword">release</span>-<span class="hljs-number">7</span>-<span class="hljs-number">11</span>.noarch.rpm<br>rpm -Uvh epel-<span class="hljs-keyword">release</span>-<span class="hljs-number">7</span>-<span class="hljs-number">11</span>.noarch.rpm<br>yum clean <span class="hljs-keyword">all</span><br>yum makecache<br>yum-config-manager <span class="hljs-comment">--disable epel</span><br>yum <span class="hljs-comment">--enablerepo=epel install dkms</span><br>yum install wireguard-dkms wireguard-tools<br></code></pre></td></tr></table></figure></li></ul><p>推荐 wireguard 一键安装脚本（centos7）：<a href="https://github.com/atrandys/wireguard" target="_blank" rel="noopener">https://github.com/atrandys/wireguard</a></p>]]></content>
      
      
        <tags>
            
            <tag> 搬瓦工 </tag>
            
            <tag> v2ray </tag>
            
            <tag> shadowsocks </tag>
            
            <tag> wireguard </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python的decode/encode 与 r/b/u</title>
      <link href="/2018/08/17/python%E7%9A%84decode-encode-%E4%B8%8E-r-b-u/"/>
      <url>/2018/08/17/python%E7%9A%84decode-encode-%E4%B8%8E-r-b-u/</url>
      <content type="html"><![CDATA[<p>python中的decode/encode 与 r/b/u</p><a id="more"></a><h2 id="1-decode-与-encode"><a href="#1-decode-与-encode" class="headerlink" title="1.decode 与 encode"></a>1.<code>decode</code> 与 <code>encode</code></h2><blockquote><p>字符串在Python内部是<code>unicode</code>编码，在做编码转换时，通常要以unicode作为中间编码；即先将其它编码的字符串解码(decode)成unicode，然后再编码<code>encode</code>成另一种编码。</p><p><strong>在计算机内存中，统一使用<code>Unicode</code>编码，当需要保存到硬盘或者需要传输的时候，就转换为<code>utf-8</code>编码。</strong></p></blockquote><p><code>decode</code>：将其他编码的字符串<strong>转成<code>unicode</code></strong>编码，如<code>str1.decode(&#39;gb2312&#39;)</code>; 表示将<code>gb2312</code>编码的字符串<code>str1</code>转换成<code>unicode</code>编码；</p><p><code>encode</code>：将<strong><code>unicode</code></strong>编码转换成其他编码的字符串，如<code>str2.encode(&#39;gb2312&#39;)</code>; 表示将<code>unicode</code>编码的字符串转成<code>gb2312</code>编码。</p><p><code>sys.getdefaultencoding()</code>：查看系统默认编码</p><p><code>ord()</code>获取字符的整数表示</p><p><code>chr()</code>把编码转换成对应的字符</p><h2 id="2-u-r-b"><a href="#2-u-r-b" class="headerlink" title="2.u/r/b"></a>2.<code>u</code>/<code>r</code>/<code>b</code></h2><h2 id="3-utf-8-与-unicode"><a href="#3-utf-8-与-unicode" class="headerlink" title="3.utf-8 与 unicode"></a>3.<code>utf-8</code> 与 <code>unicode</code></h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000" target="_blank" rel="noopener">字符编码</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>golang笔记</title>
      <link href="/2018/08/17/golang%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/08/17/golang%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>记录一些Golang</p><a id="more"></a><p>##初识</p><blockquote><p>编辑器</p></blockquote><p>推荐<a href="https://github.com/visualfc/liteide/releases/tag/x34.1" target="_blank" rel="noopener">liteide</a></p><blockquote><p>统一代码风格：</p></blockquote><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash">gofmt -w program.go <span class="hljs-comment"># 格式化该源文件的代码并覆盖源文件</span></span><br><span class="hljs-meta">$</span><span class="bash">gofmt map1 <span class="hljs-comment"># 格式化并重写map1文件夹下所有的go源文件</span></span><br></code></pre></td></tr></table></figure><blockquote><p>生成代码文档</p></blockquote><p>go doc 工具会从 Go 程序和包文件中提取顶级声明的首行注释以及每个对象的相关注释，并生成相关文档。</p><blockquote><p>GO自带的其他工具</p></blockquote><p><code>go install</code>: 安装GO包的工具；<code>go fix</code>：将GO代码从旧的发行版迁移到新的发行版; <code>go test</code>是轻量级的单元测试框架。</p><h2 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h2><p>工具<code>cgo</code>退工了对FFI(外部函数接口)的支持，能够使用Go代码安全的调用C语言库。</p><p>如要在Go中使用cgo，需在单独一行使用<code>import &quot;C&quot;</code> ，一般还要<code>import &quot;unsafe&quot;</code>. 然后可以在<code>import &quot;C&quot;</code>之前使用注释(单行或多行注释均可)的形式导入C语言库(甚至是有效的C语言代码)，它们之间没有空行。</p><figure class="hljs highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">// <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>// <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br>import <span class="hljs-string">"C"</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Curses_python3.7</title>
      <link href="/2018/08/16/Curses-python3-7/"/>
      <url>/2018/08/16/Curses-python3-7/</url>
      <content type="html"><![CDATA[<p>Python curses模块：控制终端</p><a id="more"></a><p>参考：<a href="https://docs.python.org/3/howto/curses.html" target="_blank" rel="noopener">https://docs.python.org/3/howto/curses.html</a></p><p>版本：Release 2.04</p><p>Python版本：3.7.0</p><h2 id="什么是curses"><a href="#什么是curses" class="headerlink" title="什么是curses?"></a>什么是curses?</h2><p>curses库提供许多基本功能：更改窗口内容：添加为本，擦除文本，改变外观等。但curses不提供用户界面如按钮、复选框或对话框，如果你要使用这些，请考虑<code>Urwid</code>.</p><p>curses最初是为BSD Unix编写的，AT&amp;T的第五个版本的Unix添加了很多增强和新功能。BSD curses已经被ncurses所替代。</p><p>Win版本的curses不包含curses，但可使用<code>UniCurses</code>这个移植版本。</p><h3 id="Python-curses"><a href="#Python-curses" class="headerlink" title="Python curses"></a>Python curses</h3><p>curses 的python模块是curses提供的C函数的简单包装。最大的区别是Python接口将不同的C函数（如<code>addstr()</code>,<code>mvaddstr()</code>, <code>mvwaddstr()</code>) 合并到了单个的<code>addstr()</code>方法中了。</p><h2 id="开始和结束curses"><a href="#开始和结束curses" class="headerlink" title="开始和结束curses"></a>开始和结束curses</h2><ul><li>开始之前，curses必须先调用<code>initscr</code>进行初始化，这将确定终端类型、向终端发送需要的设置代码、创建内部数据结构。如果成功，将返回一个windows 类代表整个屏幕，根据C变量这通常命名为<code>stdscr</code>。</li></ul><figure class="hljs highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">import</span> curses<br><span class="hljs-title">stdscr</span> = curses.initscr()<br></code></pre></td></tr></table></figure><ul><li>通常情况下，curses会关闭对屏幕对按键的自动显示(自动回显)，以便读取它们并在特定时候显示。这就需要调用<code>noecho()</code>函数。</li></ul><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">curses</span><span class="hljs-selector-class">.noecho</span>()<br></code></pre></td></tr></table></figure><ul><li>对按键立即做出回应，而不需要按下<code>Enter</code>键，这称为<code>cbreak模式</code>，与通常的缓冲输入模式(buffered input mode)相反。</li></ul><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">curses</span><span class="hljs-selector-class">.cbreak</span>()<br></code></pre></td></tr></table></figure><ul><li>终端通常返回特殊键，如光标键或导航键(如Page Up 和 Home)，作为多字节转移序列。<code>curses</code>能自动为你处理，返回一个特殊的值比如<code>curses.KEY_LEFT</code>. 为了让curses 使用这个功能，你需要开启键盘模式(keypad mode)：</li></ul><figure class="hljs highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">stdscr.keypad(<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><ul><li>关闭curses需要调用：</li></ul><figure class="hljs highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">curses.nocbreak() <span class="hljs-comment"># 关闭字符终端功能</span><br>stdscr.keypad(<span class="hljs-keyword">False</span>) <br>curses.<span class="hljs-keyword">echo</span>() <span class="hljs-comment"># 打开输入回显功能</span><br></code></pre></td></tr></table></figure><ul><li>来恢复前面的设置，并调用<code>endwin()</code>恢复终端之前的设置：</li></ul><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">curses</span><span class="hljs-selector-class">.endwin</span>()<br></code></pre></td></tr></table></figure><ul><li><strong>Python中，可能会因为bug使得终端无法恢复到初始状态，而对键盘无响应。可以通过调用<code>curses.wrapper()</code>来避免</strong>：</li></ul><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> curses <span class="hljs-keyword">import</span> wrapper<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(stdscr)</span>:</span><br>    <span class="hljs-comment"># Clear screen</span><br>    stdscr.clear()<br><br>    <span class="hljs-comment"># This raises ZeroDivisionError when i == 10.</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">11</span>):<br>        v = i<span class="hljs-number">-10</span><br>        stdscr.addstr(i, <span class="hljs-number">0</span>, <span class="hljs-string">'10 divided by &#123;&#125; is &#123;&#125;'</span>.format(v, <span class="hljs-number">10</span>/v))<br><br>    stdscr.refresh()<br>    stdscr.getkey()<br><br>wrapper(main)<br></code></pre></td></tr></table></figure><p><code>wrapper()</code>函数接受一个可调用对象并进行上述初始化，如果存在颜色支持，也会初始化颜色。当可调用对象运行完毕，<code>wrapper()</code>会将终端恢复到原始状态,如果出错，会报出错误(内部通过try…except实现)，最后恢复终端。</p><h2 id="windows-和-pads"><a href="#windows-和-pads" class="headerlink" title="windows 和 pads"></a><code>windows</code> 和 <code>pads</code></h2><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><blockquote><p><code>windwos</code>是curses最基本的抽象，一个<code>windw</code>类表示屏幕上的一个长方形区域，支持显示文本、释放、允许用户输入字符等。</p></blockquote><ul><li><code>initscr()</code>方法返回的<code>stdscr</code>对象是表示整个屏幕的windows 类；你可能想要划分成更小的区域来分别制：<code>newwin()</code>方法创建给定大小的<code>window</code> 类：</li></ul><figure class="hljs highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">begin_x</span> = <span class="hljs-number">20</span>; begin_y = <span class="hljs-number">7</span><br><span class="hljs-attr">height</span> = <span class="hljs-number">5</span>; width = <span class="hljs-number">40</span><br><span class="hljs-attr">win</span> = curses.newwin(height, width, begin_y, begin_x)<br></code></pre></td></tr></table></figure><blockquote><ul><li><p>需要注意curses的<strong><em>坐标</em></strong>，坐标总是按<strong><em><code>y，x</code></em></strong>的顺序传递；左上角坐标是<code>(0,0)</code>。 它第一次就是这么写的，所以没法改了☁️</p></li><li><p>可通过<code>curses.LINES</code> 和 <code>curses.COLS</code>变量来获取<code>y &amp; x</code> 的大小；合法的坐标从<code>(0，0)</code>到<code>(curses.LINES-1,curses.COLS-1)</code></p></li><li>当调用方法显示或删除时，终端不会立即显示，需要调用<strong><code>refresh()</code></strong>方法来更新屏幕。如<code>stdscr.refresh()</code>或其他windows的<code>refersh()</code>方法。</li></ul></blockquote><h3 id="pad"><a href="#pad" class="headerlink" title="pad"></a><code>pad</code></h3><blockquote><p><code>pad</code>是<code>window</code>的特例，可以比实际的显示屏幕大，并且每次只显示<code>pad</code>的一部分。创建<code>pad</code>需要的<code>height</code>和<code>width</code>，更新<code>pad</code>需要给定<code>pad</code>子区域的坐标。</p></blockquote><figure class="hljs highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">pad = curses.newpad(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>) <br># These loops fill the pad <span class="hljs-keyword">with</span> letters; addch() <span class="hljs-keyword">is</span> <br># explained <span class="hljs-keyword">in</span> the next section <br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-keyword">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">99</span>): <br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-keyword">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">99</span>): <br>pad.addch(y,x, ord(<span class="hljs-string">'a'</span>) + (x*x+y*y) % <span class="hljs-number">26</span>) <br># Displays a section <span class="hljs-keyword">of</span> the pad <span class="hljs-keyword">in</span> the middle <span class="hljs-keyword">of</span> the screen. <br># (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>) : <span class="hljs-type">coordinate</span> <span class="hljs-keyword">of</span> upper-left corner <span class="hljs-keyword">of</span> pad area to display. <br># (<span class="hljs-number">5</span>,<span class="hljs-number">5</span>) : <span class="hljs-type">coordinate</span> <span class="hljs-keyword">of</span> upper-left corner <span class="hljs-keyword">of</span> window area to be filled <span class="hljs-keyword">with</span> pad content. <br># (<span class="hljs-number">20</span>, <span class="hljs-number">75</span>) : <span class="hljs-type">coordinate</span> <span class="hljs-keyword">of</span> lower-right corner <span class="hljs-keyword">of</span> window area to be : <span class="hljs-type">filled</span> <span class="hljs-keyword">with</span> pad content. <br>pad.refresh( <span class="hljs-number">0</span>,<span class="hljs-number">0</span>, <span class="hljs-number">5</span>,<span class="hljs-number">5</span>, <span class="hljs-number">20</span>,<span class="hljs-number">75</span>)<br></code></pre></td></tr></table></figure><blockquote><p><code>refersh()</code>调用显示pad从<code>(5,5)</code> 到 <code>(20,75)</code>的区域，除了这种区别，pad 和 windows 完全相同，并支持相同的方法。</p><p>如果屏幕上有多个windows和pad，则可以更有效地更新屏幕以防止闪烁。<code>refersh()</code> 实际上做了两件事情：1.调用每个窗口的<code>noutrefresh()</code>来更新表示屏幕所需的数据结构；2.调用<code>doupdate()</code>来改变物理屏幕以匹配数据结构中记录的信息</p></blockquote><h2 id="显示文本"><a href="#显示文本" class="headerlink" title="显示文本"></a>显示文本</h2><p><code>stdsccr</code>窗口的<code>addstr()</code>方法接受多个参数，</p><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>str or ch</td><td>在当前位置显示<code>str</code>或<code>ch</code></td></tr><tr><td>str or ch, attr</td><td>使用属性<code>attr</code>在当前位置显示<code>str</code>或<code>ch</code></td></tr><tr><td>y,x,str or ch</td><td>移动到窗口<code>y,x</code>位置，显示<code>str</code>或<code>ch</code></td></tr><tr><td>y, x , str or ch, attr</td><td>移动到窗口<code>y,x</code>位置，使用属性<code>attr</code>显示<code>str</code>或`ch</td></tr></tbody></table><blockquote><p>属性允许以突出模式显示，如<code>粗体</code>、<code>下划线</code>、<code>反向代码</code>、<code>彩色</code>。</p><p><code>addstr()</code>接受<code>string</code>或<code>bytestring</code>作为输入，<code>bytestirng</code>的内容会被原样发送到终端。<code>string</code>会使用windows 的 encoding 属性，将<code>string</code>编码城<code>bytes</code>; 这个默认值是<code>locale.getpreferredencoding()</code>的返回值。</p><p><code>addch()</code>方法接受一个<code>字符</code>，或<code>长度为1的string</code>，<code>长度为1的bytestring</code>，或一个整数。</p><p>如果不需要闪烁光标，可调用<code>curs_set(False)</code>来使其不可见。</p></blockquote><h3 id="属性和颜色"><a href="#属性和颜色" class="headerlink" title="属性和颜色"></a>属性和颜色</h3><blockquote><p>字符可以以不同的方式显示。在基于文本的命令行里，状态栏通常以<code>reverse video</code>的方式显示，或者一个文本查看器需要高亮一些单词。curses通过允许指定屏幕上的每个<code>cell</code>的属性。</p><p>属性是整数，每个位表示不同的属性。</p></blockquote><table><thead><tr><th>Attribute</th><th>Description</th></tr></thead><tbody><tr><td>A_BLINK</td><td>闪烁文字</td></tr><tr><td>A_BOLD</td><td>超亮或粗体文字</td></tr><tr><td>A_DIM</td><td>半明亮文字</td></tr><tr><td>A_REVERSE</td><td><code>reverse-video text</code> ??</td></tr><tr><td>A_STANDOUT</td><td>可用的最佳高亮模式</td></tr><tr><td>A_UNDERLINE</td><td>带下划线的文字</td></tr></tbody></table><p>在屏幕上展示<code>reverse-video status line</code></p><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">stdscr</span><span class="hljs-selector-class">.addstr</span>(0, 0, "<span class="hljs-selector-tag">Current</span> <span class="hljs-selector-tag">mode</span>: <span class="hljs-selector-tag">Typing</span> <span class="hljs-selector-tag">mode</span>", <span class="hljs-selector-tag">curses</span><span class="hljs-selector-class">.A_REVERSE</span>) <br><span class="hljs-selector-tag">stdscr</span><span class="hljs-selector-class">.refresh</span>()<br></code></pre></td></tr></table></figure><blockquote><p>Curses库 还支持一些终端提供的颜色。最常见的是<code>Linux console</code>, 其次是<code>color xterms</code></p></blockquote><p><strong>为了使用颜色，需要在调用了<code>initscr()</code>之后调用<code>start_colr()</code>方法来初始化默认颜色设置 (<code>curses.wrapper()</code>方法自动进行这些)。</strong>完成之后，如果终端能显示颜色，<code>has_colors()</code>方法返回<code>TRUE</code>。</p><p>curses 维护了一些颜色对，包含前景色和背景色。可使用<code>color_pair()</code>方法获得颜色对的属性值，这可以与其他属性<code>按位或</code>如<code>A_REVERSE</code>。</p><p>例如，使用color pair 1 显示一样文本：</p><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">stdscr</span><span class="hljs-selector-class">.addstr</span>("<span class="hljs-selector-tag">Pretty</span> <span class="hljs-selector-tag">text</span>", <span class="hljs-selector-tag">curses</span><span class="hljs-selector-class">.color_pair</span>(1)) <br><span class="hljs-selector-tag">stdscr</span><span class="hljs-selector-class">.refresh</span>()<br></code></pre></td></tr></table></figure><blockquote><p>一个颜色对包含前景色和背景色，<code>init_pair(n,f,b)</code>方法可以改变颜色对<code>n</code>的前景色<code>f</code>和背景色<code>b</code>。颜色对0被设定为<code>white on black</code>的颜色对，且无法更改。</p></blockquote><p>颜色被编号，<code>start_color()</code>方法在激活颜色模式时，初始化了8种基本颜色：<code>0:black</code>; <code>1:red</code>; <code>2:green</code>; <code>3:yellow</code>; <code>4:blue</code>; <code>5:magenta</code>; <code>6:cyan</code>; <code>7:white</code>; </p><p>要在<strong><em>白色背景上将颜色1改为红色</em></strong>，可以：</p><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">curses</span><span class="hljs-selector-class">.init_pair</span>(1, <span class="hljs-selector-tag">curses</span><span class="hljs-selector-class">.COLOR_RED</span>, <span class="hljs-selector-tag">curses</span><span class="hljs-selector-class">.COLOR_WHITE</span>)<br></code></pre></td></tr></table></figure><p>当改变了一个颜色对，所有使用这个颜色对的文本将会被改为新颜色。也可以展示新文本的颜色：</p><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">stdscr.addstr(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>, <span class="hljs-string">"RED ALERT!"</span>, curses.color_pair(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><blockquote><p>甚至可以通过RGB值改变颜色。如果<code>can_change_colr()</code>为<code>True</code>，则可以。</p></blockquote><h2 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h2><p>有两个方法获取windows中的输入：</p><p><code>getch()</code>: 刷新屏幕然后等待用户输入一个按键，如果<code>echo()</code>方法在之前被调用过，则会显示这个按键。</p><p><code>getkey()</code>： 与上面相同，只不过是字符串。</p><p>可以使用<code>nodelay()</code>方法表示不等待用户。在<code>nodelay(True)</code>之后，window中的<code>getch()</code>和<code>getkey()</code>变为非阻塞的。为了表示输入没有就绪，<code>getch()</code>会返回<code>curses.ERR</code>(值是-1)，而<code>getkey()</code>引发异常。<code>halfdelay()</code>方法，可以为每个<code>getch()</code>设定一个<code>timer</code>,如果特定延时中(以十分之一秒为单位)没有获得输入，将引发异常。</p><p><code>getch()</code>方法返回一个整数，如果在<code>0</code>和<code>255</code>之间，代表按下的是<code>ASCII</code>，大于255的值是特殊键，如<code>Page Up</code>, <code>Home</code>,或<code>光标键</code>。可以将返回的值与<code>curses.KEY_PPAGE</code>,<code>curses.KEY_HOME</code>, <code>curses.KEY_LEFT</code>这些常量进行比较。主循环类似于：</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:<br>    c = stdscr.getch()<br>    <span class="hljs-keyword">if</span> c == ord(<span class="hljs-string">'p'</span>):<br>        PrintDocument()<br>    <span class="hljs-keyword">elif</span> c == ord(<span class="hljs-string">'q'</span>):<br>        <span class="hljs-keyword">break</span>  <span class="hljs-comment"># Exit the while loop</span><br>    <span class="hljs-keyword">elif</span> c == curses.KEY_HOME:<br>        x = y = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><code>curses.ascii</code>模块提供<code>ASCII</code>类成员函数，接受整数或者1个字符的string参数；也提供转换函数，以整数或1个字符的string为参数，返回相同的类型。如<code>curses.ascii.ctrl()</code>返回与其参数对应的控制字符。</p><p>还有一种方法可以检索整个字符串:<code>getstr()</code>,但不经常用，因为其功能有限，唯一可用的编辑键是退格键和Enter键。</p><figure class="hljs highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">curses.echo()            <span class="hljs-comment"># Enable echoing of characters</span><br><br><span class="hljs-comment"># Get a 15-character string, with the cursor on the top line</span><br>s = stdscr.getstr(0,0, 15)<br></code></pre></td></tr></table></figure><p><code>curses.textpad</code>模块提供了一个类似于<code>Emacs</code>的键绑定的文本框。<code>Textbox</code>类的不同方法支持使用输入验证进行编辑，并使用或不适用尾随空格获取编辑结果；例如：</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs undefined">import curses<br><span class="hljs-keyword">from</span> curses.textpad import Textbox, rectangle<br><br>def main(stdscr):<br>    stdscr.addstr(0, 0, <span class="hljs-string">"Enter IM message: (hit Ctrl-G to send)"</span>)<br><br>    editwin = curses.newwin(5,30, 2,1)<br>    rectangle(stdscr, 1,0, 1+5+1, 1+30+1)<br>    stdscr.refresh()<br><br>    box = Textbox(editwin)<br><br>    # Let the<span class="hljs-built_in"> user </span><span class="hljs-builtin-name">edit</span> until Ctrl-G is struck.<br>    box.<span class="hljs-builtin-name">edit</span>()<br><br>    # <span class="hljs-builtin-name">Get</span> resulting contents<br>    message = box.gather()<br></code></pre></td></tr></table></figure><h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><p><code>curses</code> 还支持高级特性，如读取<code>屏幕的内容</code>，在<code>xterm实例中捕获鼠标事件</code>等。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">import</span> curses<br><br>stdscr = curses.initscr() <span class="hljs-comment"># 必须先初始化；返回一个window 对象。</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">display_info</span><span class="hljs-params">(str, x, y, colorpair=<span class="hljs-number">2</span>)</span>:</span><br>    <span class="hljs-string">'''使用指定的colorpair显示文字'''</span><br>    <span class="hljs-keyword">global</span> stdscr<br>    stdscr.addstr(y,x,str,curses.color_pair(colorpair))<br>    stdscr.refresh()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_ch_and_continue</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-string">'''演示press any key to continue'''</span><br>    <span class="hljs-keyword">global</span> stdscr<br>    <span class="hljs-comment"># 设置nodeley，为False是会变成阻塞式等待</span><br>    stdscr.nodelay(<span class="hljs-keyword">False</span>)<br>    <span class="hljs-comment"># 输入一个字符</span><br>    ch=stdscr.getch()<br>    <span class="hljs-comment"># 重置nodelay，使得控制台可以以非阻塞方式接受控制台输入，超时1秒</span><br>    stdscr.nodelay(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_win</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-string">'''控制台设置'''</span><br>    <span class="hljs-keyword">global</span> stdscr<br>    <span class="hljs-comment"># assert curses.has_colors() == False</span><br>    <span class="hljs-comment"># 使用颜色先调用这个方法：</span><br>    curses.start_color()<br>    <span class="hljs-keyword">assert</span> curses.has_colors() == <span class="hljs-keyword">True</span><br><br>    <span class="hljs-comment"># 文字和背景设置，设置了连个color pair，分别是1和2；</span><br>    curses.init_pair(<span class="hljs-number">1</span>, curses.COLOR_GREEN, curses.COLOR_BLACK)<br>    curses.init_pair(<span class="hljs-number">2</span>, curses.COLOR_RED, curses.COLOR_BLACK)<br>    <span class="hljs-comment"># 关闭屏幕回显</span><br>    curses.noecho()<br><br>    <span class="hljs-comment"># 输入时不需要回车确认</span><br>    curses.cbreak()<br><br>    <span class="hljs-comment"># 设置nodelay, 使得控制台可以以非阻塞方式接受控制台输入，超时1秒</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">unset_win</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-string">'''控制台重置'''</span><br>    <span class="hljs-keyword">global</span> stdscr<br>    <span class="hljs-comment"># 恢复控制台默认设置（若不恢复，会导致即使程序退出了，控制台仍然是没有回显的。）</span><br>    curses.nocbreak()<br>    stdscr.keypad(<span class="hljs-number">0</span>)<br>    curses.echo()<br>    <span class="hljs-comment"># 结束窗口</span><br>    curses.endwin()<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">'__main__'</span>:<br>    <span class="hljs-keyword">try</span>:<br>        set_win()<br>        display_info(<span class="hljs-string">'Hola, curses!'</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>)<br>        display_info(<span class="hljs-string">'Press any key to continue...'</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>)<br>        get_ch_and_continue()<br>    <span class="hljs-keyword">except</span> (ValueError,TypeError) <span class="hljs-keyword">as</span> e:<br>        print(<span class="hljs-string">"Error, exit..."</span>, e)<br>    <span class="hljs-keyword">finally</span>:<br>        unset_win()<br></code></pre></td></tr></table></figure><ul><li>例子<a href="https://www.cnblogs.com/starof/p/4703820.html" target="_blank" rel="noopener">来自</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> curses </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Acer中Arch安装Secure boot EFI 设置</title>
      <link href="/2018/08/13/Acer%E4%B8%ADArch%E5%AE%89%E8%A3%85Secure-boot-EFI-%E8%AE%BE%E7%BD%AE/"/>
      <url>/2018/08/13/Acer%E4%B8%ADArch%E5%AE%89%E8%A3%85Secure-boot-EFI-%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>记录一下Arch安装的心得。</p><a id="more"></a><p>安装参考：<a href="https://www.viseator.com/2017/05/17/arch_install/" target="_blank" rel="noopener">以官方Wiki的方式安装ArchLinux</a></p><p>问题1：Win与Arch能否安装到不同的盘，然后进行引导？大概是不能(没找到解决办法)。</p><p>问题2：最后一步，Reboot 后， 电脑(Acer VN7 592G) 在打开UEFI 模式下显示找不到启动引导程序。</p><p>在之前安装Ubuntu时，打开UEFI模式，无论<code>secure boot</code>设置成开还是关，都无法成功安装Windows/Ubuntu双系统。解决办法是将<code>UEFI</code>引导设置成<code>BIOS Legeacy</code>引导的方式。但当时只是看到教程是这么做的，也没想过为什么。这么多年过去了，UEFI早已成为市场主流，难道还要再用回传统的BIOS引导吗？</p><p>在安装Arch时，需要挂载引导盘上的EFI分区，这其中包含了很多开机加载的<code>.efi</code>文件，通过<code>diff</code>命令查看了一下<code>EFI</code>分区中<code>Windows</code>下的<code>efi</code>和<code>/EFI/Boot/bootx64.efi</code>文件夹下的<code>efi</code>发现完全一样，这表明安装arch时并没有替换这个文件 <del>(grub安装双系统引导要不要替换这个？)</del>。而这个<code>bootx64.efi</code>在开机时，无论放的谁家的<code>efi</code>,最后肯定会被引导。</p><p>于是我将安装<code>arch</code>时的<code>grub</code>下的一个<code>efi</code> 复制并替换<code>EFI/Boot/bootx64.efi</code>， 重启还是不行。</p><p>最终解决办法：<code>UEFI</code> +<code>Secure boot 开启</code>时，恢复BIOS系统设定，然后重新手动选择Arch的引导程序，这时重启就能进入<code>Arch</code>的引导程序了。<del>再进行添加windows引导程序（系统坏了一次，我把windows盘直接格式化了，就没再测试这一步）</del>。</p><p>Arch真好用~</p><h2 id="UEFI系统引导原理"><a href="#UEFI系统引导原理" class="headerlink" title="UEFI系统引导原理"></a>UEFI系统引导原理</h2><p>参考<a href="https://zhuanlan.zhihu.com/p/31365115" target="_blank" rel="noopener">科普贴：BIOS和UEFI的启动项</a></p><h2 id="Shadowsocks-只能代理部分软件-有些软件不支持设置代理-，怎么才能全局代理？"><a href="#Shadowsocks-只能代理部分软件-有些软件不支持设置代理-，怎么才能全局代理？" class="headerlink" title="Shadowsocks 只能代理部分软件(有些软件不支持设置代理)，怎么才能全局代理？"></a>Shadowsocks 只能代理部分软件(有些软件不支持设置代理)，怎么才能全局代理？</h2><p>参考：<a href="https://program-think.blogspot.com/2014/12/gfw-privoxy.html" target="_blank" rel="noopener">如何用 Privoxy 辅助翻墙？</a></p><p>文章写于2014.12 【2002年就已经是 3.0.0 版本。这么多年，才升到 3.0.22，真够慢的。】</p><p>现在才到 3.0.26</p><hr><ul><li><p>HTTP代理转发：</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">　　　｜＝＝＝＝＞｜　　　　　　　｜＝＝＝＝＞｜　　　　　　｜＝＝＝＝＞｜<br>浏览器｜　　　　　｜Ｐｒｉｖｏｘｙ｜　　　　　｜ＨＴＴＰ代理｜　　　　　｜目标网站<br>　　　｜＜＝＝＝＝｜　　　　　　　｜＜＝＝＝＝｜　　　　　　｜＜＝＝＝＝｜<br></code></pre></td></tr></table></figure></li><li><p>把该语法添加到“主配置文件中”</p>  <figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">forward</span> <span class="hljs-selector-tag">target_pattern</span> <span class="hljs-selector-tag">http_proxy</span><span class="hljs-selector-pseudo">:port</span><br></code></pre></td></tr></table></figure></li></ul><p>如：</p><pre><code><figure class="hljs highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">forward</span>  /  <span class="hljs-number">127.0.0.1:8080</span><br></code></pre></td></tr></table></figure></code></pre><blockquote><p>表示：把所有HTTP请求都转发给本机</p></blockquote><p>如：<br>    <figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">forward-socks5</span> <span class="hljs-selector-class">.onion</span> <span class="hljs-selector-tag">localhost</span><span class="hljs-selector-pseudo">:9050</span> .<br></code></pre></td></tr></table></figure></p><blockquote><p>表示顶级域名为.onion 的HTTP请求都转发给本机(localhost也可以用来表示本机，相当与127.0.0.1 的TOR SOCKS端口)</p></blockquote><ul><li><p>Privoxy 将 socks转发HTTP代理：</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sudo pacman -S privoxy # arch linux<br>mkdir -p ~/.config/privoxy # 默认打开privoxy的位置，其实也可以编辑 /etc/privoxy<span class="hljs-built_in">/config </span>这个文件，但是要在运行时指定这个位置；否则prifoxy自动去找~/.config/privoxy这个文件<br><br><span class="hljs-comment"># 向~/.config/prifoxy/config 写入：</span><br>listen-address 127.0.0.1:8118 # 开启监听端口<br>forward-socks5 / 127.0.0.1:1080 . # socks5代理端口,注意最后的点。<br><br><span class="hljs-comment">#启动代理</span><br>privoxy ~/.config/privoxy<span class="hljs-built_in">/config<br></span><span class="hljs-comment">#开机启动服务：</span><br>sudo systemctl <span class="hljs-builtin-name">enable</span> privoxy.service<br></code></pre></td></tr></table></figure></li><li><p>参考: <a href="https://www.cnblogs.com/zhuxiaoxi/p/9010753.html" target="_blank" rel="noopener">Privoxy将Socks代理转化HTTP代理</a></p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> UEFI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shadowsocks配置</title>
      <link href="/2018/08/07/shadowsocks%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/08/07/shadowsocks%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>获取了shadowsocks账号之后的配置</p><a id="more"></a><p>在获取了shadowsocks账号之后，会拥有: <code>IP地址</code>，<code>端口</code>，<code>加密方法</code>，<code>密码</code>的信息。</p><ul><li><p>安装Shadowsocks客户端</p><ul><li><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank" rel="noopener">Mac版本</a></li><li><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">Win版本</a></li><li><a href="https://github.com/Jigsaw-Code/outline-releases/blob/master/client/Outline.apk?raw=true" target="_blank" rel="noopener">Android版本_直接下载链接</a></li><li><a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation" target="_blank" rel="noopener">Linux版本</a></li><li><a href="https://itunes.apple.com/us/app/wingy-http-s-socks5-proxy-utility/id1178584911" target="_blank" rel="noopener">ios版本_AppStore</a></li></ul></li><li><p>shadowsocks配置：</p><p><code>点击shadowsocks图标</code> —— <code>服务器-新服务器</code> —— <code>服务器设置</code>  —— <code>点击左下角添加</code> —— <code>填入获取的shadowskcks账号信息</code></p></li><li><p>浏览器代理插件设置</p><ul><li><p>chrome 可以安装SwitchyOmega <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" target="_blank" rel="noopener">chrome网上商店</a> <a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="noopener">crx格式离线安装</a></p></li><li><p>Firefox <a href="https://addons.mozilla.org/en-US/firefox/addon/switchyomega/" target="_blank" rel="noopener">SwitchyOmega地址</a></p></li><li><p>安装好之后，进行配置：</p></li></ul></li></ul><p><img src="/pic/2018-08/2018-08-07-01.png" width="2px" height="5px" alt="图片名称" align="center/"></p><p><img src="/pic/2018-08/2018-08-07-02.png" width="26px" height="53px" alt="图片名称" align="center/"></p><p><img src="/pic/2018-08/2018-08-07-03.png" width="26" height="53" alt="图片名称" align="center/"></p><p><img src="/pic/2018-08/2018-08-07-04.png" width="26" height="53" alt="图片名称" align="center/"></p><p><img src="/pic/2018-08/2018-08-07-06.png" width="26" height="53" alt="图片名称" align="center/"></p><p><img src="/pic/2018-08/2018-08-07-07.png" width="26" height="53" alt="图片名称" align="center/"></p><blockquote><p>规则列表网址：<code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code></p></blockquote><p>最后，启用shadowsocks自动代理：</p><p><img src="/pic/2018-08/2018-08-07-08.png" width="26" height="53" alt="图片名称" align="center/"></p><blockquote><p>为什么SwitchyOmega端口要设置成1086?</p></blockquote><p>从shadowsocks <code>偏好设置</code> – <code>高级</code> 中可以看到，监听IP是1086</p><p><img src="/pic/2018-08/2018-08-07-05.png" alt=""></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>shell变量及进程及set,env,export</title>
      <link href="/2018/07/19/shell-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8F%8Aset-env-export/"/>
      <url>/2018/07/19/shell-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8F%8Aset-env-export/</url>
      <content type="html"><![CDATA[<p>shell中，有三种变量：<code>系统变量</code>，<code>环境变量</code>，<code>用户变量</code>。</p><a id="more"></a><h2 id="shell-变量"><a href="#shell-变量" class="headerlink" title="shell 变量"></a>shell 变量</h2><h3 id="1-1系统变量"><a href="#1-1系统变量" class="headerlink" title="1.1系统变量"></a>1.1系统变量</h3><p>Shell常用的系统变量并不多，但却十分有用，特别是在做一些参数检测的时候。下面是<code>Shell常用的系统变量</code></p><table><thead><tr><th>[表示方法]</th><th>[描述]</th></tr></thead><tbody><tr><td><code>$n</code></td><td><code>$1 表示第一个参数，$2 表示第二个参数 ...</code></td></tr><tr><td><code>$#</code></td><td><code>命令行参数的个数</code></td></tr><tr><td><code>$0</code></td><td><code>当前程序的名称</code></td></tr><tr><td><code>$?</code></td><td><code>前一个命令或函数的返回码</code></td></tr><tr><td><code>$*</code></td><td><code>以&quot;参数1 参数2 ... &quot; 形式保存所有参数</code></td></tr><tr><td><code>$@</code></td><td><code>以&quot;参数1&quot; &quot;参数2&quot; ... 形式保存所有参数</code></td></tr><tr><td><code>$$</code></td><td><code>本程序的(进程ID号)PID</code></td></tr><tr><td><code>$!</code></td><td><code>上一个命令的PID</code></td></tr></tbody></table><h3 id="1-2-shell进程"><a href="#1-2-shell进程" class="headerlink" title="1.2 shell进程"></a>1.2 shell进程</h3><blockquote><p>在利用上面的系统变量进行编程时，<code>$$</code>,<code>$!</code>并没有按预想的那样，输出上个<code>命令</code>的PID，这里需要学习一下shell中的进程。</p></blockquote><p>1：什么是shell子进程</p><p>2：shell什么情况下会产生子进程</p><p>3：子进程的特点与注意事项</p><p>4:<code>$</code>变量<code>$$</code>在脚本里的意义，及如何得到子进程里的进程号</p><blockquote><ol><li>什么事shell子进程</li></ol></blockquote><p>子进程，是从父子进程的概念出发的，unix操作系统的进程从init进程开始（init进程为1,而进程号0为系统原始进程，以下讨论的进程原则上不包括进程0)均有其对应的子进程，就算是由于父进程先行结束导致的孤儿进程，也会被init领养，使其父进程ID为1。</p><p>也因为所有的进程均有父进程，事实上，所有进程的创建，都可视为子进程创建过程。在apue一书里提及unix操作系统进程的创建，大抵上的模式都是进行fork+exec类系统调用。</p><p>理解子进程的创建执行，需要至少细分到二个步骤，包括</p><ul><li>通过fork创建子进程环境，</li><li>通过exec加载并执行进程代码。</li><li>其间诸如继承的环境变量等细节，可以查看apue第八章相关章节。</li></ul><p>而shell子进程（以下均称subshell），顾名思义，就是由“当前shell进程”创建的一个子进程</p><blockquote><ol start="2"><li>shell什么情况下会产生子进程</li></ol></blockquote><p>以下几个创建子进程的情况。（以下英文摘自info bash)</p><ol><li><code>&amp;</code>提交后台作业</li></ol><p>If a command is terminated by the control operator `&amp;’, the shell executes the command asynchronously in a subshell.</p><ol start="2"><li>管道</li></ol><p>Each command in a pipeline is executed in its own subshell</p><p>3:括号命令列表 <code>()</code>操作符</p><p>Placing a list of commands between parentheses causes a subshell environment to be created</p><p>4：执行外部脚本、程序：</p><p>When Bash finds such a file while searching the <code>$PATH</code> for a command, it spawns a subshell to execute it.  In other words, executing filename ARGUMENTS is equivalent to executing bash filename ARGUMENTS</p><p>说明：大致上子进程的创建包括以上四种情况了。需要说明的是只要是符合上边四种情况之一，便会创建(fork)子进程，不因是否是函数，命令，或程序，也不会因为是内置函数(buitin)或是外部程序。</p><p>此外，上边提到子进程创建与执行的二个步骤，shell子进程的创建在步骤之一并无多大差别，一般还是父进程调用fork产生进程环境，估在第二步exec的时候，是存在差别的。</p><p>shell 作为解释语言程序，提供给第二步exec加载和执行的程序体并不是脚本本身，而是由第一行<code>#!</code>指定的，默认为shell程序,当然也可以是awk,sed等程序。</p><p>只不过子进程的执行会根据情况而有所差别，对于<strong><em>内置函数</em></strong>，exec程序体为shell程序，并在会在子shell直接调用内置函数， </p><p>而<strong><em>外部函数或程序</em></strong>，在创建了子进程环境后，大致会有二种执行情况：</p><ul><li>直接exec外部程序，</li></ul><p>比如下边例子中直接执行的sleep,pstree命令等</p><ul><li>subshell exec程序体为shell程序，在此基础上会进一步创建一个子进程以执行函数。</li></ul><p>比如下边例子中通过函数提交后台程序中的shell命令等</p> <figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs undefined">例：内置函数(直接在subshell里执行，不管是否通过函数)<br>$ mkfifo a<br><br>$ type echo<br>echo is a shell builtin<br><br>$ b()&#123;echo a&gt;a;&#125;<br>$ b&amp;<br>[<span class="hljs-number">2</span>] <span class="hljs-number">129180</span><br>[<span class="hljs-number">2</span>]  + <span class="hljs-number">129180</span> done       b<br><br>$ echo a&gt;a &amp;<br>[<span class="hljs-number">2</span>] <span class="hljs-number">129649</span><br>[<span class="hljs-number">2</span>]  + <span class="hljs-number">129649</span> done       echo a &gt; a<br><br><br>$ pstree -pa $$<br>zsh,<span class="hljs-number">130152</span><br>  └─pstree,<span class="hljs-number">130233</span> -pa <span class="hljs-number">130152</span><br><br>例：定义函数并提交后台运行（函数调用中的sleep在subshell之下又创建一个子进程,而pstree,sleep命令的直接执行，则是直接在子进程上进行）<br><br>$ a()&#123; sleep <span class="hljs-number">30</span>;  &#125; ;<br><br>$ sleep <span class="hljs-number">40</span> &amp;<br>[<span class="hljs-number">1</span>] <span class="hljs-number">131052</span><br><br>$ a &amp;<br>[<span class="hljs-number">2</span>] <span class="hljs-number">131059</span><br><br>$ pstree -pa $$<br>zsh,<span class="hljs-number">130152</span><br>  ├─pstree,<span class="hljs-number">2133</span> -pa <span class="hljs-number">130152</span><br>  ├─sleep,<span class="hljs-number">131052</span> <span class="hljs-number">40</span><br>  └─zsh,<span class="hljs-number">131059</span><br>      └─sleep,<span class="hljs-number">131060</span> <span class="hljs-number">30</span><br><br>要注意，shell脚本的执行模式，在第四点的二种模式下，shell是会创建子进程的：<br><br>filename ARGUMENTS<br>bash filename ARGUMENTS<br><br>但shell同时提供二种不创建子程序的进程创建方式<br><br><span class="hljs-number">1</span>：source命令，使用方法<br><br>source   filename ARGUMENTS<br>或<br>. filename ARGUMENTS<br><br>此种方法，直接在当前shell进程中执行filename脚本，filename结束后继续返回当前shell进程<br><br><br><span class="hljs-number">2</span>：exec命令，使用方法<br><br>exec filename ARGUMENTS<br><br>此种方法直接在当前shell进程中执行filname脚本，filename结束后退出当前shell进程<br></code></pre></td></tr></table></figure><blockquote><ol start="3"><li>子进程特点与注意事项</li></ol></blockquote><p>这方面不具体展开，只提一点写脚本容易出现的错误。</p><p>做为子进程，其进程环境与父进程的环境是独立的， 所以在变量传递过程中，需要注意子进程内部不能更改到父进程的变量。比如如下通过管道求和并赋给外部变量sum例子，结果sum值并不会因此改变：</p> <figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> sum=0</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">'1 2 3 4'</span> | sed <span class="hljs-string">'s/ /\n/g'</span> | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line;<span class="hljs-keyword">do</span> sum+=<span class="hljs-variable">$line</span>; <span class="hljs-keyword">done</span></span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$sum</span></span><br>01234<br><br>很尴尬我的会变。<br></code></pre></td></tr></table></figure><blockquote><ol start="4"><li>变量<code>$$</code>在脚本中的意义</li></ol></blockquote><p>变量<code>$$</code>代表的是当前shell进程的进和id，这里要特别留意<strong><em><code>当前shell</code></em></strong>，</p><p>看看info bash里的说明</p><p><code>$</code></p><p>Expands to the process ID of the shell.  In a <code>()</code> subshell, it expands to the process ID of the invoking shell, not the subshell.</p><p>所以在实际环境中，<code>$$</code>并不一定“当前进程”的进程号，而是<code>当前shell进程</code>的进程号。</p><p>从文档中，需要留意的便是 invoking shell (info) 或  current  shell（man) 与 当前subshell进程的关系了</p><p>这就引出了几个问题</p><ul><li><p>到底怎么样算是current  shell</p></li><li><p>子进程里的$$对应的是哪个current  shell</p></li><li>如何猎取子进程的<code>$$</code>?</li></ul><p>做为调试和测试，下边的例子引用几个变量,</p><h3 id="2-环境变量"><a href="#2-环境变量" class="headerlink" title="2.环境变量"></a>2.环境变量</h3><p><strong><em>shell 环境变量是所有shell 程序都会接受的参数。shell程序运行时，都会接收一组变量，这组变量就是环境变量。常用的环境变量：</em></strong></p><p><strong><em>在shell程序中，使用export导出的环境变量仅仅在本shell程序中管用（包括调用的其他shell程序文件）；当本shell程序结束，该环境变量就不起作用了。</em></strong></p><h3 id="3-用户变量"><a href="#3-用户变量" class="headerlink" title="3.用户变量"></a>3.用户变量</h3><p>不管系统变量有多少，对于需求来说，总是不够的。用户变量是最常用到的变量，使用也十分简单。</p><figure class="hljs highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># 定义：</span><br>name=<span class="hljs-string">"Winter Is Coming!"</span><br><br><span class="hljs-comment"># 使用：</span><br>echo $name<br><br><span class="hljs-comment"># 切割变量的方法：</span><br>a = $&#123;name%Coming&#125;<br>b = $&#123;a<span class="hljs-comment">#Winter&#125;</span><br></code></pre></td></tr></table></figure><h2 id="set-env-export"><a href="#set-env-export" class="headerlink" title="set,env,export"></a>set,env,export</h2><h3 id="1-set命令"><a href="#1-set命令" class="headerlink" title="1.set命令"></a>1.set命令</h3><p>作用：</p><ul><li>显示系统中已存在的shell变量</li><li>设置shell变量的新变量值</li></ul><blockquote><p>set 命令不能定义新的shell变量。如果要定义新的变量，可以用<code>declare</code>命令及<code>变量名=值</code>的格式进行定义。</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 使用<span class="hljs-built_in">declare</span>命令定义一个新的环境变量<span class="hljs-string">"mylove"</span>，并且将其值设置为<span class="hljs-string">"Visual C++"</span>，输入如下命令：</span><br><br>declare mylove='Visual C++'   #定义新环境变量<br><span class="hljs-meta"><br>#</span><span class="bash"> 再使用<span class="hljs-built_in">set</span>命令将新定义的变量输出为环境变量，输入如下命令：</span><br>set -a mylove                 #设置为环境变量<br><span class="hljs-meta"><br>#</span><span class="bash"> 执行该命令后，将会新添加对应的环境变量。用户可以使用env命令和grep命令分别显示和搜索环境变量<span class="hljs-string">"mylove"</span>，输入命令如下：</span><br><br>env | grep mylove             #显示环境变量值<br><br>此时，该命令执行后，将输出查询到的环境变量值。<br></code></pre></td></tr></table></figure><h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><p>pass</p><h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><p><strong>env命令</strong>用于显示系统中已存在的<code>环境变量</code>，以及在定义的环境中执行指令。该命令只使用”-“作为参数选项时，隐藏了选项”-i”的功能。若没有设置任何选项和参数时，则直接显示当前的环境变量。</p><h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h2><h3 id="常用的环境变量"><a href="#常用的环境变量" class="headerlink" title="常用的环境变量"></a>常用的环境变量</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>PATH</td><td>命令搜索路径,以冒号为分隔符.注意与DOS下不同的是, 当前目录不在系统路径里</td></tr><tr><td>HOME</td><td>用户home目录的路径名,是cd命令的默认参数</td></tr><tr><td>COLUMNS</td><td>定义了命令编辑模式下可使用命令行的长度</td></tr><tr><td>EDITOR</td><td>默认的行编辑器</td></tr><tr><td>VISUAL</td><td>默认的可视编辑器</td></tr><tr><td>FCEDIT</td><td>命令fc使用的编辑器</td></tr><tr><td>HISTFILE</td><td>命令历史文件</td></tr><tr><td>HISTSIZE</td><td>命令历史文件中最多可包含的命令条数</td></tr><tr><td>HISTFILESIZE</td><td>命令历史文件中包含的最大行数</td></tr><tr><td>IFS</td><td>定义SHELL使用的分隔符</td></tr><tr><td>LOGNAME</td><td>用户登录名</td></tr><tr><td>MAIL</td><td>指向一个需要SHELL监视其修改时间的文件.当该文件修改后, SHELL将发消息You hava mail给用户</td></tr><tr><td>MAILCHECK</td><td>SHELL检查MAIL文件的周期,单位是秒</td></tr><tr><td>MAILPATH</td><td>功能与MAIL类似.但可以用一组文件,以冒号分隔,每个文件后可跟一个问号和一条发向用户的消息</td></tr><tr><td>SHELL</td><td>SHELL的路径名</td></tr><tr><td>TERM</td><td>终端类型</td></tr><tr><td>TMOUT</td><td>SHELL自动退出的时间,单位为秒,若设为0则禁止SHELL自动退出</td></tr><tr><td>PROMPT_COMMAND</td><td>指定在主命令提示符前应执行的命令</td></tr><tr><td>PS1</td><td>主命令提示符</td></tr><tr><td>PS2</td><td>二级命令提示符,命令执行过程中要求输入数据时用</td></tr><tr><td>PS3</td><td>select的命令提示符</td></tr><tr><td>PS4</td><td>调试命令提示符</td></tr><tr><td>MANPATH</td><td>寻找手册页的路径,以冒号分隔</td></tr><tr><td>LD_LIBRARY_PATH</td><td>寻找库的路径,以冒号分隔</td></tr></tbody></table><h2 id="set-选项："><a href="#set-选项：" class="headerlink" title="set 选项："></a>set 选项：</h2><figure class="hljs highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs undefined">-<span class="ruby">a：标示已修改的变量，以供输出至环境变量。<br></span>-<span class="ruby">b：使被中止的后台程序立刻回报执行状态。<br></span>-<span class="ruby">C：转向所产生的文件无法覆盖已存在的文件。<br></span>-<span class="ruby">d：Shell预设会用杂凑表记忆使用过的指令，以加速指令的执行。使用-d参数可取消。<br></span>-<span class="ruby">e：若指令传回值不等于<span class="hljs-number">0</span>，则立即退出shell。<br></span>-<span class="ruby">f：取消使用通配符。<br></span>-<span class="ruby">h：自动记录函数的所在位置。<br></span>-<span class="ruby">H Shell：可利用<span class="hljs-string">"!"</span>加&lt;指令编号&gt;的方式来执行history中记录的指令。<br></span>-<span class="ruby">k：指令所给的参数都会被视为此指令的环境变量。<br></span>-<span class="ruby">l：记录<span class="hljs-keyword">for</span>循环的变量名称。<br></span>-<span class="ruby">m：使用监视模式。<br></span>-<span class="ruby">n：只读取指令，而不实际执行。<br></span>-<span class="ruby">p：启动优先顺序模式。<br></span>-<span class="ruby">P：启动-P参数后，执行指令时，会以实际的文件或目录来取代符号连接。<br></span>-<span class="ruby">t：执行完随后的指令，即退出shell。<br></span>-<span class="ruby">u：当执行时使用到未定义过的变量，则显示错误信息。<br></span>-<span class="ruby">v：显示shell所读取的输入值。<br></span>-<span class="ruby">x：执行指令后，会先显示该指令及所下的参数。</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.sina.com.cn/s/blog_4b9eab320100rirb.html" target="_blank" rel="noopener">unix shell的系统变量，环境变量，用户变量(引)</a></li><li><a href="http://man.linuxde.net/set" target="_blank" rel="noopener">set命令</a></li><li><a href="http://man.linuxde.net/env" target="_blank" rel="noopener">env命令</a></li><li><a href="https://blog.csdn.net/sosodream/article/details/5683515" target="_blank" rel="noopener">实例解析shell子进程（subshell )</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Perl 安装模块与卸载</title>
      <link href="/2018/07/12/Perl-%E5%AE%89%E8%A3%85%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/07/12/Perl-%E5%AE%89%E8%A3%85%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<ul><li>安装Perl 模块的不同方法</li></ul><a id="more"></a><h2 id="1-使用cpanm-来安装模块"><a href="#1-使用cpanm-来安装模块" class="headerlink" title="1. 使用cpanm 来安装模块"></a>1. 使用<code>cpanm</code> 来安装模块</h2><p>首先安装<code>cpanm</code>, 在终端输入：</p><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">cpan App::cpanminus<br></code></pre></td></tr></table></figure><p>然后可安装你需要的模块：</p><figure class="hljs highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">cpanm <span class="hljs-keyword">Module</span>::<span class="hljs-keyword">Name</span><br></code></pre></td></tr></table></figure><p>遇到了bug，cpanm 会详细的报告出来bug信息，这点很好，总的来说是gcc 版本太低：</p><p><code>/lib64/libc.so.6: version GLIBC_2.14&#39; not found</code></p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"><span class="hljs-built_in">which</span> perl</span><br>/home/dongkaige/.linuxbrew/bin/perl<br><span class="hljs-meta"><br>$</span><span class="bash"><span class="hljs-built_in">which</span> cpanm</span><br>/home/dongkaige/software/miniconda3/envs/BioEnv/bin/cpanm<br><span class="hljs-meta"><br>$</span><span class="bash"><span class="hljs-built_in">which</span> cpan</span><br>/home/dongkaige/.linuxbrew/bin/cpan<br>...<br></code></pre></td></tr></table></figure><p>不知道<code>cpanm</code> 是根据什么变量安装的，安装到了conda 的目录下。</p><p>虽然conda在遇到依赖特定版本的gcc的包时，也会安装到conda中，但很多程序在调用c动态库时，依然从服务器的动态库调用，就会导致版本错误<code>GLIBC_2.14 not found</code>。</p><p>而linuxbrew 则是相对独立的包管理器，在费了很大功夫，在老服务器上安装好 linuxbrew 及高版本的 gcc， glibc之后，之后linuxbrew中，所有软件编译和运行都会调用linuxbrew下的动态库，这样就不会有上面的错误。</p><p>只好用别的方法调用linuxbrew中的Perl进行安装：</p><h2 id="2-cpan"><a href="#2-cpan" class="headerlink" title="2. cpan"></a>2. cpan</h2><figure class="hljs highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">cpan<br><span class="hljs-keyword">install</span> <span class="hljs-keyword">Set</span>::IntervalTree<br></code></pre></td></tr></table></figure><h2 id="3-perl-MCPAN-e-quot-shell-quot"><a href="#3-perl-MCPAN-e-quot-shell-quot" class="headerlink" title="3. perl -MCPAN -e &quot;shell&quot;"></a>3. <code>perl -MCPAN -e &quot;shell&quot;</code></h2><figure class="hljs highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">perl -MCPAN -e <span class="hljs-string">"shell"</span><br><span class="hljs-keyword">install</span> <span class="hljs-keyword">Set</span>::IntervalTree<br></code></pre></td></tr></table></figure><p>第二种方法成功，第三种方法应该也没问题。</p><h2 id="4-测试是否已经安装成功"><a href="#4-测试是否已经安装成功" class="headerlink" title="4. 测试是否已经安装成功"></a>4. 测试是否已经安装成功</h2><figure class="hljs highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">perl -MHTTP::<span class="hljs-built_in">Date</span> -e <span class="hljs-string">"print\"</span><span class="hljs-keyword">module</span> installed\n\<span class="hljs-string">""</span><br></code></pre></td></tr></table></figure><p><code>-M</code>后紧跟着模块名，如果输出<code>module installed</code>的结果，则是安装了的。</p><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h4 id="列出已安装模块"><a href="#列出已安装模块" class="headerlink" title="列出已安装模块"></a>列出已安装模块</h4><figure class="hljs highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">perldoc perllocal<br><span class="hljs-comment"># 或</span><br><span class="hljs-keyword">instmodsh </span><span class="hljs-comment"># 推荐这一种</span><br></code></pre></td></tr></table></figure><h4 id="查询perl模块安装路径"><a href="#查询perl模块安装路径" class="headerlink" title="查询perl模块安装路径"></a>查询perl模块安装路径</h4><figure class="hljs highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">perldoc -l DBD::mysql<br></code></pre></td></tr></table></figure><h4 id="查询模块版本"><a href="#查询模块版本" class="headerlink" title="查询模块版本"></a>查询模块版本</h4><p>(<code>-M</code>紧跟着跟着模块)<br><figure class="hljs highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ perl -MHTTP::Date -e <span class="hljs-symbol">'print</span> HTTP::Date-&gt;VERSION. <span class="hljs-string">"\n"</span>'<br><span class="hljs-number">6.02</span><br></code></pre></td></tr></table></figure></p><h4 id="卸载模块："><a href="#卸载模块：" class="headerlink" title="卸载模块："></a>卸载模块：</h4><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://blog.csdn.net/u010533843/article/details/54971428" target="_blank" rel="noopener">Linux 检查是否安装perl模块及列出所有已安装的perl模块(安装路径、版本号)</a></p></li><li><p><a href="https://blog.csdn.net/yuehedou/article/details/78406518" target="_blank" rel="noopener">非root用户安装perl模块</a></p></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>python批量转换exe视频</title>
      <link href="/2018/07/11/python%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2exe%E8%A7%86%E9%A2%91/"/>
      <url>/2018/07/11/python%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2exe%E8%A7%86%E9%A2%91/</url>
      <content type="html"><![CDATA[<p>如何使用python脚本在win上自动转换exe视频到MP4</p><a id="more"></a><p>转自<a href="https://blog.csdn.net/shawpan/article/details/78170871" target="_blank" rel="noopener">python自动化工具之pywinauto(四)——批量转换exe视频</a></p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">"""<br>Created on Wed Oct  4 16:52:13 2017<br><br>@author: x<br>"""</span><br><span class="hljs-keyword">from</span> pywinauto.application <span class="hljs-keyword">import</span> Application<br><br>program_path = <span class="hljs-string">r"D:\Program Files (x86)\tlxsoft\屏幕录像专家 共享版 V2017\屏录专家.exe"</span><br>app = Application().start(program_path)<br>dlg_spec = app.window(title_re=<span class="hljs-string">'屏幕录像专家.*'</span>,class_name=<span class="hljs-string">'TMainForm'</span>)<br><span class="hljs-comment">#dlg_spec.type_keys('%TP')</span><br>dlg_spec.menu_select(<span class="hljs-string">r"转换工具-&gt;EXE/LXE转成MP4"</span>)<br>dlg_spec = app[<span class="hljs-string">r'EXE/EXE 转 MP4'</span>]<br>dlg_spec.print_control_identifiers()    <span class="hljs-comment"># 打印该窗体下的所有控件结构</span><br><br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> open(<span class="hljs-string">'ToBeConvert.txt'</span>):<br>    filename = line.strip()     <span class="hljs-comment"># 去掉读取每一行时最后带着的空格和回车符</span><br>    dlg_spec.Button3.click()    <span class="hljs-comment"># 点击“浏览”按钮</span><br>    dlg_open = app.window(title=<span class="hljs-string">r'打开'</span>)  <span class="hljs-comment"># 获取“打开”对话框句柄</span><br>    dlg_open.Edit.type_keys(filename,with_spaces = <span class="hljs-keyword">True</span>)<br><span class="hljs-comment">#    dlg_open.Edit.set_text(filename)     # 将文件绝对路径写入编辑框中</span><br>    dlg_open.Button0.click()             <span class="hljs-comment"># 点击“打开”按钮</span><br>    dlg_open.wait_not(<span class="hljs-string">'visible'</span>)<br><br>    dlg_spec.CheckBox0.check()          <span class="hljs-comment"># 勾选自动扩帧</span><br>    dlg_spec.Button0.click()            <span class="hljs-comment"># 点击“转换”</span><br><br>    app[<span class="hljs-string">'另存为'</span>].Button0.click()        <span class="hljs-comment"># 点击“另存为”对话框的“保存”按钮</span><br><br>    app.window(title=<span class="hljs-string">r'屏幕录像专家'</span>,class_name=<span class="hljs-string">'TMessageForm'</span>).Wait(<span class="hljs-string">'enabled'</span>,timeout=<span class="hljs-number">300</span>)       <span class="hljs-comment"># 等待转换结束</span><br>    app.window(title=<span class="hljs-string">r'屏幕录像专家'</span>,class_name=<span class="hljs-string">'TMessageForm'</span>).Ok.click()        <span class="hljs-comment"># 关闭转换完成后弹出的对话框</span><br></code></pre></td></tr></table></figure><blockquote><p>用法:</p></blockquote><ol><li>根据屏幕录像专家程序的安装位置修改变量<code>program_path</code>的值。</li><li>在当前目录新建一个 ToBeConvert.txt 文档，每行写上一个带转换的源文件，目标文件目录默认与源文件相同。 </li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Django项目实战2: xadmin</title>
      <link href="/2018/05/14/Django%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%982-xadmin/"/>
      <url>/2018/05/14/Django%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%982-xadmin/</url>
      <content type="html"><![CDATA[<p>Xadmin 实战</p><a id="more"></a><p>创建超级用户<code>admin</code></p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">python manage<span class="hljs-selector-class">.py</span> createsuperuser<br></code></pre></td></tr></table></figure><p>修改语言：</p><figure class="hljs highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># LANGUAGE_CODE = 'en-us'</span><br><span class="hljs-attr">LANGUAGE_CODE</span> = <span class="hljs-string">'zh-hans'</span><br><br><span class="hljs-comment"># TIME_ZONE = 'UTC'</span><br><span class="hljs-attr">TIME_ZONE</span> = <span class="hljs-string">'Asia/Shanghai'</span><br><br><span class="hljs-attr">USE_I18N</span> = <span class="hljs-literal">True</span><br><br><span class="hljs-attr">USE_L10N</span> = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># USE_TZ = True # 为UTC时间，即国际事件。我们改为本地时间。</span><br><span class="hljs-attr">USE_TZ</span> = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>这时我们看到admin中只有组这个信息，现在我们把user注册进来：</p><p>修改 <code>apps/users/admin.py</code>为：</p><figure class="hljs highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-title">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><br><span class="hljs-meta"># Register your models here.</span><br><br><span class="hljs-title">from</span> .models <span class="hljs-keyword">import</span> UserProfile<br><span class="hljs-class"><br><span class="hljs-keyword">class</span> <span class="hljs-type">UserProfileAdmin</span>(<span class="hljs-title">admin</span>.<span class="hljs-type">ModelAdmin</span>):<br>    pass<br><br>admin.site.register(<span class="hljs-type">UserProfile</span>,<span class="hljs-type">UserProfileAdmin</span>)</span><br></code></pre></td></tr></table></figure><p>这时再刷新，就能看到<code>user</code>被注册进来了。</p><p>然后添加一个用户，但是保存时出错：<code>Django后台添加用户报错：1452, &#39;Cannot add or update a child row: a foreign key constraint fails</code>；参考<a href="https://www.jianshu.com/p/7516065f91a3" target="_blank" rel="noopener">Link</a>,进行解决：</p><figure class="hljs highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined">DATABASES = &#123;<br>    <span class="hljs-string">'default'</span>: &#123;<br>        <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.mysql'</span>,<br>        <span class="hljs-string">'NAME'</span>: <span class="hljs-string">'mxonline2'</span>,<br>        <span class="hljs-string">'USER'</span>: <span class="hljs-string">'root'</span>,<br>        <span class="hljs-string">'PASSWORD'</span>: <span class="hljs-string">'你的密码'</span>,<br>        <span class="hljs-string">'HOST'</span>:<span class="hljs-string">'127.0.0.1'</span>,<br>        <span class="hljs-string">'OPTIONS'</span>: &#123;<br>          <span class="hljs-string">"init_command"</span>: <span class="hljs-string">"SET foreign_key_checks=0;"</span>,<br>      &#125;<br><br>    &#125;,<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>安装xadmin：<code>pip install xadmin</code></p></blockquote><blockquote><p>将xadmin注册进APPS:</p></blockquote><figure class="hljs highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">INSTALLED_APPS = [<br>...<br><span class="hljs-string">'xadmin'</span>,<br>    <span class="hljs-string">'crispy_forms'</span><br>]<br></code></pre></td></tr></table></figure><blockquote><p>将默认的admin，指向xadmin: 修改urls.py</p></blockquote><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">import</span> xadmin<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r'^xadmin/'</span>, xadmin.site.urls),<br>]<br></code></pre></td></tr></table></figure><blockquote><p>然后，将之前注册的admin取消掉：修改为：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment">#~/DjangoProject/mxonline</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> from django.contrib import admin</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment"># Register your models here.</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment">#from .models import UserProfile</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment">#class UserProfileAdmin(admin.ModelAdmin):</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment">#    pass</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment">#admin.site.register(UserProfile,UserProfileAdmin)</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p>然后我们需要同步xadmin的表，用<code>makemigration</code>,<code>migrate</code>命令，就能访问了！</p></blockquote><ul><li>省去了我们手动注册的步骤，会自动发现apps内的表，并注册进来！</li></ul><blockquote><p>第二种安装方式(推荐)：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> $ git <span class="hljs-built_in">clone</span> https://github.com/sshwsfc/xadmin.git</span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-built_in">cd</span> xadmin</span><br><span class="hljs-meta">&gt;</span><span class="bash"> cp -r xadmin ../mxonline/extra_apps <span class="hljs-comment"># cp xadmin中的xadmin文件夹到项目根目录的extra_apps文件夹。</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-built_in">cd</span> ../mxonline/extra_apps</span><br><span class="hljs-meta">&gt;</span><span class="bash"> touch __init__.py <span class="hljs-comment"># 这样这个目录就是可导入的了。</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment"># 然后修改setting.py</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment"># 添加：</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> sys.path.insert(0,os.path.join(BASE_DIR,<span class="hljs-string">'extra_apps'</span>))</span><br><span class="hljs-meta">&gt;</span><span class="bash"> 然后卸载xadmin(但是会保留其依赖。)</span><br><span class="hljs-meta">&gt;</span><span class="bash"> $ pip uninstall xadmin</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br></code></pre></td></tr></table></figure></blockquote><p>我遇到了很多问题，最终<a href="http://coding.imooc.com/learn/questiondetail/28647.html" target="_blank" rel="noopener">参考</a>解决</p><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">如：django.core.exceptions.AppRegistryNotReady: Apps aren't loaded yet.<br>查找之后，我：<br>$ pip <span class="hljs-keyword">install</span> future six httplib2<br><br>安装之后，<br>  <span class="hljs-keyword">File</span> <span class="hljs-string">"/home/bobo/DjangoProject/mxonline/extra_apps/xadmin/plugins/importexport.py"</span>, line <span class="hljs-number">48</span>, <span class="hljs-keyword">in</span> &lt;<span class="hljs-keyword">module</span>&gt;<br>    <span class="hljs-keyword">from</span> import_export.admin <span class="hljs-keyword">import</span> DEFAULT_FORMATS, SKIP_ADMIN_LOG, TMP_STORAGE_CLASS<br>ImportError: <span class="hljs-keyword">No</span> <span class="hljs-keyword">module</span> named import_export.admin<br><br>我：<br>$pip <span class="hljs-keyword">install</span> django-<span class="hljs-keyword">import</span>-<span class="hljs-keyword">export</span><br></code></pre></td></tr></table></figure><blockquote><p><code>admin</code>会使用<code>admin.py</code>来注册，我们新建<code>adminx.py</code>,根据该文件注册models:</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment"># _*_coding:utf-8_*_</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br><span class="hljs-meta">&gt;</span><span class="bash"> import xadmin</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br><span class="hljs-meta">&gt;</span><span class="bash"> from .models import EmailVerifyRecord</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br><span class="hljs-meta">&gt;</span><span class="bash"> class EmailVerifyRecordAdmin(object):</span><br><span class="hljs-meta">&gt;</span><span class="bash">     list_display = [<span class="hljs-string">"code"</span>,<span class="hljs-string">"email"</span>,<span class="hljs-string">"send_type"</span>,<span class="hljs-string">"send_time"</span>] <span class="hljs-comment"># 自定义显示的字段</span></span><br><span class="hljs-meta">&gt;</span><span class="bash">     search_fields = [<span class="hljs-string">"code"</span>,<span class="hljs-string">"email"</span>,<span class="hljs-string">"send_type"</span>] <span class="hljs-comment"># 在这些字段中进行搜索</span></span><br><span class="hljs-meta">&gt;</span><span class="bash">     list_filter = [<span class="hljs-string">"code"</span>,<span class="hljs-string">"email"</span>,<span class="hljs-string">"send_type"</span>,<span class="hljs-string">"send_time"</span>] <span class="hljs-comment"># 过滤器，进一步筛选</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> xadmin.site.register(EmailVerifyRecord,EmailVerifyRecordAdmin)</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p>这样就把邮箱验证码注册进来了。</p></blockquote><blockquote><p>添加搜索功能，自定义显示字段如上。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django项目实战1：用户数据库</title>
      <link href="/2018/05/13/Django%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%981%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/05/13/Django%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%981%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>Django 项目实战记录</p><a id="more"></a><h2 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h2><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">virtualenv virEnv # Python <span class="hljs-number">2.7</span><span class="hljs-number">.15</span>rc1<br>source virEnv/bin/activate<br>pip install django==<span class="hljs-number">1.9</span><br>django-admin.py startproject mxonline<br>pip install mysql-python # mysql-python<span class="hljs-number">-1.2</span><span class="hljs-number">.5</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ tree mxonline<br>mxonline<br>├── manage<span class="hljs-selector-class">.py</span><br>└── mxonline<br>    ├── __init__<span class="hljs-selector-class">.py</span><br>    ├── settings<span class="hljs-selector-class">.py</span><br>    ├── urls<span class="hljs-selector-class">.py</span><br>    └── wsgi.py<br></code></pre></td></tr></table></figure><h2 id="2-配置-创建数据库"><a href="#2-配置-创建数据库" class="headerlink" title="2. 配置,创建数据库"></a>2. 配置,创建数据库</h2><blockquote><p>将<code>settings.py</code> 中的</p></blockquote><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">DATABASES = &#123;<br>    <span class="hljs-string">'default'</span>: &#123;<br>        <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.sqlite3'</span>,<br>        <span class="hljs-string">'NAME'</span>: os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.join</span>(BASE_DIR, <span class="hljs-string">'db.sqlite3'</span>),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>变更为：</p><figure class="hljs highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">DATABASES = &#123;<br>    <span class="hljs-string">'default'</span>: &#123;<br>        <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.mysql'</span>,<br>        <span class="hljs-string">'NAME'</span>: <span class="hljs-string">"mxonline"</span>,<br>        <span class="hljs-string">"USER"</span>:<span class="hljs-string">"root"</span>,<br>        <span class="hljs-string">"PASSWORD"</span>:<span class="hljs-string">"xxxxxx"</span>,<br>        <span class="hljs-string">"HOST"</span>:<span class="hljs-string">"127.0.0.1"</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，navicate新建一个数据库，名为<code>mxonline</code>；这时，用navicate查看，是没有表的。我们进行生成Django默认的数据表：</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">python manage<span class="hljs-selector-class">.py</span> makemigrations<br>python manage<span class="hljs-selector-class">.py</span> migrate<br></code></pre></td></tr></table></figure><h2 id="3-设计User-Model"><a href="#3-设计User-Model" class="headerlink" title="3. 设计User Model"></a>3. 设计User Model</h2><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">django-admin.py startapp<span class="hljs-built_in"> users </span># 在web程序中，user表都是第一个被设计的。<br></code></pre></td></tr></table></figure><p>修改users下的models.py：</p><figure class="hljs highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> unicode_literals<br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-comment"># Create your models here.</span><br></code></pre></td></tr></table></figure><p>变更为：</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># _*_ encoding:utf-8 _*_</span><br><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> unicode_literals<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> AbstractUser <span class="hljs-comment"># 继承这个，这个也就是Django默认的user数据表的设计。</span><br><br><span class="hljs-comment"># Create your models here.</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserProfile</span><span class="hljs-params">(AbstractUser)</span>:</span><br>    nick_name = models.CharField(max_length=<span class="hljs-number">50</span>,verbose_name=<span class="hljs-string">u"昵称"</span>,default=<span class="hljs-string">""</span>)<br>    birday = models.DateField(verbose_name=<span class="hljs-string">u"生日"</span>,null=<span class="hljs-keyword">True</span>,blank=<span class="hljs-keyword">True</span>) <span class="hljs-comment"># 可以为空</span><br>    gender = models.CharField(max_length=<span class="hljs-number">5</span>,choices=((<span class="hljs-string">"male"</span>,<span class="hljs-string">"男"</span>),(<span class="hljs-string">"female"</span>,<span class="hljs-string">"女"</span>)),default=<span class="hljs-string">"女"</span>)<br>    address = models.CharField(max_length=<span class="hljs-number">100</span>,default=<span class="hljs-string">u""</span>)<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>,null=<span class="hljs-keyword">True</span>,blank=<span class="hljs-keyword">True</span>)<br>    image = models.ImageField(upload_to=<span class="hljs-string">"image/%Y/%m"</span>,default=<span class="hljs-string">u"image/default.png"</span>,max_length=<span class="hljs-number">100</span>) <span class="hljs-comment"># 用户头像，自&gt;定义上传路径。</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name = <span class="hljs-string">"用户信息"</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span><span class="hljs-comment"># 重载unicode这个方法，不然在print userprofile实例的时候，不能打印我们自定义的字符串。</span><br>        <span class="hljs-keyword">return</span> self.username <span class="hljs-comment"># 这个username是继承的AbstractUser的</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmailVerifyRecord</span><span class="hljs-params">(models.Model)</span>:</span><br>    code = models.CharField(max_length=<span class="hljs-number">20</span>,verbose_name=<span class="hljs-string">u"验证码"</span>)<br>    email = models.EmailField(max_length=<span class="hljs-number">50</span>,verbose_name=<span class="hljs-string">u"邮箱"</span>)<br>    send_type = models.CharField(choices=((<span class="hljs-string">"register"</span>,<span class="hljs-string">u"注册"</span>),(<span class="hljs-string">"forget"</span>,<span class="hljs-string">u"找回密码"</span>)),max_length=<span class="hljs-number">10</span>) <span class="hljs-comment"># 注册时的，</span><br>还是找回秘密的验证码<br>    send_time = models.DateTimeField(default=datetime.now)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name = <span class="hljs-string">"邮箱验证码"</span><br>        verbose_name_plural = verbose_name<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Banner</span><span class="hljs-params">(models.Model)</span>:</span><br>    title = models.CharField(max_length=<span class="hljs-number">100</span>,verbose_name=<span class="hljs-string">u"标题"</span>)<br>    image = models.ImageField(upload_to=<span class="hljs-string">"banner/%Y/%m"</span>,verbose_name=<span class="hljs-string">u"轮播图"</span>,max_length=<span class="hljs-number">100</span>)<br>    url = models.URLField(max_length=<span class="hljs-number">200</span>,verbose_name=<span class="hljs-string">"访问地址"</span>)<br>    index = models.IntegerField(default=<span class="hljs-number">100</span>,verbose_name = <span class="hljs-string">u"顺序"</span>)<br>    add_time = models.DateTimeField(default=datetime.now,verbose_name=<span class="hljs-string">u"添加时间"</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name = <span class="hljs-string">u"轮播图"</span><br>        verbose_name_plural = verbose_name<br></code></pre></td></tr></table></figure><blockquote><p>pip install pillow 使得支持Image这个方法。</p></blockquote><p>然后，修改settings.py ,使得我们的app被注册进来：</p><figure class="hljs highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined"># <span class="hljs-type">Application</span> definition<br><br><span class="hljs-type">INSTALLED_APPS</span> = [<br>    <span class="hljs-symbol">'django</span>.contrib.admin',<br>    <span class="hljs-symbol">'django</span>.contrib.auth',<br>    <span class="hljs-symbol">'django</span>.contrib.contenttypes',<br>    <span class="hljs-symbol">'django</span>.contrib.sessions',<br>    <span class="hljs-symbol">'django</span>.contrib.messages',<br>    <span class="hljs-symbol">'django</span>.contrib.staticfiles',<br>    <span class="hljs-symbol">'users'</span><br>]<br><br><span class="hljs-type">AUTH_USER_MODEL</span> = <span class="hljs-string">"users.UserProfile"</span> # 重载这个方法。用<span class="hljs-type">UserProfile</span>替换user<br></code></pre></td></tr></table></figure><h2 id="4-course-model的编写"><a href="#4-course-model的编写" class="headerlink" title="4. course model的编写"></a>4. course model的编写</h2><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">django-admin<span class="hljs-selector-class">.py</span> startapp courses<br></code></pre></td></tr></table></figure><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># _*_ coding:utf-8 _*_</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> unicode_literals<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-comment"># Create your models here.</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Course</span><span class="hljs-params">(models.Model)</span>:</span><br>    name = models.CharField(max_length=<span class="hljs-number">50</span>,verbose_name=<span class="hljs-string">u"课程名"</span>)<br>    desc = models.CharField(max_length=<span class="hljs-number">300</span>,verbose_name=<span class="hljs-string">u"课程描述"</span>)<br>    detail = models.TextField(verbose_name=<span class="hljs-string">u"课程详情"</span>) <span class="hljs-comment"># 不限制长度</span><br>    degree = models.CharField(choices=((<span class="hljs-string">"cj"</span>,<span class="hljs-string">"初级"</span>),(<span class="hljs-string">"zj"</span>,<span class="hljs-string">"中级"</span>),(<span class="hljs-string">"gj"</span>,<span class="hljs-string">"高级"</span>)),max_length=<span class="hljs-number">2</span>)<br>    learn_times = models.IntegerField(default=<span class="hljs-number">0</span>,verbose_name=<span class="hljs-string">"学习时长(分钟数)"</span>)<br>    students = models.IntegerField(default=<span class="hljs-number">0</span>,verbose_name=<span class="hljs-string">"学习人数"</span>)<br>    fav_nums = models.IntegerField(default=<span class="hljs-number">0</span>,verbose_name=<span class="hljs-string">u"收藏人数"</span>)<br>    image = models.ImageField(upload_to=<span class="hljs-string">"courses/%Y/%m"</span>,verbose_name=<span class="hljs-string">"封面图"</span>,max_length=<span class="hljs-number">100</span>)<br>    click_nums = models.IntegerField(default=<span class="hljs-number">0</span>,verbose_name=<span class="hljs-string">"点击数"</span>)<br>    add_time = models.DateTimeField(default=datetime.now,verbose_name=<span class="hljs-string">"添加时间"</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name=<span class="hljs-string">"课程"</span><br>        verbose_name_plural = verbose_name<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lesson</span><span class="hljs-params">(models.Model)</span>:</span><br>    course = models.ForeignKey(Course,verbose_name=<span class="hljs-string">"课程"</span>)<br>    name = models.CharField(max_length=<span class="hljs-number">100</span>,verbose_name=<span class="hljs-string">"章节名"</span>)<br>    add_time = models.DateTimeField(default=datetime.now,verbose_name=<span class="hljs-string">"添加时间"</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name = <span class="hljs-string">"章节"</span><br>        verbose_name_plural = verbose_name<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Video</span><span class="hljs-params">(models.Model)</span>:</span><br>    lesson = models.ForeignKey(Lesson,verbose_name=<span class="hljs-string">u"章节"</span>)<br>    name = models.CharField(max_length=<span class="hljs-number">100</span>,verbose_name=<span class="hljs-string">"视频名"</span>)<br>    add_time = models.DateTimeField(default=datetime.now,verbose_name=<span class="hljs-string">"添加时间"</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name = <span class="hljs-string">"视频"</span><br>        verbose_name_plural = verbose_name<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CourseResource</span><span class="hljs-params">(models.Model)</span>:</span><br>    course = models.ForeignKey(Course,verbose_name=<span class="hljs-string">"课程"</span>)<br>    name = models.CharField(max_length=<span class="hljs-number">100</span>,verbose_name=<span class="hljs-string">"名称"</span>)<br>    download = models.FileField(upload_to=<span class="hljs-string">"course/resource/%Y/%m"</span>,verbose_name=<span class="hljs-string">"资源文件"</span>,max_length=<span class="hljs-number">100</span>)<br>    dd_time = models.DateTimeField(default=datetime.now,verbose_name=<span class="hljs-string">"添加时间"</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name = <span class="hljs-string">"课程资源"</span><br>        verbose_name_plural = verbose_name<br></code></pre></td></tr></table></figure><h2 id="5-课程机构"><a href="#5-课程机构" class="headerlink" title="5. 课程机构"></a>5. 课程机构</h2><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># _*_ coding:utf-8 _*_</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> unicode_literals<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-comment"># Create your models here.</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CityDict</span><span class="hljs-params">(models.Model)</span>:</span><br>    name = models.CharField(max_length=<span class="hljs-number">20</span>,verbose_name=<span class="hljs-string">u"城市"</span>)<br>    desc = models.CharField(max_length=<span class="hljs-number">200</span>,verbose_name=<span class="hljs-string">u"描述"</span>)<br>    add_time = models.DateTimeField(default = datetime.now)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name = <span class="hljs-string">"城市"</span><br>        verbose_name_plural = verbose_name<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CourseOrg</span><span class="hljs-params">(models.Model)</span>:</span><br>    name = models.CharField(max_length=<span class="hljs-number">50</span>,verbose_name=<span class="hljs-string">u"机头名称"</span>)<br>    desc = models.TextField(verbose_name=<span class="hljs-string">u"机构描述"</span>)<br>    click_nums = models.IntegerField(default=<span class="hljs-number">0</span>,verbose_name=<span class="hljs-string">"点击数"</span>)<br>    fav_nums = models.IntegerField(default=<span class="hljs-number">0</span>,verbose_name=<span class="hljs-string">"收藏数"</span>)<br>    image = models.ImageField(upload_to=<span class="hljs-string">"org/%Y/%m"</span>,verbose_name=<span class="hljs-string">u"封面图"</span>)<br>    address = models.CharField(max_length=<span class="hljs-number">150</span>,verbose_name=<span class="hljs-string">u"机构地址"</span>)<br>    city = models.ForeignKey(CityDict,verbose_name=<span class="hljs-string">"所在城市"</span>)<br>    add_time = models.DateTimeField(default = datetime.now)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name = <span class="hljs-string">"课程机构"</span><br>        verbose_name_plural = verbose_name<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacker</span><span class="hljs-params">(models.Model)</span>:</span><br>org = models.ForeignKey(CourseOrg,verbose_name=<span class="hljs-string">u"所属机构"</span>)<br>    name = models.CharField(max_length=<span class="hljs-number">50</span>,verbose_name=<span class="hljs-string">u"教师名"</span>)<br>    work_years = models.IntegerField(default=<span class="hljs-number">0</span>,verbose_name=<span class="hljs-string">"工作年限"</span>)<br>    work_company = models.CharField(max_length=<span class="hljs-number">50</span>,verbose_name=<span class="hljs-string">"就职公司"</span>)<br>    work_position = models.CharField(max_length=<span class="hljs-number">50</span>,verbose_name=<span class="hljs-string">"公司职位"</span>)<br>    point = models.CharField(max_length=<span class="hljs-number">50</span>,verbose_name=<span class="hljs-string">"教学特点"</span>)<br>    click_nums = models.IntegerField(default=<span class="hljs-number">0</span>,verbose_name=<span class="hljs-string">"点击数"</span>)<br>    add_time = models.DateTimeField(default=datetime.now,verbose_name=<span class="hljs-string">"添加时间"</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name=<span class="hljs-string">"教师"</span><br>        verbose_name_plural = verbose_name<br></code></pre></td></tr></table></figure><h2 id="6-用户相关操作"><a href="#6-用户相关操作" class="headerlink" title="6. 用户相关操作"></a>6. 用户相关操作</h2><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># _*_ coding:utf-8 _*_</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> unicode_literals<br><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">from</span> users.models <span class="hljs-keyword">import</span> UserProfile<br><span class="hljs-keyword">from</span> courses.models <span class="hljs-keyword">import</span> Course<br><br><span class="hljs-comment"># Create your models here.</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserAsk</span><span class="hljs-params">(models.Model)</span>:</span> <span class="hljs-comment"># 用户咨询</span><br>    name = models.CharField(max_length=<span class="hljs-number">20</span>,verbose_name=<span class="hljs-string">"姓名"</span>)<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>,verbose_name=<span class="hljs-string">"手机"</span>)<br>    course_name = models.CharField(max_length=<span class="hljs-number">50</span>,verbose_name=<span class="hljs-string">u"课程名"</span>)<br>    add_time = models.DateTimeField(default=datetime.now,verbose_name=<span class="hljs-string">"添加时间"</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name = <span class="hljs-string">u"用户咨询"</span><br>        verbose_name_plural = verbose_name<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CourseComments</span><span class="hljs-params">(models.Model)</span>:</span><br>    <span class="hljs-string">'''课程评论'''</span><br>    user = models.ForeignKey(UserProfile, verbose_name=<span class="hljs-string">u"用户"</span>)<br>    course = models.ForeignKey(Course,verbose_name=<span class="hljs-string">u"课程"</span>)<br>    comments = models.CharField(max_length=<span class="hljs-number">200</span>,verbose_name=<span class="hljs-string">"评论"</span>)<br>    add_time = models.DateTimeField(default=datetime.now,verbose_name=<span class="hljs-string">"添加时间"</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name = <span class="hljs-string">u"课程评论"</span><br>        verbose_name_plural = verbose_name<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserFavorite</span><span class="hljs-params">(models.Model)</span>:</span><br>    user = models.ForeignKey(UserProfile,verbose_name=<span class="hljs-string">u"用户"</span>)<br>    fav_id = models.IntegerField(default = <span class="hljs-number">0</span>,verbose_name=<span class="hljs-string">"数据ID"</span>)<br>    fav_type = models.IntegerField(choices=((<span class="hljs-number">1</span>,<span class="hljs-string">"课程"</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">"课程机构"</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">"讲师"</span>)),default=<span class="hljs-number">1</span>,verbose_name=<span class="hljs-string">u"收藏类型"</span>)<br>    add_time = models.DateTimeField(default=datetime.now,verbose_name=<span class="hljs-string">"添加时间"</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name = <span class="hljs-string">u"用户收藏"</span><br>        verbose_name_plural = verbose_name<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMessage</span><span class="hljs-params">(models.Model)</span>:</span><br>    user = models.IntegerField(default = <span class="hljs-number">0</span>,verbose_name=<span class="hljs-string">"接受用户"</span>)<br>    message = models.CharField(max_length=<span class="hljs-number">500</span>,verbose_name=<span class="hljs-string">"消息内容"</span>)<br>    has_read = models.BooleanField(default=<span class="hljs-keyword">False</span>,verbose_name=<span class="hljs-string">"是否已读"</span>)<br>    add_time = models.DateTimeField(default=datetime.now,verbose_name=<span class="hljs-string">"添加时间"</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name = <span class="hljs-string">u"用户消息"</span><br>        verbose_name_plural = verbose_name<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserCourse</span><span class="hljs-params">(models.Model)</span>:</span><br>    user = models.ForeignKey(UserProfile,verbose_name=<span class="hljs-string">u"用户"</span>)<br>    course = models.ForeignKey(Course,verbose_name=<span class="hljs-string">u"课程"</span>)<br>    add_time = models.DateTimeField(default=datetime.now,verbose_name=<span class="hljs-string">"添加时间"</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        verbose_name = <span class="hljs-string">u"用户课程"</span><br>        verbose_name_plural = verbose_name<br></code></pre></td></tr></table></figure><p>修改：</p><figure class="hljs highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined"># <span class="hljs-type">Application</span> definition<br><br><span class="hljs-type">INSTALLED_APPS</span> = [<br>    <span class="hljs-symbol">'django</span>.contrib.admin',<br>    <span class="hljs-symbol">'django</span>.contrib.auth',<br>    <span class="hljs-symbol">'django</span>.contrib.contenttypes',<br>    <span class="hljs-symbol">'django</span>.contrib.sessions',<br>    <span class="hljs-symbol">'django</span>.contrib.messages',<br>    <span class="hljs-symbol">'django</span>.contrib.staticfiles',<br>    <span class="hljs-symbol">'users'</span>,<br>    <span class="hljs-symbol">'courses'</span>,<br>    <span class="hljs-symbol">'organization'</span>,<br>    <span class="hljs-symbol">'operation'</span><br>]<br></code></pre></td></tr></table></figure><p>生成：</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">python manage<span class="hljs-selector-class">.py</span> makemigrations<br>python manage<span class="hljs-selector-class">.py</span> migrate<br></code></pre></td></tr></table></figure><h3 id="添加搜索路径"><a href="#添加搜索路径" class="headerlink" title="添加搜索路径"></a>添加搜索路径</h3><p>这里我们新建了4个app，为了方便管理，这里统一将它们移到apps文件夹下；这时，为了不修改上面程序，我们将apps这个文件夹添加到Python搜索路径：</p><p>修改settings.py:</p><figure class="hljs highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">import sys<br># Build paths inside the project like this: <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.join(BASE_DIR, ...)<br>BASE_DIR = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.dirname(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.dirname(<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.abspath(__file__)))<br><br>sys.<span class="hljs-built_in">path</span>.<span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.join(BASE_DIR,<span class="hljs-string">'apps'</span>)) # 这样就好啦<br></code></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>搬瓦工笔记1：ssr</title>
      <link href="/2018/05/12/%E6%90%AC%E7%93%A6%E5%B7%A5%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/05/12/%E6%90%AC%E7%93%A6%E5%B7%A5%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>搬瓦工搭建自由上网、多用户管理平台</p><a id="more"></a><p>搬瓦工注册教程自行百度。</p><ol><li><p>注册安装：注册完<a href="https://kiwivm.64clouds.com/main.php" target="_blank" rel="noopener">登录并安装新系统</a>，点击<code>Install new OS</code>，我这里安装的是 <code>ubuntu-18.04-x86_64</code>,等待五分钟，转到<code>Main controls</code>，即可看到新系统安装成功了。</p></li><li><p>初始化密码：点击<code>stop</code>，然后转到<code>Root password modification</code>，即可生成root密码，这里记下来。然后到<code>Main controls</code>打开服务器。（似乎重建虚拟机的时候，会给，但是我忘了。）</p></li><li><p>登录服务器，并配置：端口,IP信息在<code>Main controls</code></p><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">ssh</span> <span class="hljs-selector-tag">-p</span> 26791 <span class="hljs-selector-tag">root</span>@<span class="hljs-keyword">66</span>.<span class="hljs-keyword">78</span>.<span class="hljs-keyword">xxx</span>.<span class="hljs-keyword">356</span> # 登录到服务器<br></code></pre></td></tr></table></figure></li><li><p>搭建shadowsocks</p><blockquote><p><strong> pip install –upgrade pip #pip安装完之后，不要运行这个命令。</strong></p></blockquote><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs undefined">❌ 错误经过：<br><span class="hljs-meta">&gt;</span><span class="bash">apt-get update</span><br><span class="hljs-meta">&gt;</span><span class="bash">apt install python-pip <span class="hljs-comment"># v9.0.1</span></span><br><span class="hljs-meta">&gt;</span><span class="bash">pip install --upgrade pip <span class="hljs-comment"># 10.0.1</span></span><br><span class="hljs-meta">&gt;</span><span class="bash">pip --version</span><br>Traceback (most recent call last):<br>  File "/usr/bin/pip", line 9, in &lt;module&gt;<br>    from pip import main<br>ImportError: cannot import name main<br><span class="hljs-meta"><br>&gt;</span><span class="bash">apt uninstall python-pip</span><br><span class="hljs-meta">&gt;</span><span class="bash">apt install python-pip <span class="hljs-comment"># 又是9.0.1</span></span><br><span class="hljs-meta">&gt;</span><span class="bash">pip --version 错误信息同上。</span><br>🏡 在之前，我只好重新安装了虚拟机，重新安装上面的pip 9.0.1； 这次我只是点了reset；结果pip竟然变成了新版10.0.1，pip的位置似乎变了。不管他<br>🏡 reset 之后：<br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-built_in">which</span> pip</span><br>/usr/local/bin/pip<br><span class="hljs-meta">&gt;</span><span class="bash">pip --version</span><br>pip 10.0.1 from /usr/local/lib/python2.7/dist-packages/pip (python 2.7）<br><span class="hljs-meta">&gt;</span><span class="bash">pip install setuptools</span><br><span class="hljs-meta">&gt;</span><span class="bash">pip install shadowsocks</span><br><span class="hljs-meta">&gt;</span><span class="bash">apt install npm <span class="hljs-comment">#准备安装shadowsocks-manager，进行多用户管理，一步到位。</span></span><br><span class="hljs-meta">&gt;</span><span class="bash">npm i -g shadowsocks-manager</span><br><span class="hljs-meta">&gt;</span><span class="bash">apt-get install shadowsocks-libev <span class="hljs-comment">#安装这个来启动shadowsocks-manager；还可以安装shadowsocks-python</span></span><br><span class="hljs-meta"><br>#</span><span class="bash"> 启动服务：</span><br><span class="hljs-meta">&gt;</span><span class="bash">ss-manager -m aes-256-cfb -u --manager-address 127.0.0.1:6001</span><br><span class="hljs-meta">#</span><span class="bash"> 或者：</span><br><span class="hljs-meta">&gt;</span><span class="bash">ssserver -m aes-256-cfb -p 12345 -k abcedf --manager-address 127.0.0.1:6001 <span class="hljs-comment"># 出错</span></span><br><span class="hljs-meta">#</span><span class="bash"> 解决错误：看下面的参考链接: Kali 2.0 update...</span><br></code></pre></td></tr></table></figure></li><li><p><a href="https://github.com/shadowsocks/shadowsocks-manager/wiki/WebGUI" target="_blank" rel="noopener">多用户管理设置</a>！参考链接，说的非常清楚。</p><p>注意，先要启动shadowsocks；然后启动ssmgr；然后启动ssmgr运行webgui界面。</p><p>也就是说，要启动三次！</p><p>最后打开<a href="http://66.98.118.143:8090" target="_blank" rel="noopener">http://66.98.118.143:8090</a> （这个端口是）<code>webgui:port</code> 中定义的端口。</p><p>需要修改的地方：</p><ul><li><p><code>ss.yml</code>和<code>webgui.yml</code>中的password，修改成自己的。</p></li><li><figure class="hljs highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta"># 这部分的邮箱和密码是用于发送注册验证邮件，重置密码邮件；设置成自己的。</span><br>username: <span class="hljs-string">'username'</span><br>password: <span class="hljs-string">'password'</span><br>host: <span class="hljs-string">'smtp.your-email.com'</span><br></code></pre></td></tr></table></figure></li><li><p>配置支付宝信息</p></li></ul></li><li><p>后续：</p><p>配置mysql；配置中文支持(后两个,配置完重启服务器)；配置默认流量等</p><blockquote><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> 后面两个配置文件都配置成这样：<span class="hljs-comment">#我首先用Navicat创建了ssmgr数据库。这样也可以检测远程连接是否有问题。</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> db:</span><br><span class="hljs-meta">&gt;</span><span class="bash">   host: <span class="hljs-string">'1.1.1.1'</span></span><br><span class="hljs-meta">&gt;</span><span class="bash">   user: <span class="hljs-string">'root'</span></span><br><span class="hljs-meta">&gt;</span><span class="bash">   password: <span class="hljs-string">'abcdefg'</span></span><br><span class="hljs-meta">&gt;</span><span class="bash">   database: <span class="hljs-string">'ssmgr'</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br><span class="hljs-meta">&gt;</span><span class="bash"> 使用mysql时，需要关闭only_full_group_by <span class="hljs-comment"># 当MySQL 版本大于5.7时。</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> mysql&gt; show session variables like <span class="hljs-string">'%sql_mode%'</span>;</span><br><span class="hljs-meta">&gt;</span><span class="bash"> +---------------+-------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="hljs-meta">&gt;</span><span class="bash"> | Variable_name | Value                                                                                                                                     |</span><br><span class="hljs-meta">&gt;</span><span class="bash"> +---------------+-------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="hljs-meta">&gt;</span><span class="bash"> | sql_mode      | ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |</span><br><span class="hljs-meta">&gt;</span><span class="bash"> +---------------+-------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="hljs-meta">&gt;</span><span class="bash"> 1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br><span class="hljs-meta">&gt;</span><span class="bash"> mysql &gt; SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,<span class="hljs-string">'ONLY_FULL_GROUP_BY'</span>,<span class="hljs-string">''</span>));</span><br><span class="hljs-meta">&gt;</span><span class="bash"> mysql &gt; flush privileges; <span class="hljs-comment">#重启mysql之后还要重新进行设置。</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> 重启服务：service mysql restart <span class="hljs-comment"># 没事不要重启。</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br></code></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>参考：</p></blockquote><ul><li><a href="https://www.flyzy2005.com/fan-qiang/shadowsocks/build-shadowsocks-on-vps/" target="_blank" rel="noopener">科学上网：VPS上搭建shadowsocks</a></li></ul><ul><li><a href="https://www.flyzy2005.com/fan-qiang/shadowsocks/ubuntu-bbr-shadowsocks/" target="_blank" rel="noopener">Ubuntu开启BBR加速Shadowsocks</a></li></ul><ul><li><a href="http://bijizhan.com/post/shadowsocks-manager" target="_blank" rel="noopener">shadowsocks-manager 管理工具部署</a></li></ul><ul><li><a href="https://blog.csdn.net/blackfrog_unique/article/details/60320737" target="_blank" rel="noopener">Kali2.0 update到最新版本后安装shadowsocks服务报错问题</a></li><li><a href="https://blog.csdn.net/zhoucheng05_13/article/details/53375161" target="_blank" rel="noopener">云服务器Ubuntu系统下中文乱码问题解决方案</a></li><li><a href="https://askubuntu.com/questions/599808/cannot-set-lc-ctype-to-default-locale-no-such-file-or-directory" target="_blank" rel="noopener">Cannot set LC_CTYPE to default locale: No such file or director</a></li></ul><blockquote><p>备忘：我的最终配置 xx.xx.xx.xx为我的IP地址，aaaabbbb 为我的密码</p></blockquote><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ cat /root/.ssmgr/ss<span class="hljs-selector-class">.yml</span><br>type: s<br><br>shadowsocks:<br>  <span class="hljs-selector-tag">address</span>: <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">4000</span><br>manager:<br>  <span class="hljs-selector-tag">address</span>: <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">4001</span><br>  password: <span class="hljs-string">'jingyue949'</span><br>db:<br>  host:  xx<span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span><span class="hljs-selector-class">.xx</span><br>  user: <span class="hljs-string">'root'</span><br>  password: <span class="hljs-string">'aaaabbbb'</span><br>  database: <span class="hljs-string">'ssmgr'</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">type</span>: m<br><br><span class="less"><span class="hljs-attribute">manager</span>:<br>  <span class="hljs-attribute">address</span>: xx.xx.xx.<span class="hljs-attribute">xx</span>:<span class="hljs-number">4001</span><br>  <span class="hljs-attribute">password</span>: <span class="hljs-string">'aaaabbbb'</span><br><br><span class="hljs-attribute">plugins</span>:<br>  <span class="hljs-attribute">flowSaver</span>:<br>    <span class="hljs-attribute">use</span>: true<br>  <span class="hljs-attribute">user</span>:<br>    <span class="hljs-attribute">use</span>: true<br>  <span class="hljs-attribute">account</span>:<br>    <span class="hljs-attribute">use</span>: true<br>  <span class="hljs-attribute">macAccount</span>:<br>    <span class="hljs-attribute">use</span>: true<br>  <span class="hljs-attribute">group</span>:<br>    <span class="hljs-attribute">use</span>: true<br>  <span class="hljs-attribute">email</span>:<br>    <span class="hljs-attribute">use</span>: true<br>    <span class="hljs-attribute">username</span>: <span class="hljs-string">'158855945@qq.com'</span><br>    <span class="hljs-attribute">password</span>: <span class="hljs-string">'xx.xx.xx.xx'</span><br>    <span class="hljs-attribute">host</span>: <span class="hljs-string">'smtp.qq.com'</span><br>  <span class="hljs-attribute">webgui</span>:<br>    <span class="hljs-attribute">use</span>: true<br>    <span class="hljs-attribute">host</span>: <span class="hljs-string">'0.0.0.0'</span><br>    <span class="hljs-attribute">port</span>: <span class="hljs-string">'8090'</span><br>    <span class="hljs-attribute">site</span>: <span class="hljs-string">'http://yourwebsite.com'</span><br>    # <span class="hljs-attribute">googleAnalytics</span>: <span class="hljs-string">'UA-xxxxxxxx-x'</span><br>    <span class="hljs-attribute">gcmSenderId</span>: <span class="hljs-string">'456102641793'</span><br>    <span class="hljs-attribute">gcmAPIKey</span>: <span class="hljs-string">'AAAAGzzdqrE:XXXXXXXXXXXXXX'</span><br><br><span class="hljs-attribute">db</span>:<br>  <span class="hljs-attribute">host</span>: xx.xx.xx.xx<br>  <span class="hljs-attribute">user</span>: <span class="hljs-string">'root'</span><br>  <span class="hljs-attribute">password</span>: <span class="hljs-string">'aaaabbbb'</span><br>  <span class="hljs-attribute">database</span>: <span class="hljs-string">'ssmgr'</span></span><br></code></pre></td></tr></table></figure><figure class="hljs highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ cat start_ss.sh 运行脚本，开启服务<br><span class="hljs-meta">#用来执行网络代理服务！全部执行完之后，网页访问http:<span class="hljs-comment">//xx.xx.xx.xx:8090/</span></span><br>echo <span class="hljs-string">"</span><br>ss-manager -m aes-<span class="hljs-number">256</span>-cfb -u --manager-address <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">4000</span> <span class="hljs-meta">&amp;</span><br>ssmgr -c /root/.ssmgr/ss.yml <span class="hljs-meta">&amp;</span><br>ssmgr -c /root/.ssmgr/webgui.yml <span class="hljs-meta">&amp;</span><br><span class="hljs-string">"</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 搬瓦工 </tag>
            
            <tag> VPN </tag>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac安装MySQL &amp; Ubuntu下安装MySQL记录</title>
      <link href="/2018/05/08/Mac%E5%AE%89%E8%A3%85MySQL/"/>
      <url>/2018/05/08/Mac%E5%AE%89%E8%A3%85MySQL/</url>
      <content type="html"><![CDATA[<p>Mac 下安装MySQL，碰到了很多坑，这里记录一下。<br><a id="more"></a></p><p>碰到很多问题，网上的教程没有完整的解决。</p><figure class="hljs highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Navicat错误：2003 - Can't connect to MySQL server on '127.0.0.1' (61 "Connection refused")<br><br><span class="hljs-keyword">ERROR </span>1045 (28000): Access denied for user 'mysql'@'localhost' (using password: NO)<br><br>$mysqld start<br>mysqld: Can't change dir to '/usr/local/mysql<span class="hljs-string">-8</span>.0.11-macos10.13-x86_64/data/' (OS errno 13 - Permission denied)<br>2018<span class="hljs-string">-05</span><span class="hljs-string">-08</span>T05:38:56.432352Z 0 [System] [MY<span class="hljs-string">-010116</span>] [Server] /usr/local/mysql<span class="hljs-string">-8</span>.0.11-macos10.13-x86_64/bin/mysqld (mysqld 8.0.11) starting as process 60460<br>2018<span class="hljs-string">-05</span><span class="hljs-string">-08</span>T05:38:56.450820Z 0 [Warning] [MY<span class="hljs-string">-010091</span>] [Server] Can't create test file /usr/local/mysql<span class="hljs-string">-8</span>.0.11-macos10.13-x86_64/data/research-imac72.lower-test<br>2018<span class="hljs-string">-05</span><span class="hljs-string">-08</span>T05:38:56.450857Z 0 [Warning] [MY<span class="hljs-string">-010159</span>] [Server] Setting lower_case_table_names=2 because file system for /usr/local/mysql<span class="hljs-string">-8</span>.0.11-macos10.13-x86_64/data/ is case insensitive<br>2018<span class="hljs-string">-05</span><span class="hljs-string">-08</span>T05:38:56.451089Z 0 [ERROR] [MY<span class="hljs-string">-010172</span>] [Server] failed to set datadir to /usr/local/mysql<span class="hljs-string">-8</span>.0.11-macos10.13-x86_64/data/<br>2018<span class="hljs-string">-05</span><span class="hljs-string">-08</span>T05:38:56.451102Z 0 [ERROR] [MY<span class="hljs-string">-010119</span>] [Server] Aborting<br>2018<span class="hljs-string">-05</span><span class="hljs-string">-08</span>T05:38:56.453321Z 0 [System] [MY<span class="hljs-string">-010910</span>] [Server] /usr/local/mysql<span class="hljs-string">-8</span>.0.11-macos10.13-x86_64/bin/mysqld: Shutdown complete (mysqld 8.0.11)  MySQL Community Server - GPL.<br><br>$sudo chmod -R 755 /usr/local/mysql<span class="hljs-string">-8</span>.0.11-macos10.13-x86_64/data/<br>$ mysqld start<br>2018<span class="hljs-string">-05</span><span class="hljs-string">-08</span>T05:40:10.060603Z 0 [System] [MY<span class="hljs-string">-010116</span>] [Server] /usr/local/mysql<span class="hljs-string">-8</span>.0.11-macos10.13-x86_64/bin/mysqld (mysqld 8.0.11) starting as process 60542<br>2018<span class="hljs-string">-05</span><span class="hljs-string">-08</span>T05:40:10.064303Z 0 [Warning] [MY<span class="hljs-string">-010091</span>] [Server] Can't create test file /usr/local/mysql<span class="hljs-string">-8</span>.0.11-macos10.13-x86_64/data/research-imac72.lower-test<br>2018<span class="hljs-string">-05</span><span class="hljs-string">-08</span>T05:40:10.064319Z 0 [Warning] [MY<span class="hljs-string">-010159</span>] [Server] Setting lower_case_table_names=2 because file system for /usr/local/mysql<span class="hljs-string">-8</span>.0.11-macos10.13-x86_64/data/ is case insensitive<br>mysqld: File './binlog.index' not found (OS errno 13 - Permission denied)<br>2018<span class="hljs-string">-05</span><span class="hljs-string">-08</span>T05:40:10.064832Z 0 [ERROR] [MY<span class="hljs-string">-010119</span>] [Server] Aborting<br>2018<span class="hljs-string">-05</span><span class="hljs-string">-08</span>T05:40:10.065076Z 0 [System] [MY<span class="hljs-string">-010910</span>] [Server] /usr/local/mysql<span class="hljs-string">-8</span>.0.11-macos10.13-x86_64/bin/mysqld: Shutdown complete (mysqld 8.0.11)  MySQL Community Server - GPL.<br></code></pre></td></tr></table></figure><figure class="hljs highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$brew install mysql<br>......<br>🍺  /usr/local/Cellar/openssl/1.0.2n: 1,792 files, 12.3MB<br>=<span class="ruby">=&gt; Installing mysql<br></span>=<span class="ruby">=&gt; Downloading <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/homebrew.bintray.com/bottles</span><span class="hljs-regexp">/mysql-5.7.21.high_sierra.bottle.tar.gz<br></span></span>######################################################################## 100.0%<br>=<span class="ruby"><span class="hljs-regexp">=&gt; Pouring mysql-5.7.21.high_sierra.bottle.tar.gz<br></span></span>=<span class="ruby"><span class="hljs-regexp">=&gt; /usr</span><span class="hljs-regexp">/local/</span>Cellar/mysql/<span class="hljs-number">5.7</span>.<span class="hljs-number">21</span>/bin/mysqld --initialize-insecure --user=kaigedong --basedir=<span class="hljs-regexp">/usr/local</span><span class="hljs-regexp">/Cellar/mysql</span><span class="hljs-regexp">/5.7.21 --datadir=/usr</span><span class="hljs-regexp">/local/var</span><span class="hljs-regexp">/mysql --tmpdir=/tmp</span><br></span>=<span class="ruby">=&gt; Caveats<br></span>We've installed your MySQL database without a root password. To secure it run:<br>    mysql_secure_installation<br><br>MySQL is configured to only allow connections from localhost by default<br><br>To connect run:<br>    mysql -uroot<br><br>To have launchd start mysql now and restart at login:<br>  brew services start mysql<br>Or, if you don't want/need a background service you can just run:<br>  mysql.server start<br>=<span class="ruby">=&gt; Summary<br></span>🍺  /usr/local/Cellar/mysql/5.7.21: 323 files, 233.9MB<br><br>$mysql_secure_installation # 按要求更改密码，注意，这里最好选0，因为选了1或者2，后面的密码需要满足这个安全条件。<br></code></pre></td></tr></table></figure><blockquote><p>之前的错误：使用官网下载的8.0版本，手动安装，导致各种文件夹权限问题，端口问题，my.cnf 不存在问题，PID not found问题，由于版本较新，网上教程很少。这里用brew 安装之前的稳定版本，其配置文件在通过 </p><p>brew 安装的 MySQL 的配置文件为：<code>/usr/local/etc/my.cnf</code>，将<code>bind-address = 127.0.0.1</code>注释掉，然后在使用Navicat，连接成功。<br>过段时间在更新到8 ；）</p></blockquote><h2 id="Ubuntu部分："><a href="#Ubuntu部分：" class="headerlink" title="Ubuntu部分："></a>Ubuntu部分：</h2><ol><li><p>安装</p><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sudo apt-get <span class="hljs-keyword">install</span> mysql-<span class="hljs-keyword">server</span><br>sudo apt <span class="hljs-keyword">install</span> mysql-<span class="hljs-keyword">client</span><br>sudo apt <span class="hljs-keyword">install</span> libmysqlclient-dev<br><br>sudo netstat -tap | grep mysql <br>$ netstat -tap | grep mysql # 下面的信息，则显示安装成功。<br>tcp        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> localhost:mysql         <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:*               LISTEN      <span class="hljs-number">1082</span>/mysqld<br><br>vi /etc/mysql/mysql.conf.d/mysqld.cnf<br>注释掉bind-address = <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>； 使MySQL允许远程访问<br><br>MySQL 初始用户名密码在：/etc/mysql/debian.cnf<br>用mysql -u debian-<span class="hljs-keyword">sys</span>-maint -p 进行登录；<br>然后：<span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'localhost'</span> = <span class="hljs-keyword">password</span>(<span class="hljs-string">'yourpass'</span>);<br>然后进入mysql服务，执行授权命令：<br><span class="hljs-keyword">grant</span> all <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> root@<span class="hljs-string">'%'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'你的密码'</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> <span class="hljs-keyword">option</span>;<br><br><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>; //刷新配置<br>然后退出mysql: exit<br>然后重启服务：service mysql restart<br></code></pre></td></tr></table></figure></li></ol><ul><li><p><a href="https://www.linuxidc.com/Linux/2017-06/144805.htm" target="_blank" rel="noopener">Ubuntu 16.04下安装MySQL</a></p></li><li><p><a href="https://blog.csdn.net/theonegis/article/details/51810063" target="_blank" rel="noopener">Ubuntu安装MySQL密码初始化问题</a></p></li><li><p><a href="https://www.cnblogs.com/xyzdw/archive/2011/08/11/2135227.html" target="_blank" rel="noopener">报错:1130-host … is not allowed to connect to this MySql server 开放mysql远程连接 不使用localhost</a></p></li><li><p><a href="http://www.cnblogs.com/leolztang/p/5094930.html" target="_blank" rel="noopener">MySQL ERROR 1698 (28000) 错误</a></p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>强化学习实战：从零开始下五子棋</title>
      <link href="/2018/04/19/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E4%B8%8B%E4%BA%94%E5%AD%90%E6%A3%8B/"/>
      <url>/2018/04/19/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E4%B8%8B%E4%BA%94%E5%AD%90%E6%A3%8B/</url>
      <content type="html"><![CDATA[<a id="more"></a><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/32089487" target="_blank" rel="noopener">AlphaZero实战：从零学下五子棋（附代码）</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>增强学习之DQN 算法</title>
      <link href="/2018/04/17/%E5%A2%9E%E5%BC%BA%E5%AD%A6%E4%B9%A0%E4%B9%8BDQN-%E7%AE%97%E6%B3%95/"/>
      <url>/2018/04/17/%E5%A2%9E%E5%BC%BA%E5%AD%A6%E4%B9%A0%E4%B9%8BDQN-%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote><p>DQN 是第一个成功地将深度学习和强化学习结合起来的模型，启发了后续一系列的工作。这些后续工作中比较有名的有 <code>Double DQN</code>, <code>Prioritized Replay</code> 和 <code>Dueling Network</code>。</p></blockquote><a id="more"></a><blockquote><p>DQN 算法的主要做法是 <code>Experience Replay</code>，其将系统探索环境得到的数据储存起来，然后随机采样样本更新深度神经网络的参数。(见上一篇)</p></blockquote><ul><li>超级推荐<a href="https://zhuanlan.zhihu.com/p/21421729?refer=intelligentunit" target="_blank" rel="noopener">DQN从入门到放弃5 深度解读DQN算法</a></li></ul><h2 id="Q-learning-的维数灾难"><a href="#Q-learning-的维数灾难" class="headerlink" title="Q learning 的维数灾难"></a>Q learning 的维数灾难</h2><p>在上面的简单分析中，我们使用表格来表示Q(s,a)，但是这个在现实的很多问题上是几乎不可行的，因为状态实在是太多。使用表格的方式根本存不下。</p><p>举Atari为例子。</p><p><img src="/pic/2018-04/17-18.jpg" alt=""></p><p>计算机玩Atari游戏的要求是输入原始图像数据，也就是210x160像素的图片，然后输出几个按键动作。总之就是和人类的要求一样，纯视觉输入，然后让计算机自己玩游戏。那么这种情况下，到底有多少种状态呢？有可能每一秒钟的状态都不一样。因为，从理论上看，如果每一个像素都有256种选择，那么就有：256^210x160^</p><p>这简直是天文数字。所以，我们是不可能通过表格来存储状态的。我们有必要对状态的维度进行压缩，解决办法就是 价值函数近似<code>Value Function Approximation</code></p><h2 id="价值函数近似-Value-Function-Approximation"><a href="#价值函数近似-Value-Function-Approximation" class="headerlink" title="价值函数近似 Value Function Approximation"></a>价值函数近似 Value Function Approximation</h2><p>什么是价值函数近似呢？说起来很简单，就是用一个函数来表示Q(s,a)。即 Q(s,a) = f(s,a)</p><p>f可以是任意类型的函数，比如线性函数：</p><p>Q(s, a) = w~1~s + w~2~s + b，其中w~1~，w~2~ ，b是函数f的参数。</p><p>大家看到了没有，通过函数表示，我们就可以无所谓s到底是多大的维度，反正最后都通过矩阵运算降维输出为单值的Q。</p><p>这就是价值函数近似的基本思路。</p><p>如果我们就用<img src="https://www.zhihu.com/equation?tex=w" alt="w">来统一表示函数f的参数，那么就有 Q(s, a) = f(s,a,w)</p><p>为什么叫近似，因为我们并不知道Q值的实际分布情况，本质上就是用一个函数来近似Q值的分布，所以，也可以说是</p><p>Q(s, a) ≈ f(s, a, w)</p><h2 id="高维状态输入，低维动作输出的表示问题"><a href="#高维状态输入，低维动作输出的表示问题" class="headerlink" title="高维状态输入，低维动作输出的表示问题"></a>高维状态输入，低维动作输出的表示问题</h2><p>对于Atari游戏而言，这是一个高维状态输入（原始图像），低维动作输出（只有几个离散的动作，比如上下左右）。那么怎么来表示这个函数f呢？</p><p>难道把高维s和低维a加在一起作为输入吗？</p><p>必须承认这样也是可以的。但总感觉有点别扭。特别是，其实我们只需要对高维状态进行降维，而不需要对动作也进行降维处理。</p><p>那么，有什么更好的表示方法吗？</p><p>当然有，怎么做呢？</p><p>其实就是<img src="https://www.zhihu.com/equation?tex=Q%28s%29+%5Capprox+f%28s%2Cw%29" alt="Q(s) \approx f(s,w)">，只把状态s作为输入，但是输出的时候输出每一个动作的Q值，也就是输出一个向量<img src="https://www.zhihu.com/equation?tex=%5BQ%28s%2Ca_1%29%2CQ%28s%2Ca_2%29%2CQ%28s%2Ca_3%29%2C...%2CQ%28s%2Ca_n%29%5D" alt="[Q(s,a_1),Q(s,a_2),Q(s,a_3),...,Q(s,a_n)]">，记住这里输出是一个值，只不过是包含了所有动作的Q值的向量而已。这样我们就只要输入状态s，而且还同时可以得到所有的动作Q值，也将更方便的进行Q-Learning中动作的选择与Q值更新（这一点后面大家会理解）。</p><h2 id="Q值神经网络化"><a href="#Q值神经网络化" class="headerlink" title="Q值神经网络化"></a>Q值神经网络化</h2><p>终于到了和深度学习相结合的一步了！</p><p>意思很清楚，就是我们用一个深度神经网络来表示这个函数f。</p><p><img src="/pic/2018-04/17-19.jpg" alt=""></p><p>以DQN为例，输入是经过处理的4个连续的84x84图像，然后经过两个卷积层，两个全连接层，最后输出包含每一个动作Q值的向量。</p><p>对于这个网络的结构，针对不同的问题可以有不同的设置。总之，用神经网络来表示Q值非常简单，Q值也就是变成用Q网络（Q-Network）来表示。接下来就到了很多人都会困惑的问题，那就是</p><blockquote><p><strong>怎么训练Q网络？？？</strong></p></blockquote><h2 id="DQN算法"><a href="#DQN算法" class="headerlink" title="DQN算法"></a>DQN算法</h2><p>我们知道，神经网络的训练是一个最优化问题，最优化一个损失函数loss function，也就是标签和网络输出的偏差，目标是让损失函数最小化。为此，我们需要有样本，巨量的有标签数据，然后通过反向传播使用梯度下降的方法来更新神经网络的参数。</p><blockquote><p>所以，要训练Q网络，我们要能够为<code>Q网络提供有标签的样本</code>。</p><p>那么如何为Q网络提供有标签的样本？</p></blockquote><p>答案就是利用Q-Learning算法。</p><p>大家回想一下Q-Learning算法，Q值的更新依靠什么？依靠的是利用Reward和Q计算出来的目标Q值：</p><p>因此，我们把目标Q值作为标签不就完了？我们的目标不就是让Q值趋近于目标Q值吗？</p><p>因此，Q网络训练的损失函数就是</p><p><img src="/pic/2018-04/17-20.svg" alt=""></p><p>因此，我们把目标Q值作为标签不就完了？我们的目标不就是让Q值趋近于目标Q值吗？</p><p>因此，Q网络训练的损失函数就是</p><p><img src="/pic/2018-04/17-21.jpg" alt=""></p><p>上面公式是s’, a’ 即下一个状态和动作。这里用了<code>David Silver</code>的表示方式，看起来比较清晰。</p><p>既然确定了损失函数，也就是cost，确定了获取样本的方式。那么DQN的整个算法也就成型了！</p><p>接下来就是具体如何训练的问题了！</p><h2 id="DQN训练"><a href="#DQN训练" class="headerlink" title="DQN训练"></a>DQN训练</h2><p>我们这里分析第一个版本的DQN，也就是NIPS 2013提出的DQN。</p><p>具体的算法主要涉及到<code>Experience Replay</code>，也就是<strong><code>经验池</code></strong>的技巧，就是<code>如何存储样本及采样</code>问题。</p><p>由于玩Atari采集的样本是一个时间序列，样本之间具有连续性，如果每次得到样本就更新Q值，受样本分布影响，效果会不好。因此，一个很直接的想法就是把样本先存起来，然后随机采样如何？这就是Experience Replay的意思。按照脑科学的观点，人的大脑也具有这样的机制，就是在回忆中学习。</p><p>那么上面的算法看起来那么长，其实就是反复试验，然后存储数据。接下来数据存到一定程度，就每次随机采用数据，进行梯度下降！</p><p>也就是</p><blockquote><p>在DQN中增强学习Q-Learning算法和深度学习的SGD训练是同步进行的！</p></blockquote><p>通过Q-Learning获取无限量的训练样本，然后对神经网络进行训练。</p><p>样本的获取关键是计算y，也就是标签。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/21421729?refer=intelligentunit" target="_blank" rel="noopener">DQN从入门到放弃5 深度解读DQN算法</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 增强学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>增强学习之DQN介绍</title>
      <link href="/2018/04/17/%E5%A2%9E%E5%BC%BA%E5%AD%A6%E4%B9%A0%E4%B9%8BDQN/"/>
      <url>/2018/04/17/%E5%A2%9E%E5%BC%BA%E5%AD%A6%E4%B9%A0%E4%B9%8BDQN/</url>
      <content type="html"><![CDATA[<ul><li>强化学习和深度学习结合</li><li>神经网络的作用</li><li>Deep Q Network(DQN算法)</li><li>后续改进方法</li></ul><a id="more"></a><blockquote><p>融合了神经网络和 Q learning 的方法, 名字叫做 Deep Q Network.</p></blockquote><h2 id="1-强化学习和深度学习结合"><a href="#1-强化学习和深度学习结合" class="headerlink" title="1. 强化学习和深度学习结合"></a>1. 强化学习和深度学习结合</h2><blockquote><p>机器学习=目标+表示+优化。</p></blockquote><p>目标层面的工作关心应该学习到什么样的模型，强化学习应该学习到使得激励函数最大的模型。</p><p>表示方面的工作关心数据表示成什么样有利于学习，深度学习是最近几年兴起的表示方法，在图像和语音的表示方面有很好的效果。</p><p>深度强化学习则是两者结合在一起，深度学习负责表示马尔科夫决策过程的状态，强化学习负责把控学习方向。</p><blockquote><p>深度强化学习有<strong>三条线</strong>：分别是基于价值的深度强化学习，基于策略的深度强化学习和基于模型的深度强化学习。</p></blockquote><p>这三种不同类型的深度强化学习用深度神经网络替代了强化学习的不同部件。</p><p>基于价值的深度强化学习本质上是一个 Q Learning 算法，目标是估计最优策略的 Q 值。 不同的地方在于 Q Learning 中价值函数近似用了深度神经网络。比如 DQN 在 Atari 游戏任务中，输入是 Atari 的游戏画面，因此使用适合图像处理的卷积神经网络（Convolutional Neural Network，CNN）。下图就是 DQN 的框架图。</p><p><img src="/pic/2018-04/17-07.png" alt="DQN 的框架图"></p><h2 id="2-神经网络的作用"><a href="#2-神经网络的作用" class="headerlink" title="2. 神经网络的作用"></a>2. 神经网络的作用</h2><p>我们使用表格来存储每一个状态 state, 和在这个 state 每个行为 action 所拥有的 Q 值. 而当今问题是在太复杂, 状态可以多到比天上的星星还多(比如下围棋). 如果全用表格来存储它们, 恐怕我们的计算机有再大的内存都不够, 而且每次在这么大的表格中搜索对应的状态也是一件很耗时的事. 不过, 在机器学习中, 有一种方法对这种事情很在行, 那就是神经网络. <strong>我们可以将状态和动作当成神经网络的输入, 然后经过神经网络分析后得到动作的 Q 值</strong>, 这样我们就没必要在表格中记录 Q 值, 而是直接使用神经网络生成 Q 值. 还有一种形式的是这样, 我们<strong>也能只输入状态值, 输出所有的动作值, 然后按照 Q learning 的原则, 直接选择拥有最大值的动作当做下一步要做的动作</strong>. 我们可以想象, 神经网络接受外部的信息, 相当于眼睛鼻子耳朵收集信息, 然后通过大脑加工输出每种动作的值, 最后通过强化学习的方式选择动作.</p><h2 id="3-Deep-Q-Network-DQN算法"><a href="#3-Deep-Q-Network-DQN算法" class="headerlink" title="3. Deep Q Network(DQN算法)"></a>3. Deep Q Network(DQN算法)</h2><p>当然了基于价值的深度强化学习不仅仅是把 Q Learning 中的价值函数用深度神经网络近似，还做了其他改进。</p><p>这个算法就是著名的 DQN 算法，由 DeepMind 在 2013 年在 NIPS 提出。DQN 算法的主要做法是 <code>Experience Replay</code>，其将系统探索环境得到的数据储存起来，然后随机采样样本更新深度神经网络的参数。</p><p><img src="/pic/2018-04/17-08.png" alt=""></p><p>Experience Replay 的动机是：1）深度神经网络作为有监督学习模型，要求数据满足独立同分布，2）但 Q Learning 算法得到的样本前后是有关系的。为了打破数据之间的关联性，Experience Replay 方法通过<code>存储-采样</code>的方法将这个关联性打破了。</p><p>DeepMind 在 2015 年初在 Nature 上发布了文章，引入了 Target Q 的概念，进一步打破数据关联性。Target Q 的概念是用旧的深度神经网络 去得到目标值，下面是带有 Target Q 的 Q Learning 的优化目标。</p><p><img src="/pic/2018-04/17-09.png" alt=""></p><p>Nature 论文上的<a href="http://www.algorithmdog.com/drl" target="_blank" rel="noopener">结果</a>可以看到，打破数据关联性确实很大程度地提高了效果。</p><h2 id="4-后续改进方法"><a href="#4-后续改进方法" class="headerlink" title="4. 后续改进方法"></a>4. 后续改进方法</h2><p>DQN 是第一个成功地将深度学习和强化学习结合起来的模型，启发了后续一系列的工作。这些后续工作中比较有名的有 Double DQN, Prioritized Replay 和 Dueling Network。</p><h3 id="4-1-Double-DQN"><a href="#4-1-Double-DQN" class="headerlink" title="4.1 Double DQN"></a>4.1 Double DQN</h3><p>Thrun 和 Schwartz 在古老的 1993 年观察到 Q-Learning 的<a href="S. Thrun and A. Schwartz. Issues in using function approximation for reinforcement learning. In M. Mozer, P. Smolensky, D. Touretzky, J. Elman, and A. Weigend, editors, Proceedings of the 1993 Connectionist Models Summer School, Hillsdale, NJ, 1993. Lawrence Erlbaum.">过优化 (overoptimism)</a> 现象 ，并且指出过优化现象是由于 Q-Learning 算法中的 max 操作造成的。令 (Q^{target}(s,a)) 是目标 Q 值；我们用了价值函数近似， 是近似 Q 值；令 Y 为近似值和目标之间的误差，即</p><p><img src="/pic/2018-04/17-10.png" alt=""></p><p>Q-learning 算法更新步骤将所有的 Q 值更新一遍，这个时候近似值和目标值之间的差值</p><p><img src="/pic/2018-04/17-11.png" alt=""></p><p>其中 。这时候我们发现，即使 也就是一开始是无偏的近似， Q Learning 中的 max 操作也会导致 E[Z] &gt; 0。这就是过优化现象。为了解决这个问题，Thrun 和 Schwartz 提出了 Double Q 的想法。</p><p>Hasselt 等进一步分析了过优化的现象，并将 Double Q 的想法应用在 DQN 上，从而提出了 Double DQN。Double DQN 训练两个 Q 网络，一个负责选择动作，另一个负责计算。两个 Q 网络交替进行更新，具体算法如下所示。</p><p><img src="/pic/2018-04/17-12.png" alt=""></p><p>下图是 Hasselt 在论文中报告的实验结果。从<a href="http://www.algorithmdog.com/drl" target="_blank" rel="noopener">实验结果</a>来看，Double DQN 拥有比 DQN 好的效果。</p><h3 id="4-2-Prioritized-Replay"><a href="#4-2-Prioritized-Replay" class="headerlink" title="4.2 Prioritized Replay"></a>4.2 Prioritized Replay</h3><p>DQN 用了 <code>Experience Replay</code> 算法，将系统探索环境获得的样本保存起来，然后从中采样出样本以更新模型参数。对于采样，一个常见的改进是改变采样的概率。<a href="Schaul T, Quan J, Antonoglou I, et al. Prioritized experience replay[J]. arXiv preprint arXiv:1511.05952, 2015.">Prioritized Replay</a>便是采取了这个策略，采用 TD-err 作为评判标准进行采样。</p><p><img src="/pic/2018-04/17-13.png" alt=""></p><p>下图是论文中采用的例子。例子中有 n 个状态，在每个状态系统一半概率采取 “正确” 或者一半概率 “错误”，图中红色虚线是错误动作。一旦系统采取错误动作，游戏结束。只有第 n 个状态 “正确” 朝向第 1 个状态，系统获得奖励 1。在这个例子训练过程中，系统产生无效样本，导致训练效率底下。如果采用 TD-err 作为评判标准进行采样，能够缓解这个问题。</p><p><img src="/pic/2018-04/17-14.png" alt=""></p><p>论文报告了 Prioritized Replay 算法效果。Prioritized Replay 效果很好。</p><h3 id="4-3-Dueling-Network"><a href="#4-3-Dueling-Network" class="headerlink" title="4.3 Dueling Network"></a>4.3 Dueling Network</h3><p>Baird 在 1993 年提出将 Q 值分解为价值 (Value) 和优势 (Advantage) <a href="Baird, L.C. Advantage updating. Technical Report WLTR-93-1146,Wright-Patterson Air Force Base, 1993.">文章</a>。</p><p><img src="/pic/2018-04/17-15.png" alt=""></p><p>这个想法可以用下面的例子说明 [5]。上面两张图表示，前方无车时，选择什么动作并不会太影响行车状态。这个时候系统关注状态的价值，而对影响动作优势不是很关心。下面两张图表示，前方有车时，选择动作至关重要。这个时候系统需要关心优势了。这个例子说明，Q 值分解为价值和优势更能刻画强化学习的过程。</p><p><img src="/pic/2018-04/17-16.png" alt=""></p><p>Wang Z 将这个 idea 应用在深度强化学习中，提出了下面的网络结构 <a href="Wang Z, de Freitas N, Lanctot M. Dueling network architectures for deep reinforcement learning[J]. arXiv preprint arXiv:1511.06581, 2015.">5</a>。</p><p><img src="/pic/2018-04/17-17.png" alt=""></p><p>这种网络结构很简单，但获得了很好的效果。</p><p>Dueling Network 是一个深度学习的网络结构。它可以结合之前介绍的 <code>Experience Replay</code>、 <code>Double DQN</code> 和 <code>Prioritized Replay</code> 等方法。 作者在论文中报告 <code>Dueling Network</code> 和 <code>Prioritized Replay</code> 结合的效果最好。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.algorithmdog.com/drl" target="_blank" rel="noopener">强化学习系列之九:Deep Q Network (DQN)</a></li><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/4-1-A-DQN/" target="_blank" rel="noopener">什么是 DQN</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 增强学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>增强学习之Sarsa(lambda)</title>
      <link href="/2018/04/17/%E5%A2%9E%E5%BC%BA%E5%AD%A6%E4%B9%A0%E4%B9%8BSarsa-lambda/"/>
      <url>/2018/04/17/%E5%A2%9E%E5%BC%BA%E5%AD%A6%E4%B9%A0%E4%B9%8BSarsa-lambda/</url>
      <content type="html"><![CDATA[<ul><li>基于Sarsa的一种提速方法</li><li>回合更新的优势</li><li>Lambda 参数</li><li>Sarsa 算法步骤</li></ul><a id="more"></a><p>莫凡教程讲的很好，看<a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/3-3-A-sarsa-lambda/" target="_blank" rel="noopener">参考</a>。</p><h2 id="单步更新-and-回合更新"><a href="#单步更新-and-回合更新" class="headerlink" title="单步更新 and 回合更新"></a>单步更新 and 回合更新</h2><p>虽然Sarsa 每一步都在更新, 但是在没有达到终点的时候, 现在站着的这一步也没有得到任何更新, 也就是直到终点时, 我们才为上一步更新为；而上一步之前的所有步都被认为和终点无关。回合更新虽然我要等到这回合结束, 才开始对本回合所经历的所有步都添加更新, 但是这所有的步都是和终点有关系的, 都是为了到终点要学习的步, 所以每一个步骤在下回合被选则的几率又高了一些. 在这种角度来看, 回合更新似乎会有效率一些.</p><h2 id="有时迷茫"><a href="#有时迷茫" class="headerlink" title="有时迷茫"></a>有时迷茫</h2><p><img src="/pic/2018-04/04-17-03.png" alt=""></p><p> 还是使用单步更新的方法在每一步都进行更新, 但是同时记下之前的寻宝之路. 你可以想像, 每走一步, 插上一个小旗子, 这样我们就能清楚的知道除了最近的一步, 找到宝物时还需要更新哪些步了. 不过, 有时候情况可能没有这么乐观. 开始的几次, 因为完全没有头绪, 我可能在原地打转了很久, 然后才找到宝藏, 那些重复的脚步真的对我拿到宝藏很有必要吗? 答案我们都知道. 所以Sarsa(lambda)就来拯救你啦.</p><h2 id="Lambda-的含义与取值"><a href="#Lambda-的含义与取值" class="headerlink" title="Lambda 的含义与取值"></a>Lambda 的含义与取值</h2><p><img src="/pic/2018-04/04-17-04.png" alt="Lambda的含义"></p><p>其实 lambda 就是一个衰变值, 他可以让你知道离奖励越远的步可能并不是让你最快拿到奖励的步, 所以我们想象我们站在宝藏的位置, 回头看看我们走过的寻宝之路, 离宝藏越近的脚印越看得清, 远处的脚印太渺小, 我们都很难看清, 那我们就索性记下离宝藏越近的脚印越重要, 越需要被好好的更新. 和之前我们提到过的 奖励衰减值 gamma 一样, lambda 是脚步衰减值, 都是一个在 0 和 1 之间的数.</p><p><img src="/pic/2018-04/04-17-05.png" alt="Lambda的取值"></p><p>当 lambda 取0, 就变成了 Sarsa 的单步更新, 当 lambda 取 1, 就变成了回合更新, 对所有步更新的力度都是一样. 当 lambda 在 0 和 1 之间, 取值越大, 离宝藏越近的步更新力度越大. 这样我们就不用受限于单步更新的每次只能更新最近的一步, 我们可以更有效率的更新所有相关步了.</p><h2 id="Sarsa-Lambda-算法步骤"><a href="#Sarsa-Lambda-算法步骤" class="headerlink" title="Sarsa Lambda 算法步骤"></a>Sarsa Lambda 算法步骤</h2><p><img src="/pic/2018-04/04-17-06.png" alt="Sarsa 算法步骤"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/3-3-A-sarsa-lambda/" target="_blank" rel="noopener">什么是 Sarsa(lambda)</a></li><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/3-3-tabular-sarsa-lambda/" target="_blank" rel="noopener">Sarsa-lambda</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 增强学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>强化学习之Sarsa</title>
      <link href="/2018/04/17/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BSarsa/"/>
      <url>/2018/04/17/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BSarsa/</url>
      <content type="html"><![CDATA[<blockquote><p>Q-learning 与 Sarsa 区别</p></blockquote><a id="more"></a><p>Q-learning 与 Sarsa 算法：</p><p><img src="/pic/2018-04/04-17-01.png" alt="Q-learning算法"></p><p><img src="/pic/2018-04/04-17-01.png" alt="Sarsa算法"></p><blockquote><p>Sarsa   与 Q-learning  的区别仅仅在于，  更新Q-table 表里的某一项的时候， 是先走， 还是先计算更新而已。 没有大的区别。</p></blockquote><blockquote><p>Temporal-Difference learning, TD learning <strong>时间差分学习</strong></p></blockquote><blockquote><p>“<code>on-policy</code>和<code>off-policy</code>是指评估和改进的策略是否一致，如不一致则是异策略，一致则为同策略，异策略就是指不是学此时此刻的的策略, 而是学有可能和此时此刻不一样的策略. 同策略就是学此时此刻的策略”</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/3-1-A-sarsa/" target="_blank" rel="noopener">什么是 Sarsa</a></li><li><a href="http://www.cnblogs.com/xiaoxuebiye/p/7753772.html" target="_blank" rel="noopener">强化学习 - Q-learning Sarsa 和 DQN 的理解</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深度学习02之Q-learning介绍</title>
      <link href="/2018/04/16/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8BQ-learning/"/>
      <url>/2018/04/16/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8BQ-learning/</url>
      <content type="html"><![CDATA[<ul><li>Q-learning 的概念</li><li>Q-learning 例子</li></ul><a id="more"></a><h2 id="什么是Q-learning"><a href="#什么是Q-learning" class="headerlink" title="什么是Q learning"></a>什么是Q learning</h2><p>Q-learning 算法是解决<code>马尔科夫决策</code>问题的算法。Q-learning的突出特点是其<strong>在即刻的奖励和未来的奖励之间权衡的能力</strong>。在每次决策时，代理(agent)观察自身的状态 X~t~, 然后选择并采用一种行为u~t~.  这时移动到状态X~t+1~, 代理收到一个反馈(reinforcement r(X~t~,u~t~)) . 其目标是为了找到动作的顺序，来使得未来的反馈的和最大，进而导致从开始到结束最短的路径。</p><p>Q learning 的更新法则非常简单：</p><p><code>Q(state, action) = R(state, action) + gamma * Max[Q(next state, all actions)]</code></p><p>gamma 参数范围是（0 ≤ gamma &lt; 1）,以确保sum是收敛的。如果gamma接近0，则代理更倾向于即刻的奖励；如果代理趋向于1，代理更倾向于考虑未来的奖励。</p><h2 id="Q-learning-算法步骤"><a href="#Q-learning-算法步骤" class="headerlink" title="Q learning 算法步骤"></a>Q learning 算法步骤</h2><p><img src="/pic/2018-04/q4.png" alt=""></p><h2 id="强烈推荐阅读"><a href="#强烈推荐阅读" class="headerlink" title="强烈推荐阅读"></a>强烈推荐阅读</h2><p><a href="https://blog.csdn.net/itplus/article/details/9361915" target="_blank" rel="noopener">A Painless Q-learning Tutorial (一个 Q-learning 算法的简明教程)</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://mnemstudio.org/path-finding-q-learning.htm" target="_blank" rel="noopener">Q-Learning Introduction</a></li><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/2-2-A-q-learning/" target="_blank" rel="noopener">什么是Q-learning</a></li><li><a href="https://blog.csdn.net/itplus/article/details/9361915" target="_blank" rel="noopener">A Painless Q-learning Tutorial (一个 Q-learning 算法的简明教程)</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>强化学习介绍与分类01</title>
      <link href="/2018/04/16/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
      <url>/2018/04/16/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<ul><li>强化学习概念</li><li>分类</li></ul><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>当前的机器学习算法可以分为3种：有监督的学习（Supervised Learning）、无监督的学习（Unsupervised Learning）和强化学习（Reinforcement Learning）</p><p>强化学习的关键要素有：<strong>environment</strong>，<strong>reward</strong>，<strong>action</strong> 和 <strong>state</strong>。有了这些要素我们就能建立一个强化学习模型。</p><blockquote><p>强化学习的分类</p></blockquote><table><thead><tr><th>通过价值选行为</th><th>直接选行为</th><th>想象环境并从中学习</th></tr></thead><tbody><tr><td>Q learning</td><td>Policy Gradients</td><td>Model based RL</td></tr><tr><td>Sarsa</td><td></td><td></td></tr><tr><td>Deep Q Network</td><td></td></tr></tbody></table><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><blockquote><p>强化学习有很多不同的方法，有多种不同的分类方式：</p></blockquote><h3 id="Model-free-和-Model-based"><a href="#Model-free-和-Model-based" class="headerlink" title="Model-free 和 Model-based"></a>Model-free 和 Model-based</h3><blockquote><p>根据强化学习方法<strong>是否理解环境</strong>(Model)，可分为Model-free 和 Model-based 方法。</p></blockquote><p><strong>Model-free</strong> 一直在每一步中取尝试学习最优的策略，在多次迭代后就得到了整个环境最优的策略(<code>Q-learning</code>，<code>Sarasa</code>，<code>Policy Gradients</code>). </p><p><strong>Model-based</strong> 尝试model这个环境(先根据真实情况学习一个model)，最终基于这个环境选择最优的策略。</p><h3 id="基于概率-Policy-Based-RL-和-基于价值-Value-Based-RL"><a href="#基于概率-Policy-Based-RL-和-基于价值-Value-Based-RL" class="headerlink" title="基于概率(Policy-Based RL) 和 基于价值(Value-Based RL)"></a>基于概率(Policy-Based RL) 和 基于价值(Value-Based RL)</h3><p><img src="/pic/2018-04/RLmtd2.png" alt=""></p><p>基于概率是强化学习中最直接的一种，能通过感官分析所处的环境, 直接输出下一步要采取的各种动作的概率, 然后根据概率采取行动, 所以<strong>每种动作都有可能被选中, 只是可能性不同</strong>. 而基于价值的方法输出则是所有动作的价值, 我们会根据最高价值来选择动作, 相比基于概率的方法, 基于价值的决策部分更为铁定, 毫不留情, 就选价值最高的, 而基于概率的, 即使某个动作的概率最高, 但是还是不一定会选到他.</p><p>比如在基于概率这边, 有 <a href="https://morvanzhou.github.io/tutorials/machine-learning/ML-intro/4-07-PG/" target="_blank" rel="noopener">Policy Gradients</a>, 在基于价值这边有 <a href="https://morvanzhou.github.io/tutorials/machine-learning/ML-intro/4-03-q-learning/" target="_blank" rel="noopener">Q learning</a>, <a href="https://morvanzhou.github.io/tutorials/machine-learning/ML-intro/4-04-sarsa/" target="_blank" rel="noopener">Sarsa</a> 等. 而且我们还能结合这两类方法的优势之处, 创造更牛逼的一种方法, 叫做 <a href="https://morvanzhou.github.io/tutorials/machine-learning/ML-intro/4-08-AC/" target="_blank" rel="noopener">Actor-Critic</a>, actor 会基于概率做出动作, 而 critic 会对做出的动作给出动作的价值, 这样就在原有的 policy gradients 上加速了学习过程.</p><h3 id="回合更新-Monte-Carlo-update-和-单步更新-Temporal-Difference-update"><a href="#回合更新-Monte-Carlo-update-和-单步更新-Temporal-Difference-update" class="headerlink" title="回合更新(Monte-Carlo update) 和 单步更新(Temporal-Difference update)"></a>回合更新(Monte-Carlo update) 和 单步更新(Temporal-Difference update)</h3><p>强化学习还能用另外一种方式分类, 回合更新和单步更新, 想象强化学习就是在玩游戏, 游戏回合有开始和结束. 回合更新指的是游戏开始后, 我们要等待游戏结束, 然后再总结这一回合中的所有转折点, 再更新我们的行为准则. 而单步更新则是在游戏进行中每一步都在更新, 不用等待游戏的结束, 这样我们就能边玩边学习了.</p><p>再来说说方法, Monte-carlo learning 和基础版的 policy gradients 等 都是回合更新制, Qlearning, Sarsa, 升级版的 policy gradients 等都是单步更新制. 因为单步更新更有效率, 所以现在大多方法都是基于单步更新. 比如有的强化学习问题并不属于回合问题.</p><blockquote><p>在未达到终止之前，某个状态S时，第一次执行行动a的概率是p1; 回合更新在下一次状态S执行a的概率就等于p2了。</p></blockquote><h3 id="在线学习-On-Policy-和-离线学习-Off-Policy"><a href="#在线学习-On-Policy-和-离线学习-Off-Policy" class="headerlink" title="在线学习(On-Policy) 和 离线学习(Off-Policy)"></a>在线学习(On-Policy) 和 离线学习(Off-Policy)</h3><p>这两者的主要区别就是在于更新值函数时的策略。<strong>on-policy</strong>，只使用了当前策略产生的样本，而<strong>off-policy</strong>，并不一定使用当前策略产生的样本。</p><p>这两者各自用的算法：</p><p><code>on-policy</code>：Sarsa; 还有一种优化 Sarsa 的算法, 叫做 Sarsa lambda</p><p><code>off-policy</code>：Q-learning、DQN(Deep-Q-Network)</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/coffee_cream/article/details/57085729" target="_blank" rel="noopener">强化学习（Reinforcement Learning, RL）初步介绍</a></li><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/1-1-A-RL/" target="_blank" rel="noopener">什么是强化学习</a></li><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/reinforcement-learning/1-1-B-RL-methods/" target="_blank" rel="noopener">强化学习方法汇总 (Reinforcement Learning)</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 强化学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML与CSS基础03-Web框架与表单设计</title>
      <link href="/2018/04/13/HTML%E4%B8%8ECSS%E5%9F%BA%E7%A1%8003-Web%E6%A1%86%E6%9E%B6%E4%B8%8E%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1/"/>
      <url>/2018/04/13/HTML%E4%B8%8ECSS%E5%9F%BA%E7%A1%8003-Web%E6%A1%86%E6%9E%B6%E4%B8%8E%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<ul><li>框架将浏览器划分为不同的部分，每一部分加载不同的网页，实现在同一浏览器窗口中加载多个页面的效果。</li></ul><a id="more"></a><h1 id="WEB框架与表单"><a href="#WEB框架与表单" class="headerlink" title="WEB框架与表单"></a>WEB框架与表单</h1><h2 id="lt-frameset-gt-划分框架标记"><a href="#lt-frameset-gt-划分框架标记" class="headerlink" title="&lt;frameset&gt;划分框架标记:"></a><code>&lt;frameset&gt;</code>划分框架标记:</h2><ol><li><p>语法格式</p><frameset>…</frameset></li><li><p>属性：</p><ol><li><p><code>cols</code> ：使用“像素数”和%分隔左右窗口，“*”表示剩余部分</p><p>如果使用<code>&quot;*&quot;,&quot;*&quot;</code>表示框架平均分成2个</p><p>如果使用<code>&quot;*&quot;,&quot;*&quot;,&quot;*&quot;</code>表示框架平均分成3个</p></li><li><p><code>rows</code>:使用像素数和%分隔上下窗口，<code>&quot;*&quot;</code>表示剩余部分</p></li><li><code>frameborder</code>:指定是否显示边框，0不显示，1显示 </li><li><code>border</code>：设置边框的大小，默认值5像素</li></ol></li><li><p><code>&lt;frame&gt;</code>子窗口标记，<strong>单标记</strong>，该标记必须放在<code>&lt;frameset&gt;</code>中使用，在<code>&lt;frameset&gt;</code>中设置了几个窗口，就必须对应使用几个<code>&lt;frame&gt;</code>框架，而且还必须使用<code>src属性</code>指定一个网页</p><ol><li><code>src</code>：加载网页文件的URL地址</li><li><code>name</code>：框架名称，是链接标记的target所要参数</li><li>noresize：表示不能调整框架大小，没有设置时就可以调整</li><li>scrolling：是否需要滚动条：加在顶层<code>&quot;frameset&quot;</code>不管用，必须要加在每一个<code>&lt;frame&gt;</code>进行控制。<ul><li>auto：根据需要自动出现</li><li>yes：</li><li>no：无</li></ul></li><li>frameborder：是否需要边框<ul><li><code>(1)</code>显示边框</li><li>(0)不显示边框</li></ul></li></ol></li></ol><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML框架<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"90,*,90"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"top.html"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"20%,80%"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"left"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"left.html"</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 其中几个框架的html代码没有显示。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"50%,50%"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"right1"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://bai.com"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">frame</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"right2"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://kaigedong.github.io"</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">"no"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">frame</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"bottom"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"bottom.html"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span>&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="/pic/2017-03/2017-03-03-1.jpg" alt=""></p><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p>比如百度的搜索框就是表单。</p><h2 id="1-表单标记"><a href="#1-表单标记" class="headerlink" title="1. 表单标记"></a>1. 表单标记</h2><p><strong><code>&lt;form&gt;...&lt;/form&gt;</code></strong><br>基本格式：<code>&lt;form&gt;&lt;/form&gt;定义表单的开始位置和结束位置，表单提交的内容就是&lt;form&gt;表单中的内容</code><br><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;form <span class="hljs-attribute">action</span>=<span class="hljs-string">"服务器端地址(接受表单内容的地址)"</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">"表单名称"</span> <span class="hljs-attribute">method</span>=<span class="hljs-string">"post|get"</span>&gt;...&lt;/form&gt;<br></code></pre></td></tr></table></figure></p><p><strong>常用属性</strong></p><ol><li><p><code>name</code>表单名称</p></li><li><p><code>method</code>：传送数据的方式，分为post和get两种方式</p><blockquote><p>get方式提交时，会讲表单的内容附加在URL地址的后面，所以限制了提交的内容的长度，不超过8192个字符，且不具备保密性<br>post方式：post方式提交时，将表单中的数据一并包含在表单主体中，一起传送到服务器中处理，没有数据大小限制。</p></blockquote></li><li><p>action：表单数据的处理程序的URL地址，如果为空则使用当前文档的URL地址，如果表单中不需要使用action属性也要指定其属性为<code>“no”</code></p></li><li><p>enctype:设置表单的资料的编码方式 </p></li><li><p>target：何超链接的属性类似，用来指定目标窗口</p></li></ol><h2 id="2-文本域和密码"><a href="#2-文本域和密码" class="headerlink" title="2. 文本域和密码"></a>2. 文本域和密码</h2><p><code>&lt;input&gt;</code>标记，<strong>没有结束标记。</strong><br>基本语法：<code>&lt;input type=&quot;&quot; name=&quot;&quot; value=&quot;&quot; size=&quot;&quot; maxlength=&quot;&quot;&gt;</code><br>属性介绍：</p><ol><li><p><code>type</code>属性：两个值</p><ul><li><p><code>text</code>：当<code>type=&quot;text&quot;</code>时，<code>&lt;input&gt;</code>表示一个文本输入域</p><ul><li><code>password</code>：当<code>type=&quot;password&quot;</code>时，<code>&lt;input&gt;</code>表示一个密码输入域</li></ul><ol start="2"><li><code>name</code>属性：定义控件的名称</li><li><code>value</code>属性：初始值，打开浏览器时，文本框中的内容</li><li><code>size</code>属性：设置控件的长度</li><li><code>maxlength</code>属性：输入框中最大允许输入的字符数</li></ol></li></ul></li></ol><h2 id="3-提交、重置、普通按钮"><a href="#3-提交、重置、普通按钮" class="headerlink" title="3. 提交、重置、普通按钮"></a>3. 提交、重置、普通按钮</h2><ol><li>提交按钮：当<code>&lt;input type=&quot;submit&quot;&gt;</code> 时，为提交按钮</li><li>重置按钮：当<code>&lt;input type=&quot;reset&quot;&gt;</code>时，为重置按钮</li><li>普通按钮：当<code>&lt;input type=&quot;botton&quot;&gt;</code>时，为普通按钮</li></ol><h2 id="4-单选框和复选框"><a href="#4-单选框和复选框" class="headerlink" title="4. 单选框和复选框"></a>4. 单选框和复选框</h2><ol><li>单选按钮：当<code>&lt;input type=&quot;radio&quot;&gt;</code>时，为单选按钮</li><li>复选框：当<code>&lt;input type=&quot;checkbox&quot;&gt;</code>时，为复选框</li><li>注意：单选框和复选框都可以使用<code>&quot;cheked&quot;</code>属性来<strong>设置默认选中项</strong></li></ol><h2 id="5-隐藏域"><a href="#5-隐藏域" class="headerlink" title="5. 隐藏域"></a>5. 隐藏域</h2><p>当<code>&lt;input type=&quot;hidden&quot;&gt;</code>时，为隐藏表单域，实际上也是被传送出去的。</p><h2 id="6-多行文本域"><a href="#6-多行文本域" class="headerlink" title="6. 多行文本域"></a>6. 多行文本域</h2><p><strong>语法格式</strong><br><code>&lt;textarea name=&quot;name&quot; rows=&quot;value&quot; cols=&quot;value&quot; value=&quot;value&quot;&gt;...&lt;textarea&gt;</code><br>rows 属性和cols属性分别用来指定，显示的行数和列数。</p><h2 id="7-菜单下拉列表域"><a href="#7-菜单下拉列表域" class="headerlink" title="7. 菜单下拉列表域"></a>7. 菜单下拉列表域</h2><ol><li><p>语法格式：</p><figure class="hljs highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;select name=<span class="hljs-string">""</span> size=<span class="hljs-string">"value"</span> multiple&gt;<br>&lt;<span class="hljs-keyword">option</span> <span class="hljs-keyword">value</span>=<span class="hljs-string">"value"</span> selected&gt;选项<span class="hljs-number">1</span>&lt;/<span class="hljs-keyword">option</span>&gt;<br>&lt;<span class="hljs-keyword">option</span> <span class="hljs-keyword">value</span>=<span class="hljs-string">"value"</span>&gt;选项<span class="hljs-number">2</span>&lt;/<span class="hljs-keyword">option</span>&gt;<br>&lt;<span class="hljs-keyword">option</span> <span class="hljs-keyword">value</span>=<span class="hljs-string">"value"</span>&gt;选项<span class="hljs-number">3</span>&lt;/<span class="hljs-keyword">option</span>&gt;<br>... ...<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure></li><li><p>属性</p></li></ol><ol start="3"><li>option属性<br><code>&lt;option&gt;</code>标记用来指定列表中的一个选项，需要放在<select></select>之间<ul><li>value ：给选项复制，指定传送到服务器上面的值<ul><li>selected：指定默认的选项</li></ul></li></ul></li></ol><h2 id="8-实战《会员登录表单》"><a href="#8-实战《会员登录表单》" class="headerlink" title="8. 实战《会员登录表单》"></a>8. 实战《会员登录表单》</h2><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>会员登记表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"VIP-form"</span>&gt;</span><br>  密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"usrname"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  账号：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"passwd"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  性别：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span>&gt;</span>男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span>&gt;</span>女<br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  爱好：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span>&gt;</span>打篮球<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span>&gt;</span>踢足球<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span>&gt;</span>看电影<br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  格言：<span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  地址：<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sichuan"</span>&gt;</span>四川<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"beijing"</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"nanjing"</span>&gt;</span>南京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"submit"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"reset"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"reset"</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-03-2.jpg" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> HTML CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML和CSS基础02-图像超链接和表格</title>
      <link href="/2018/04/13/HTML%E5%92%8CCSS%E5%9F%BA%E7%A1%8002-%E5%9B%BE%E5%83%8F%E8%B6%85%E9%93%BE%E6%8E%A5%E5%92%8C%E8%A1%A8%E6%A0%BC/"/>
      <url>/2018/04/13/HTML%E5%92%8CCSS%E5%9F%BA%E7%A1%8002-%E5%9B%BE%E5%83%8F%E8%B6%85%E9%93%BE%E6%8E%A5%E5%92%8C%E8%A1%A8%E6%A0%BC/</url>
      <content type="html"><![CDATA[<ul><li>图像标记</li><li>超链接</li><li>表格:可以用来进行简单网页布局</li></ul><a id="more"></a><h1 id="HTML与CSS02"><a href="#HTML与CSS02" class="headerlink" title="HTML与CSS02"></a>HTML与CSS02</h1><h2 id="图像标记"><a href="#图像标记" class="headerlink" title="图像标记"></a>图像标记</h2><p><code>&lt;img&gt;</code>图像标记:</p><p><code>&lt;img src=&quot;路径/文件名.图片格式&quot; width=&quot;属性值&quot; height=&quot;属性值&quot; border=&quot;属性值&quot; alt=&quot;属性值&quot;&gt;</code></p><p><strong>！注意</strong></p><ul><li><code>img</code>为单标记，不需要使用<code>&lt;/img&gt;</code>闭合</li><li>在加载图像文件的时候，文件的路径或者文件名格式错误，将无法加载图片。</li></ul><h3 id="lt-img-gt-标记的几种属性"><a href="#lt-img-gt-标记的几种属性" class="headerlink" title="&lt;img&gt;标记的几种属性"></a><code>&lt;img&gt;</code>标记的几种属性</h3><ol><li><p><code>src属性</code>:作用：指定我们要加载的路径和图片的名称以及图片格式。</p></li><li><p><code>width属性</code>：指定图片的宽度，单位是<code>px,em,cm,mm</code></p><blockquote><p>px：像素</p><p>em：通常1em=16px</p><p>width=”10%”:可以用百分比表示宽度，表示占<code>富集容器</code>的宽度。也就是浏览器宽度的百分之十。</p></blockquote></li><li><p><code>height</code>属性：指定图片的高度，单位<code>px,em,cm,mm</code></p></li><li><p><code>border</code>属性：指定图片的边框宽度，单位<code>px,em,cm,mm</code></p></li><li><p><code>alt</code>属性：三个作用：</p><ul><li>当网页上的图片被加载完成后，鼠标移动到上面去，会显示这个图片指定的属性文字。</li><li>如果图像没有下载或者加载失败，会用文字来代替图像显示</li><li>搜索引擎可以通过这个属性的文字来抓取图片</li></ul></li></ol><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3><p><code>&lt;a href=&quot;&quot; target=&quot;打开方式&quot; name=&quot;页面锚点名称&quot;&gt;链接文字或者图片&lt;/a&gt;</code></p><h3 id="2-属性"><a href="#2-属性" class="headerlink" title="2. 属性"></a>2. 属性</h3><ol><li><p>href属性：链接的地址，链接的地址可以是一个网页，也可以是一个视频、图片、音乐等</p></li><li><p>target属性：定义超链接的打开方式</p><ul><li>在一个<strong>新的窗口</strong>中打开链接<code>_blank</code></li><li>在<strong>当前窗口</strong>中打开链接<code>_seif</code>（默认值）</li><li>在<strong>父窗口</strong>中打开页面(框架中使用较多)<code>_parent</code></li><li>在<strong>顶层窗口</strong>中打开文件(框架中使用较多)<code>_top</code></li></ul></li><li><p>name属性：指定页面的锚点名称</p><p>可以通过锚点，让网页跳转到指定位置。</p><ul><li>锚点的设定：<code>&lt;a name=&quot;锚点名称1&quot;&gt;&lt;/a&gt;</code></li><li>跳转位置：<code>&lt;a href=&quot;#锚点名称1&quot;&gt;跳转到锚点名称1&lt;/a&gt;</code></li></ul></li></ol><h4 id="点图片跳转外链："><a href="#点图片跳转外链：" class="headerlink" title="点图片跳转外链："></a>点图片跳转外链：</h4><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;<span class="hljs-selector-tag">a</span> href=<span class="hljs-string">"https://www.baidu/com"</span>&gt;<br>&lt;<span class="hljs-selector-tag">img</span> src=<span class="hljs-string">"图片地址"</span>&gt;<br>&lt;/a&gt;<br></code></pre></td></tr></table></figure><h2 id="表格-可以用来进行简单网页布局"><a href="#表格-可以用来进行简单网页布局" class="headerlink" title="表格:可以用来进行简单网页布局"></a>表格:可以用来进行简单网页布局</h2><h3 id="1-lt-table-gt-标记"><a href="#1-lt-table-gt-标记" class="headerlink" title="1. &lt;table&gt;标记"></a>1. <code>&lt;table&gt;</code>标记</h3><ol><li><p>基本格式</p><figure class="hljs highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;table 属性<span class="hljs-number">1</span>=<span class="hljs-string">"属性值1"</span> 属性<span class="hljs-number">2</span>=<span class="hljs-string">"属性值2"</span>......&gt;表格内容&lt;/table&gt;<br></code></pre></td></tr></table></figure></li><li><p><code>table标记</code>的属性</p><ol><li><code>width</code>属性：表示<strong>表格的宽度</strong>，其值可以使像素(px)也可以是父级元素的百分比(%)</li><li><code>height</code>属性：表示<strong>表格的高度</strong>，其值可以是像素(px)也可以是富集元素的百分比(%)</li><li><code>border</code>属性：表示<strong>表格外边框的宽度</strong></li><li><code>align</code>属性：（默认是left）表示<strong>表格的对齐</strong>！而不是表格里面的内容的对齐。<ul><li><code>left</code>居左显示</li><li><code>center</code>居中显示</li><li><code>right</code>居右显示</li></ul></li><li><code>cellspacing</code>属性：<strong>单元格之间的间距</strong>，默认是2px，单位是像素</li><li><code>cellpadding</code>属性：单元格<strong>内容与单元格边框</strong>的显示距离，单位是像素</li><li><code>frame</code>属性：控制表格边框<strong>最外层的四条线框</strong><ul><li>属性值：<ol><li><code>void</code>(默认值)：表示无边框</li><li><code>above</code>：表示仅顶部有边框</li><li><code>below</code>：表示仅有底部边框</li><li><code>hsides</code>：表示仅有顶部边框和底部边框</li><li><code>lhs</code>：表示仅有左侧边框</li><li><code>rhs</code>：表示仅有右侧边框</li><li><code>vsides</code>：表示仅有左右侧边框</li><li><code>box</code>：包含全部4个边框</li><li><code>border</code>：包含全部4个边框</li></ol></li></ul></li><li>rules属性:<strong>作用</strong>：控制是否以及如何显示<strong>单元格之间的分割线</strong><ol><li>none(默认值)：表示无分割线</li><li>all：包括所有分割线</li><li>rows：表示仅有行分割线</li><li>clos：表示仅有列分割线</li><li>groups：表示仅在行组和列组之间有分割线</li></ol></li></ol></li></ol><h3 id="2-lt-caption-gt-标记：需要标题时使用"><a href="#2-lt-caption-gt-标记：需要标题时使用" class="headerlink" title="2. &lt;caption&gt;标记：需要标题时使用"></a>2. <code>&lt;caption&gt;</code>标记：需要标题时使用</h3><p>如何正确的使用：<code>&lt;caption&gt;</code>属性的插入位置，直接位于<code>&lt;table&gt;</code>属性之后，<code>&lt;tr&gt;</code>表格行之前。<br><code>caption</code>的属性：<code>align</code><br><code>align</code>的值：</p><ol><li><code>top</code>：标题放在表格的上部</li><li><code>bottom</code>：标题放在表格的下部</li><li><code>left</code>：标题放在表格的左部</li><li><code>right</code>：标题放在表格的右部</li></ol><h3 id="3-lt-tr-gt-标记"><a href="#3-lt-tr-gt-标记" class="headerlink" title="3. &lt;tr&gt;标记"></a>3. <code>&lt;tr&gt;</code>标记</h3><p><strong>定义表格的一行</strong>，对于每个表格行，都是由一对<code>&lt;tr&gt;...&lt;/tr&gt;</code>标记表示，每一行<code>&lt;tr&gt;</code>标记内可以嵌套多个<code>&lt;td&gt;</code>或者<code>&lt;th&gt;</code>标记。</p><p>可选属性：</p><ol><li><p><code>bgcolor</code>属性：设置背景颜色</p><p><code>bgcolor</code>=”颜色值”,如<code>#ccc</code>是好看的灰色</p></li><li><p><code>align</code>属性：设置垂直方向对齐方式</p><p><code>align=&quot;值&quot;</code></p><ul><li><code>bottom:</code>靠顶端对齐</li><li><code>top</code>：靠底部对齐</li><li><code>middle</code>：居中对齐</li></ul></li><li><p><code>valign</code>属性：设置水平方向对齐方式</p><p><code>valign</code>=”值”</p><ul><li><code>left</code>：靠左对齐</li><li><code>right</code>：靠右对齐</li><li><code>center</code>：居中对齐</li></ul></li></ol><h3 id="4-lt-td-gt-和-lt-th-gt"><a href="#4-lt-td-gt-和-lt-th-gt" class="headerlink" title="4. &lt;td&gt;和&lt;th&gt;"></a>4. <code>&lt;td&gt;和&lt;th&gt;</code></h3><ol><li><code>&lt;td&gt;</code>和<code>&lt;th&gt;</code>都是单元格的标记，必须嵌套在<code>&lt;tr&gt;</code>标签内，是<strong>成对出现</strong>的。</li><li>两者的区别：<ul><li><code>&lt;th&gt;</code>是<strong>表头标记</strong>，通常位于首行或者首列，<th>中的文字默认会被加粗，而</th><td>不会</td></li><li><code>&lt;td&gt;</code>是<strong>数据标记</strong>，表示该单元格的具体数据</li></ul></li><li>共同之处：两者的标记属性都是一样的</li><li>属性：<ul><li><code>bgcolor</code>：设置单元格背景</li><li><code>align</code>：设置单元格对齐方式</li><li><code>valign</code>：设置单元格垂直对齐方式</li><li><code>width</code>：设置单元格宽度</li><li><code>height</code>：设置单元格高度</li><li><code>rowspan</code>：设置单元格所占行数</li><li><code>colspan</code>：设置单元格所占列数</li></ul></li></ol><h3 id="5-课后实战：制作一个简单的网页布局"><a href="#5-课后实战：制作一个简单的网页布局" class="headerlink" title="5. 课后实战：制作一个简单的网页布局"></a>5. 课后实战：制作一个简单的网页布局</h3><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>制作简单网页布局<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">topmargin</span>=<span class="hljs-string">"0"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"960"</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">"0"</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"90"</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">"red"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">color</span>=<span class="hljs-string">"white"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>网页的头部<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">"yellow"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"500"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"30%"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"left"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">color</span>=<span class="hljs-string">"white"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>网页的左部分<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">"green"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"500"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"70%"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"right"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">color</span>=<span class="hljs-string">"white"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>网页的右部分<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"90"</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">"red"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">color</span>=<span class="hljs-string">"white"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>网页的底部<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注<code>topmargin=&quot;0&quot;</code> 是为了让表格与页面最上方没有空白。</p><p>要是想让左边没有空白使用<code>leftmargin=&quot;0&quot;</code></p></blockquote><p>效果展示：<br><img src="/pic/2017-03/2017-03-01-1.jpg" alt=""></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>HTML和CSS基础01-html的语法和基本结构文档设置标记</title>
      <link href="/2018/04/13/HTML%E5%92%8CCSS%E5%9F%BA%E7%A1%8001-html%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E8%AE%BE%E7%BD%AE%E6%A0%87%E8%AE%B0/"/>
      <url>/2018/04/13/HTML%E5%92%8CCSS%E5%9F%BA%E7%A1%8001-html%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E8%AE%BE%E7%BD%AE%E6%A0%87%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><strong>目标</strong></p><ol><li>HTML部分：掌握HTML的全部语法，它的<code>主体结构</code>，<code>超链接</code>及<code>常用标记</code>的使用</li><li>CSS部分:掌握<code>CSS三种选择器</code>的使用,明白如何使用<code>DIV+CSS</code>进行网页布局，搞清楚<code>浮动问题</code>.</li><li>HTML的语法、HTML的基本结构、文档设置标记</li></ol><a id="more"></a><h1 id="HTML和CSS基础01-HTML语法及基本结构、文档设置标记"><a href="#HTML和CSS基础01-HTML语法及基本结构、文档设置标记" class="headerlink" title="HTML和CSS基础01:HTML语法及基本结构、文档设置标记"></a>HTML和CSS基础01:HTML语法及基本结构、文档设置标记</h1><p>from 麦子学院</p><h2 id="一、HTML的语法"><a href="#一、HTML的语法" class="headerlink" title="一、HTML的语法"></a>一、HTML的语法</h2><ol><li>什么是HTML标记语言：表示网页信息的符号标记语言。</li></ol><ul><li>特点</li></ul><blockquote><p>可以设置文本的格式，<br>可以创建列表<br>可以插入图像和媒体<br>可以创建表格<br>超链接可以使用鼠标点击超链接实现页面之间的跳转。</p></blockquote><p>2.HTML的标记和其他属性：</p><ul><li>HTML文档的保存格式：<code>html</code>,<code>htm</code>,<code>xhtml</code></li><li><p>标记和被标记的内容构建出HTML文档 </p><p><strong>格式:</strong></p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">标记</span>&gt;</span><br>内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">标记</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>标记的属性：</strong></p><blockquote><p>标记的属性就是用来控制我们的内容（图像，文本等）如何显示</p></blockquote></li></ul><p><strong>格式 ：</strong><br><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">标记</span> 属性<span class="hljs-attr">1</span>=<span class="hljs-string">属性值</span> 属性<span class="hljs-attr">2</span>=<span class="hljs-string">属性值…</span> …&gt;</span><br>内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">标记</span>&gt;</span><br></code></pre></td></tr></table></figure></p><blockquote><p>如：<code>&lt;body bgcolor=&quot;red&quot;&gt;内容&lt;/body&gt;</code>,控制网页背景颜色。</p></blockquote><ol start="3"><li>语法不区分字母大小写</li></ol><p><code>&lt;HTML&gt;</code>,<code>&lt;Html&gt;</code>,<code>&lt;html&gt;</code>都是定义相同的标记，但是在编写时<strong>尽量使用小写。</strong></p><ol start="4"><li>文档注释</li></ol><p>注释一段内容时，使用:</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">&lt;!--这几个字将不会在网页中显示--&gt;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>代码格式</li></ol><blockquote><p>空格键和回车键在网页中都不会起到任何作用，为了让代码清晰易读，可以使用空格和回车键进行编排。</p></blockquote><p><strong>！注意：</strong>缩进时为了保持严格的规则，以“Tab”键进行缩进！<br><strong>!</strong>无论有多少个回车，都会被替换成一个空格。</p><ol start="6"><li><strong>字符实体</strong></li></ol><p><em>什么是字符实体？</em>比如我们想在网页上显示一个<code>&lt;</code>,但<code>&lt;</code>在HTML中是文档标记的开始标记。所以需要其他实体名称代替。</p><p><strong>注意！</strong>：实体名称对大小写敏感！</p><table><thead><tr><th>显示结果</th><th>描述</th><th>实体名称</th><th>实体编号</th></tr></thead><tbody><tr><td></td><td>空格</td><td><code>&amp;nbsp;</code></td><td><code>&amp;#160;</code></td></tr><tr><td>&lt;</td><td>小于号</td><td><code>&amp;lt;</code></td><td><code>&amp;#60;</code></td></tr><tr><td>&gt;</td><td>大于号</td><td><code>&amp;gt;</code></td><td><code>&amp;#62;</code></td></tr><tr><td>&amp;</td><td>和号</td><td><code>&amp;amp;</code></td><td><code>&amp;#38;</code></td></tr><tr><td>“</td><td>引号</td><td><code>&amp;quot;</code></td><td><code>&amp;#34;</code></td></tr><tr><td>‘</td><td>撇号</td><td><code>&amp;apos;</code>(IE不支持)</td><td><code>&amp;#39;</code></td></tr><tr><td>￠</td><td>分（cent）</td><td><code>&amp;cent;</code></td><td><code>&amp;#162;</code></td></tr><tr><td>£</td><td>镑（pound）</td><td><code>&amp;pound;</code></td><td><code>&amp;#163;</code></td></tr><tr><td>¥</td><td>元（yen）</td><td><code>&amp;yen;</code></td><td><code>&amp;#165;</code></td></tr><tr><td>€</td><td>欧元（euro）</td><td><code>&amp;euro;</code></td><td><code>&amp;#8364;</code></td></tr><tr><td>§</td><td>小节</td><td><code>&amp;sect;</code></td><td><code>&amp;#167;</code></td></tr><tr><td>©</td><td>版权（copyright）</td><td><code>copy;</code></td><td><code>&amp;#169;</code></td></tr><tr><td>®</td><td>注册商标</td><td><code>&amp;reg;</code></td><td><code>&amp;#174;</code></td></tr><tr><td>™</td><td>商标</td><td><code>&amp;trade;</code></td><td><code>&amp;#8482;</code></td></tr><tr><td>×</td><td>乘号</td><td><code>&amp;times;</code></td><td><code>&amp;#215;</code></td></tr><tr><td>÷</td><td>除号</td><td><code>&amp;divide;</code></td><td><code>&amp;#247;</code></td></tr></tbody></table><h2 id="二、HTML的基本结构"><a href="#二、HTML的基本结构" class="headerlink" title="二、HTML的基本结构"></a>二、HTML的基本结构</h2><h3 id="1-lt-html-gt-内容-lt-html-gt"><a href="#1-lt-html-gt-内容-lt-html-gt" class="headerlink" title="1. &lt;html&gt;内容&lt;/html&gt;"></a>1. <code>&lt;html&gt;内容&lt;/html&gt;</code></h3><ul><li>解释：HTML文档的文档标记，也称为HTML开始标记</li><li>功能：这对标记分别位于网页的最前端和最后段：<code>&lt;html&gt;</code>在最前端表示<code>网页的开始</code>,<code>&lt;/html&gt;</code>在最后端表示网页的结束。</li></ul><h3 id="2-lt-head-gt-内容-lt-head-gt"><a href="#2-lt-head-gt-内容-lt-head-gt" class="headerlink" title="2. &lt;head&gt;内容&lt;/head&gt;"></a>2. <code>&lt;head&gt;内容&lt;/head&gt;</code></h3><ul><li>解释：HTML文件头标记，也称为HTML头信息开始标记</li><li>功能：用来包含文件的基本信息，比如网页的<code>标题</code>，<code>关键字</code>，在<code>&lt;head&gt;&lt;/head&gt;</code>内可以放<code>&lt;title&gt;&lt;/title&gt;</code>,<code>&lt;meta&gt;&lt;/meta&gt;</code>,<code>&lt;style&gt;&lt;/style&gt;</code>等标记<br><strong>!注意：</strong>在<code>&lt;head&gt;&lt;/head&gt;</code>标记内的内容不会再浏览器中显示.</li></ul><h3 id="3-lt-title-gt-内容-lt-title-gt"><a href="#3-lt-title-gt-内容-lt-title-gt" class="headerlink" title="3. &lt;title&gt;内容&lt;/title&gt;"></a>3. <code>&lt;title&gt;内容&lt;/title&gt;</code></h3><ul><li>解释：HTML文件标题标记</li><li>功能：网页的“主题”，显示在浏览器的窗口的左上边<br><strong>!注意：</strong>网页的标题不能太长，要短小精悍，能具体反应页面的内容，<code>&lt;title&gt;&lt;/title&gt;</code>标记中不能包含其他标记。</li></ul><h3 id="4-lt-body-gt-内容-lt-body-gt"><a href="#4-lt-body-gt-内容-lt-body-gt" class="headerlink" title="4. &lt;body&gt;内容&lt;/body&gt;"></a>4. <code>&lt;body&gt;内容&lt;/body&gt;</code></h3><ul><li>解释：HTML文档的主题标记</li><li><p>功能：<code>&lt;body&gt;内容&lt;/body&gt;</code>是网页的主体部分，在此标记之间可以包含如<code>&lt;p&gt;&lt;/p&gt;</code>,<code>&lt;h1&gt;&lt;/h1&gt;</code>,<code>&lt;br&gt;</code>,<code>&lt;hr&gt;</code>等标记，正是由这些内容组成了我们所看见的网页。</p></li><li><p>body标记常见属性：</p></li></ul><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">&lt;!--bgcolor 设置背景颜色--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">”red”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--text 设置文本颜色--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">text</span>=<span class="hljs-string">”green”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--link 设置链接颜色--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">link</span>=<span class="hljs-string">”blue”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--vlink 设置访问了的链接颜色--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">vlink</span>=<span class="hljs-string">”yellow”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--alink 正在被点击的链接颜色--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">alink</span>=<span class="hljs-string">”red”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-lt-meta-gt-属性"><a href="#5-lt-meta-gt-属性" class="headerlink" title="5. &lt;meta&gt;属性"></a>5. <code>&lt;meta&gt;</code>属性</h3><ul><li><p>解释：页面的元信息(meta-information)</p></li><li><p>功能：提供有关页面的<code>元信息(meta-information)</code>,比如<strong>针对搜索引擎和更新频度的描述和关键词</strong>。</p></li><li><p><strong>必须的属性</strong>：<code>content</code>. 值：some_text, 定义name属性相关的元信息<br>常见的属性：<code>name</code></p></li><li><p>常用的name属性:</p></li></ul><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">&lt;!--author--&gt;</span><br><span class="hljs-comment">&lt;!--keywords--&gt;</span><br><span class="hljs-comment">&lt;!--description--&gt;</span><br><span class="hljs-comment">&lt;!--others--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"keywords"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"这是一个学习笔记博客"</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>!注意：</strong><code>meta标记</code>必须放在<code>head元素</code>里面。</p></blockquote><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>第二节课<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"keywords"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"这是学习笔记blog"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">"white"</span> <span class="hljs-attr">text</span>=<span class="hljs-string">"blue"</span> <span class="hljs-attr">link</span>=<span class="hljs-string">"red"</span> <span class="hljs-attr">vlink</span>=<span class="hljs-string">"gray"</span> <span class="hljs-attr">alink</span>=<span class="hljs-string">"blue"</span>&gt;</span><br>      <br>    <span class="hljs-comment">&lt;!--这里是注释--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是一个内容的标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://www.baidu.com"</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三、文档设置标记"><a href="#三、文档设置标记" class="headerlink" title="三、文档设置标记"></a>三、文档设置标记</h2><h3 id="1-几种常见格式标记"><a href="#1-几种常见格式标记" class="headerlink" title="1. 几种常见格式标记"></a>1. 几种常见格式标记</h3><ol><li><p><code>&lt;br&gt;</code>:<code>强制换行标记</code>：让后面的文字、图片、表格等显示在下一行。</p><blockquote><p><code>&lt;br&gt;</code>是<code>单标记</code>，只需要在后面加个斜线即可换行：<code>&lt;br/&gt;</code></p></blockquote></li><li><p><code>&lt;p&gt;这是新的一段&lt;/p&gt;</code>: <code>换段落标记</code>：换段落。</p><blockquote><p>由于多个空格和回车在HTML会被等效为一个空格，所以HTML中换段落要用<code>&lt;p&gt;</code>,<strong><code>&lt;p&gt;</code>段落中也可以包含<code>&lt;p&gt;</code>段落！</strong></p></blockquote></li><li><p><code>&lt;center&gt;</code>:<code>居中对齐标记</code>，让段落或者是文字相对于父标记居中显示。</p></li><li><p><code>&lt;pre&gt;一些  字符串&lt;/pr&gt;</code>:<code>预格式化标记</code>，就是显示原始字符串.</p></li><li><p><code>&lt;li&gt;</code>:<code>列表项目标记</code>，和ul或ol配合使用.单独用<code>&lt;li&gt;</code>效果如下：</p><p><img src="/pic/2017-02/2017-02-27-2.jpg" alt=""></p></li><li><p><code>&lt;ul&gt;</code>:无序列表标记:列表前面为小圆点.效果类似上图。</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一节课<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二节课<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>&lt;ol&gt;</code>:有序列表标记，可以显示特定的一些顺序.</p></li></ol><ul><li>最简单的用法：类似上图，只是小圆点变成了数字<code>1、2、3、4...</code></li></ul><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一节课<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二节课<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>ol</code> 和<code>li</code>都可以跟符号类型。格式：</li></ul><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">”符号类型”</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">type</span>=<span class="hljs-string">”符号类型”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">type</span>=<span class="hljs-string">”符号类型”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>有序列表的<code>type属性值</code><br><code>1:阿拉伯数字</code>1,2,3等，默认type属性值<br><code>A:大小写字母</code>A/B/C等<br><code>a:a/b/c</code>等<br><code>I:大写罗马数字</code>等<br><code>i:小写罗马数字</code>等</p></blockquote><ul><li><code>value</code>：制定一个新的序列数字起始值.</li></ul><p>如下显示编号从罗马5到9</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"I"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">value</span>=<span class="hljs-string">5</span>&gt;</span>第一节课<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二节课<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第三节课<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第四节课<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 显示结果：<br> <img src="/pic/2017-02/2017-02-27-1.jpg" alt=""></p><ul><li><p>列表可以进行嵌套</p><p><img src="/pic/2017-02/2017-02-27-3.jpg" alt=""></p></li></ul><ol start="8"><li><p><code>&lt;dl&gt;&lt;dt&gt;&lt;dd&gt;</code>定义型列表：</p><p>适用场合：<strong>对列表条目进行简短的说明.</strong></p><p>格式：<code>&lt;dt&gt;,&lt;dd&gt;</code>都是在<code>dl</code>里面的。</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>软件说明：<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>简单介绍软件的功能及基本应用<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>软件界面：<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>用于选择软件的外观<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/pic/2017-02/2017-02-27-4.jpg" alt=""></p></li><li><p><hr>水平分割线标记，</p></li><li><p><div>分区显示标记，也称为层标记。<br>常用来编排一大段的HTML段落，也可以用于格式化表，和<p>很相似。<br>层可以多层嵌套使用。用CSS渲染的时候就很方便了。</p></div></p></li></ol><h3 id="2-文本标记"><a href="#2-文本标记" class="headerlink" title="2. 文本标记"></a>2. 文本标记</h3><ol><li><code>hn</code> 标题标记：共有6个级别，n的范围1~6，不同级别对应大小不同的标题，h1最大。<code>&lt;h2&gt;标题&lt;/h2&gt;</code></li><li><code>font</code>字体设置标记：设置字体的格式。<br>三个常用属性：</li></ol><ul><li>size(字体大小) <code>&lt;font size=&quot;3&quot;&gt;</code>取值范围1~7,浏览器默认是3，</li><li>color(颜色) <code>&lt;font color=&quot;red&quot;&gt;</code></li><li>face(字体) <code>&lt;font face=&quot;微软雅黑&quot;&gt;</code></li></ul><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;font <span class="hljs-attribute">size</span>=7 <span class="hljs-attribute">color</span>=<span class="hljs-string">"red"</span> <span class="hljs-attribute">face</span>=<span class="hljs-string">"宋体"</span>&gt;这是大字号&lt;font&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li><code>b</code>粗字体标记<code>&lt;b&gt;这是粗体&lt;/b&gt;</code></li><li><code>i</code>斜体字</li><li><code>sub</code>文字下标字体标记 <code>2&lt;sub&gt;2&lt;/sub&gt;</code></li><li><code>sup</code>文字上标字体标记</li><li><code>tt</code>打印机字体标记</li><li><code>cite</code>引用方式的字体，通常是<code>斜体</code>。</li><li><code>em</code>表示强调，通常显示为<code>斜体字</code>。</li><li><code>strong</code>表示强调，通常显示为<code>粗斜体字</code>。</li><li><code>small</code> 小型字体标记,会比正常字体小一号，可以嵌套。<code>&lt;small&gt;&lt;small&gt;这是1号字体&lt;/small&gt;&lt;/small&gt;</code>，但到了最小就不会再小了。</li><li><code>big</code>同上。</li><li><code>u</code>下划线字体标记。</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>数据可视化之柱状图</title>
      <link href="/2018/04/13/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8B%E6%9F%B1%E7%8A%B6%E5%9B%BE/"/>
      <url>/2018/04/13/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8B%E6%9F%B1%E7%8A%B6%E5%9B%BE/</url>
      <content type="html"><![CDATA[<ul><li>Python柱状图📊</li></ul><a id="more"></a><h1 id="python-数据可视化之柱状图"><a href="#python-数据可视化之柱状图" class="headerlink" title="python 数据可视化之柱状图"></a>python 数据可视化之柱状图</h1><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">"""<br>Created on Mon Sep 18 17:30:04 2017<br><br>@author: kaigedong<br>"""</span><br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><br><span class="hljs-comment"># x = np.array(["H9 stable","FB stable","H9 4sU 120min","FB 4sU 120min"])</span><br><br>x = np.arange(<span class="hljs-number">4</span>)<br>a = np.array([<span class="hljs-number">2.12</span>, <span class="hljs-number">19.05</span>, <span class="hljs-number">4.4</span>, <span class="hljs-number">8.78</span>])<br>b = np.array([<span class="hljs-number">0.51</span>, <span class="hljs-number">0.38</span>, <span class="hljs-number">0.56</span>, <span class="hljs-number">0.46</span>])<br>c = np.array([<span class="hljs-number">6.42</span>, <span class="hljs-number">0.77</span>, <span class="hljs-number">5.4</span>, <span class="hljs-number">2.68</span>])<br><br><br>plt.bar(x, a, label=<span class="hljs-string">"A"</span>)<br>plt.bar(x, b, bottom=a, label=<span class="hljs-string">"B2"</span>)<br>plt.bar(x, c, bottom=a + b,label=<span class="hljs-string">"B1"</span>)<br><br>plt.xticks(x, (<span class="hljs-string">"sample 1"</span>,<span class="hljs-string">"sample 2"</span>,<span class="hljs-string">"sample 3"</span>,<span class="hljs-string">"sample 4"</span>))<br>plt.yticks(np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">2</span>))<br>plt.legend(loc=<span class="hljs-string">"best"</span>)<br>plt.show()<br><br><span class="hljs-string">'''<br>for x,y in zip(x,a):<br>    plt.text(x , y/2 , '%.0f' % y, ha='center', va= 'bottom',fontsize=7)<br>'''</span><br><br>plt.bar(x, a/(a+b+c), label=<span class="hljs-string">"A"</span>)<br>plt.bar(x, b/(a+b+c), bottom=a/(a+b+c), label=<span class="hljs-string">"B2"</span>)<br>plt.bar(x, c/(a+b+c), bottom=(a + b)/(a+b+c),label=<span class="hljs-string">"B1"</span>)<br><br>plt.xticks(x, (<span class="hljs-string">"sample 1"</span>,<span class="hljs-string">"sample 2"</span>,<span class="hljs-string">"sample 3"</span>,<span class="hljs-string">"sample 4"</span>))<br>plt.yticks(np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0.1</span>))<br>plt.legend(loc=<span class="hljs-number">2</span>, bbox_to_anchor=(<span class="hljs-number">1.05</span>,<span class="hljs-number">1.0</span>),borderaxespad = <span class="hljs-number">0.</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-09/figure_14.png" alt=""></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hexo-NexT主题的404页面</title>
      <link href="/2018/04/13/Hexo-NexT%E4%B8%BB%E9%A2%98%E7%9A%84404%E9%A1%B5%E9%9D%A2/"/>
      <url>/2018/04/13/Hexo-NexT%E4%B8%BB%E9%A2%98%E7%9A%84404%E9%A1%B5%E9%9D%A2/</url>
      <content type="html"><![CDATA[<ul><li>设置hexo 下next主题的404页面</li></ul><blockquote><p>腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！</p></blockquote><a id="more"></a><h1 id="设置hexo-下next主题的404页面"><a href="#设置hexo-下next主题的404页面" class="headerlink" title="设置hexo 下next主题的404页面"></a>设置hexo 下next主题的404页面</h1><p>按照<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">Next官网的做法</a>, 设置<code>404.html</code>，则每次<code>hexo generate</code>都会将这个html 重新生成。并不可行。</p><p>查找github的解决办法，有个<strong><code>skip_render</code>参数</strong>，可以让hexo忽略某个文件，不进行生成，而直接拷贝(对我来说并不可行)。</p><p>经过多番尝试，有了下面的解决办法：</p><h2 id="腾讯404页面介绍："><a href="#腾讯404页面介绍：" class="headerlink" title="腾讯404页面介绍："></a>腾讯404页面介绍：</h2><p><a href="http://www.qq.com/404/" target="_blank" rel="noopener">腾讯404页面</a>中给了接入公益404的办法：</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;script <span class="hljs-attribute">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span> <span class="hljs-attribute">charset</span>=<span class="hljs-string">"utf-8"</span> <span class="hljs-attribute">homePageUrl</span>=<span class="hljs-string">"http://yoursite.com/yourPage.html"</span> <span class="hljs-attribute">homePageName</span>=<span class="hljs-string">"回到我的主页"</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="解决办法：创建404-md而不是404-html"><a href="#解决办法：创建404-md而不是404-html" class="headerlink" title="解决办法：创建404.md而不是404.html"></a>解决办法：创建<code>404.md</code>而不是<code>404.html</code></h2><p>于是，我直接将<code>source</code>下新建了个<code>404.md</code>,</p><p>内容: (设置comments是因为即使页面会被腾讯404覆盖，但生成的html代码依然有comments的内容需要加载。)</p><h3 id="创建404-md"><a href="#创建404-md" class="headerlink" title="创建404.md"></a>创建<code>404.md</code></h3><blockquote><p><code>404.md</code>的内容</p></blockquote><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">---<br>comments: false<br>---<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span> <span class="hljs-attr">homepagename</span>=<span class="hljs-string">'返回主页'</span> <span class="hljs-attr">homepageurl</span>=<span class="hljs-string">"/"</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="修改theme-config-yml文件"><a href="#修改theme-config-yml文件" class="headerlink" title="修改theme/_config.yml文件"></a>修改<code>theme/_config.yml</code>文件</h3><p>然后将<code>theme</code>中的menu的404进行设置(<strong>最后一行</strong>)：</p><figure class="hljs highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-symbol">menu:</span><br><span class="hljs-symbol">   home:</span> / || home<br><span class="hljs-symbol">   about:</span> <span class="hljs-meta-keyword">/about/</span> || user<br><span class="hljs-symbol">   tags:</span> <span class="hljs-meta-keyword">/tags/</span> || tags<br><span class="hljs-symbol">   categories:</span> <span class="hljs-meta-keyword">/categories/</span> || th<br><span class="hljs-symbol">   archives:</span> <span class="hljs-meta-keyword">/archives/</span> || archive<br>   <span class="hljs-meta">#schedule: /schedule/ || calendar</span><br>   <span class="hljs-meta">#sitemap: /sitemap.xml || sitemap</span><br><span class="hljs-symbol">   commonweal:</span> <span class="hljs-number">404.</span>html || heartbeat<br></code></pre></td></tr></table></figure><p>大功告成！</p><h3 id="重新生成html文件，并发布"><a href="#重新生成html文件，并发布" class="headerlink" title="重新生成html文件，并发布"></a>重新生成html文件，并发布</h3><p>然后到一级目录执行：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo generate<br>hexo deploy # 推送到github.<br><span class="hljs-meta"><br>#</span><span class="bash">tips: 我在.bashrc进行了如下设置以简便命令：</span><br>alias hexo1='hexo generate'<br>alias hexo2='hexo deploy'<br></code></pre></td></tr></table></figure><p>效果参见<a href="https://kaigedong.github.io/404.html" target="_blank" rel="noopener">https://kaigedong.github.io/404.html</a>：</p><p><img src="/pic/2017-09/figure_12.jpg" alt="404效果"></p><p>最后祝愿走失的孩子找到回家的路❤！</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>learn-git</title>
      <link href="/2018/04/13/learn-git/"/>
      <url>/2018/04/13/learn-git/</url>
      <content type="html"><![CDATA[<h1 id="git-学习笔记-ubuntu"><a href="#git-学习笔记-ubuntu" class="headerlink" title="git 学习笔记(ubuntu)"></a>git 学习笔记(ubuntu)</h1><p>from 廖雪峰git笔记</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>sudo apt install git</code></p><h2 id="首次配置"><a href="#首次配置" class="headerlink" title="首次配置"></a>首次配置</h2><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">"Your Name"</span><br>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">"email@example.com"</span><br></code></pre></td></tr></table></figure><blockquote><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址<br>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p></blockquote><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><blockquote><p>版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p></blockquote><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">#在某个合适的目录下</span><br>mkdir learngit<br><span class="hljs-built_in">cd</span> learngit<br><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><blockquote><p>/home/dong/Documents/learngit</p></blockquote><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash">通过git init 命令把这个目录编程Git可以管理的仓库</span><br>git init<br><span class="hljs-meta">#</span><span class="bash">Initialized empty Git repository <span class="hljs-keyword">in</span> /home/dong/Documents/learngit/.git/</span><br></code></pre></td></tr></table></figure><h3 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h3><p>所有的版本控制系统，<strong>只能跟踪文本文件</strong>的改动，比如TXT文件，网页，所有程序代码等。图片，视频是不知道的。<strong>强烈建议使用UTF-8编码</strong>。</p><p><strong>创建一个<code>readme.txt</code>文件</strong>:</p><figure class="hljs highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Git <span class="hljs-keyword">is</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">version</span> control <span class="hljs-built_in">system</span>.<br>Git <span class="hljs-keyword">is</span> free software.<br></code></pre></td></tr></table></figure><p>**一定要放在<code>learngit</code>目录下（子目录也行）。</p><p>把一个文件放到Git仓库只需要两步：</p><h3 id="1-用git-add告诉Git，把文件添加到仓库："><a href="#1-用git-add告诉Git，把文件添加到仓库：" class="headerlink" title="1. 用git add告诉Git，把文件添加到仓库："></a>1. 用<code>git add</code>告诉Git，把文件添加到仓库：</h3><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add readme.txt<br></code></pre></td></tr></table></figure><blockquote><p>git add –all #添加所有文件<br>git add -A #同上</p></blockquote><h3 id="2-用git-commit告诉Git，把文件提交到仓库："><a href="#2-用git-commit告诉Git，把文件提交到仓库：" class="headerlink" title="2. 用git commit告诉Git，把文件提交到仓库："></a>2. 用<code>git commit</code>告诉Git，把文件提交到仓库：</h3><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git <span class="hljs-keyword">commit</span> -m <span class="hljs-string">"wrote a readme file"</span><br>[<span class="hljs-keyword">master</span> (root-<span class="hljs-keyword">commit</span>) cb926e7] wrote a readme <span class="hljs-keyword">file</span><br> <span class="hljs-number">1</span> <span class="hljs-keyword">file</span> <span class="hljs-keyword">changed</span>, <span class="hljs-number">2</span> insertions(+)<br> <span class="hljs-keyword">create</span> <span class="hljs-keyword">mode</span> <span class="hljs-number">100644</span> readme.txt<br></code></pre></td></tr></table></figure><blockquote><p><code>git commit</code>说明：<code>-m</code>后面输入的是本次提交说明，可以输入任何内容，最好是有意义的。</p><p><code>git commit</code>命令执行成功后会告诉你，1个文件被改动（我们新添加的readme.txt文件），插入了两行内容（readme.txt有两行内容）。</p><p>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，比如：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> $ git add file1.txt</span><br><span class="hljs-meta">&gt;</span><span class="bash"> $ git add file2.txt file3.txt</span><br><span class="hljs-meta">&gt;</span><span class="bash"> $ git commit -m <span class="hljs-string">"add 3 files."</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br></code></pre></td></tr></table></figure></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>初始化一个Git仓库，使用<code>git init</code>命令。<br>添加文件到Git仓库，分两步：</p><ul><li>第一步，使用命令<code>git add</code>，注意，可反复多次使用，添加多个文件；</li><li>第二步，使用命令<code>git commit</code>，完成。</li></ul><h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h2><h3 id="1-git-status"><a href="#1-git-status" class="headerlink" title="1. git status"></a>1. git status</h3><p>修改<code>readme.txt</code> 的两行内容，然后使用<code>git status</code>命令查看结果：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">git status</span><br><span class="hljs-meta">#</span><span class="bash"> On branch master</span><br><span class="hljs-meta">#</span><span class="bash"> Changes not staged <span class="hljs-keyword">for</span> commit:</span><br><span class="hljs-meta">#</span><span class="bash">   (use <span class="hljs-string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="hljs-meta">#</span><span class="bash">   (use <span class="hljs-string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="hljs-keyword">in</span> working directory)</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="hljs-meta">#</span><span class="bash">    modified:   readme.txt</span><br><span class="hljs-meta">#</span><span class="bash"></span><br>no changes added to commit (use "git add" and/or "git commit -a")<br></code></pre></td></tr></table></figure><p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。</p><h3 id="2-git-diff-file"><a href="#2-git-diff-file" class="headerlink" title="2. git diff file"></a>2. git diff file</h3><p>修改了文件，但没提交。已经记不清怎么修改的<code>readme.txt</code>了，所以需要<code>git diff</code>命令来查看</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git diff readme.txt </span><br>diff --git a/readme.txt b/readme.txt<br>index 46d49bf..9247db6 100644<br>--- a/readme.txt<br>+++ b/readme.txt<br>@@ -1,2 +1,2 @@<br>-Git is a version control system.<br>+Git is a distributed version control system.<br> Git is free software.<br></code></pre></td></tr></table></figure><p>知道了对readme.txt作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是<code>git add</code>：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add readme.txt<br></code></pre></td></tr></table></figure><p>**在执行第二步<code>git commit</code>之前，我们查看下状态<code>git status</code></p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git status</span><br><span class="hljs-meta">#</span><span class="bash"> On branch master</span><br><span class="hljs-meta">#</span><span class="bash"> Changes to be committed:</span><br><span class="hljs-meta">#</span><span class="bash">   (use <span class="hljs-string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="hljs-meta">#</span><span class="bash">       modified:   readme.txt</span><br><span class="hljs-meta">#</span><span class="bash"></span><br></code></pre></td></tr></table></figure><p><code>git status</code>告诉我们，将要被提交的修改包括readme.txt，下一步，就可以放心地提交了：</p><p>然后再用<code>git status</code>查看仓库的当前状态：</p><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ git <span class="hljs-keyword">commit</span> -m <span class="hljs-string">"add distributed"</span><br>[<span class="hljs-keyword">master</span> ea34578] <span class="hljs-keyword">add</span> <span class="hljs-keyword">distributed</span><br> <span class="hljs-number">1</span> <span class="hljs-keyword">file</span> <span class="hljs-keyword">changed</span>, <span class="hljs-number">1</span> insertion(+), <span class="hljs-number">1</span> deletion(-)<br></code></pre></td></tr></table></figure><p>Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working directory clean）的。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul><li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li><li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li></ul><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><h3 id="git-log-–pretty-oneline-查看提交日志"><a href="#git-log-–pretty-oneline-查看提交日志" class="headerlink" title="git log –pretty=oneline 查看提交日志"></a>git log –pretty=oneline 查看提交日志</h3><p>实际工作中，我们可以用<code>git log</code>查看每次修改了什么。<strong><code>git log</code>显示从最近到最远的提交日志。</strong>可以加上<code>--pretty=oneline</code>参数，让<code>git log</code>输出的信息更简洁。</p><p>git log 的输出结果：一大串数字是<code>commit id</code>（版本号）。</p><p>git 中，用<code>HEAD</code>表示当前版本，上个版本就是<code>HEAD^</code>，上上个版本就是<code>HEAD^^</code>，上一百个简写为<code>HEAD~100</code>。</p><h4 id="git-reset-–hard-HEAD-回到上个版本"><a href="#git-reset-–hard-HEAD-回到上个版本" class="headerlink" title="git reset –hard HEAD^回到上个版本"></a>git reset –hard HEAD^回到上个版本</h4><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reset --hard HEAD^</span><br>HEAD is now at ea34578 add distributed<br></code></pre></td></tr></table></figure><blockquote><p>现在再用<code>git log</code>就看不到刚才的第一条记录了！<br>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向append GPL：改向只想<code>add distributed</code>.<br><strong>所以让HEAD指向哪个版本号，就把当前版本定位在哪。</strong></p></blockquote><h4 id="git-reflog-查看版本的记录！"><a href="#git-reflog-查看版本的记录！" class="headerlink" title="git reflog 查看版本的记录！"></a>git reflog 查看版本的记录！</h4><h2 id="git-撤销工作区、暂存区更改"><a href="#git-撤销工作区、暂存区更改" class="headerlink" title="git 撤销工作区、暂存区更改"></a>git 撤销工作区、暂存区更改</h2><h4 id="1-直接丢弃工作区修改"><a href="#1-直接丢弃工作区修改" class="headerlink" title="1. 直接丢弃工作区修改"></a>1. 直接丢弃工作区修改</h4><p>场景1：当你改乱了工作区某个文件的内容，想<strong>直接丢弃工作区</strong>的修改时，用命令<code>git checkout -- file</code>。</p><h4 id="2-先丢弃暂存区，在丢弃工作区修改"><a href="#2-先丢弃暂存区，在丢弃工作区修改" class="headerlink" title="2. 先丢弃暂存区，在丢弃工作区修改"></a>2. 先丢弃暂存区，在丢弃工作区修改</h4><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p><h4 id="3-版本回退"><a href="#3-版本回退" class="headerlink" title="3. 版本回退"></a>3. 版本回退</h4><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p><h3 id="git-rm-删除一个文件-并且git-commit"><a href="#git-rm-删除一个文件-并且git-commit" class="headerlink" title="git rm 删除一个文件 并且git commit"></a>git rm 删除一个文件 并且<code>git commit</code></h3><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git rm test.txt</span><br>rm 'test.txt'<br><span class="hljs-meta">$</span><span class="bash"> git commit -m <span class="hljs-string">"remove test.txt"</span></span><br>[master d17efd8] remove test.txt<br> 1 file changed, 1 deletion(-)<br> delete mode 100644 test.txt<br></code></pre></td></tr></table></figure><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><blockquote><p>请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：</p></blockquote><ul><li>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</li></ul><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C "youremail@example.com"<br></code></pre></td></tr></table></figure><blockquote><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p></blockquote><ul><li>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。</li></ul><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><ol><li><p>首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：</p></li><li><p>在Repository name填入<code>learngit</code>，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p></li><li><p>目前，在GitHub上的这个<code>learngit</code>仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p></li><li><p>现在，我们根据GitHub的提示，在本地的<code>learngit</code>仓库下运行命令：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add origin git@github.com:kaigedong/learngit.git<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p></blockquote><ol start="5"><li><p>下一步，就可以把本地库的所有内容推送到远程库上：</p> <figure class="hljs highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ git push -u origin masterCounting objects: <span class="hljs-number">19</span>, done.Delta compression using up to <span class="hljs-number">4</span> threads.Compressing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">19</span>/<span class="hljs-number">19</span>), done.Writing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">19</span>/<span class="hljs-number">19</span>), <span class="hljs-number">13.73</span> KiB, done.Total <span class="hljs-number">23</span> (delta <span class="hljs-number">6</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)To git@github.com:michaelliao/learngit.git * [new branch]      <span class="hljs-keyword">master</span> <span class="hljs-title">-&amp;gt</span>; masterBranch <span class="hljs-keyword">master</span> <span class="hljs-title">set</span> up to track remote branch <span class="hljs-keyword">master</span> <span class="hljs-title">from</span> origin.<br>   $ git push -u origin <span class="hljs-keyword">master</span><br>   <span class="hljs-title">Counting</span> objects: <span class="hljs-number">19</span>, done.<br>   Delta compression using up to <span class="hljs-number">4</span> threads.<br>   Compressing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">19</span>/<span class="hljs-number">19</span>), done.<br>   Writing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">19</span>/<span class="hljs-number">19</span>), <span class="hljs-number">13.73</span> KiB, done.<br>   Total <span class="hljs-number">23</span> (delta <span class="hljs-number">6</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)<br>   To git@github.com:michaelliao/learngit.git<br>* [new branch]      <span class="hljs-keyword">master</span> <span class="hljs-title">-&gt; master</span><br>Branch <span class="hljs-keyword">master</span> <span class="hljs-title">set</span> up to track remote branch <span class="hljs-keyword">master</span> <span class="hljs-title">from</span> origin.<br></code></pre></td></tr></table></figure><blockquote><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p></blockquote></li><li><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p></li><li><p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：</p></li><li><p>从现在起，只要本地作了提交，就可以通过命令：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin master<br></code></pre></td></tr></table></figure></li><li><p>把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p></li></ol><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code></p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>items2技巧</title>
      <link href="/2018/04/13/items2%E6%8A%80%E5%B7%A7/"/>
      <url>/2018/04/13/items2%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<ul><li>标签</li><li>分屏</li><li>快捷键</li></ul><a id="more"></a><h1 id="items2-技巧"><a href="#items2-技巧" class="headerlink" title="items2 技巧"></a>items2 技巧</h1><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="hljs highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">新建标签：<span class="hljs-keyword">command</span> + <span class="hljs-title">t</span><br><br>关闭标签：<span class="hljs-keyword">command</span> + <span class="hljs-title">w</span><br><br>切换标签：<span class="hljs-keyword">command</span> + 数字 <span class="hljs-title">command</span> + 左右方向键<br><br>切换全屏：<span class="hljs-keyword">command</span> + <span class="hljs-title">enter</span><br><br>查找：<span class="hljs-keyword">command</span> + <span class="hljs-title">f</span><br></code></pre></td></tr></table></figure><h2 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h2><figure class="hljs highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">垂直分屏：<span class="hljs-keyword">command</span> + <span class="hljs-title">d</span><br><br>水平分屏：<span class="hljs-keyword">command</span> + <span class="hljs-title">shift</span> + <span class="hljs-title">d</span><br><br>切换屏幕：<span class="hljs-keyword">command</span> + <span class="hljs-title">option</span> + 方向键 <span class="hljs-title">command</span> + [ 或 <span class="hljs-title">command</span> + ]<br><br>查看历史命令：<span class="hljs-keyword">command</span> + ;<br><br>查看剪贴板历史：<span class="hljs-keyword">command</span> + <span class="hljs-title">shift</span> + <span class="hljs-title">h</span><br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="hljs highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs undefined">⌘ + shift + <span class="hljs-keyword">h</span> 会列出剪切板历史<br><br>清除当前行：ctrl + <span class="hljs-keyword">u</span><br><br>到行首：ctrl + a<br><br>到行尾：ctrl + <span class="hljs-built_in">e</span><br><br>搜索命令历史：ctrl + <span class="hljs-built_in">r</span><br><br>删除光标之前的单词：ctrl + <span class="hljs-built_in">w</span><br><br>清屏：ctrl + <span class="hljs-keyword">l</span><br><br>自带有哪些很实用的功能/快捷键<br><br>⌘ + f 所查找的内容会被自动复制<br><br>输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令<br><br>可以在 Preferences &gt; keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现<br></code></pre></td></tr></table></figure><h2 id="选中即复制"><a href="#选中即复制" class="headerlink" title="选中即复制"></a>选中即复制</h2><h3 id="选中即复制-1"><a href="#选中即复制-1" class="headerlink" title="选中即复制"></a>选中即复制</h3><h4 id="iterm2-有-2-种好用的选中即复制模式。"><a href="#iterm2-有-2-种好用的选中即复制模式。" class="headerlink" title="iterm2 有 2 种好用的选中即复制模式。"></a>iterm2 有 2 种好用的选中即复制模式。</h4><ul><li>一种是用鼠标，在 iterm2 中，选中某个路径或者某个词汇，那么，iterm2 就自动复制了。 　　</li><li>另一种是无鼠标模式，<code>command+f</code>,弹出 iterm2 的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之后，输入 <code>tab</code>，查找窗口将自动变化内容，并将其复制。如果输入的是 <code>shift+tab</code>，则自动将查找内容的左边选中并复制。</li></ul><h3 id="自动完成"><a href="#自动完成" class="headerlink" title="自动完成"></a>自动完成</h3><p>输入打头几个字母，然后输入 <code>command ;</code> iterm2 将自动列出之前输入过的类似命令。 </p><h3 id="剪切历史"><a href="#剪切历史" class="headerlink" title="剪切历史"></a>剪切历史</h3><p>输入 <code>command+shift+h</code>，iterm2 将自动列出剪切板的历史记录。如果需要将剪切板的历史记录保存到磁盘，在 <code>Preferences &gt; General &gt; Save copy/paste history to disk</code> 中设置。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>tmus指南</title>
      <link href="/2018/04/13/tmus%E6%8C%87%E5%8D%97/"/>
      <url>/2018/04/13/tmus%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<p>tmux的基本操作</p><p>在 tmux 之外如何进行控制</p><p>在 tmux 中直接控制</p><p>高效的结对编程</p><p>调整 Tmux 以增强其同 Vim 的集成度</p><a id="more"></a><h2 id="tmux基本概念"><a href="#tmux基本概念" class="headerlink" title="tmux基本概念"></a>tmux基本概念</h2><p>tmux的主要元素分为三层：</p><p><img src="/pic/2017-09/figure_9.jpg" alt=""></p><ul><li>Session 一组窗口的集合，通常用来概括同一个任务。session可以有自己的名字便于任务之间的切换。</li><li>Window 单个可见窗口。Windows有自己的编号，也可以认为和ITerm2中的Tab类似。</li><li>Pane 窗格，被划分成小块的窗口，类似于Vim中 C-w +v 后的效果。</li></ul><p>可以看到Session总在tmux的左下角显示, 而Window也会在最下方以一种Tab的形式展现。每个window都有自己的需要，也会以当前活动进程的名字命名。而Pane就比较好理解，即把单个窗口分割成若干个小块后的元素。</p><h2 id="tmux的基本操作"><a href="#tmux的基本操作" class="headerlink" title="tmux的基本操作"></a>tmux的基本操作</h2><p>Prefix-Command前置操作：所有下面介绍的快捷键，都必须以前置操作开始。tmux默认的前置操作是<code>CTRL+b</code>。例如，我们想要新建一个窗体，就需要先在键盘上摁下<code>CTRL+b</code>(有些电脑是<code>CTRL+A</code>)，松开后再摁下n键。</p><blockquote><p>建议修改为<code>ctrl + a</code> 更好按。若要将快捷键前缀变更为 Ctrl-a ，请将以下配置加入到 Tmux 的配置文件 <code>~/.tmux.conf</code> 中：<br><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&gt; unbind C-b<br>&gt; <span class="hljs-builtin-name">set</span> -g<span class="hljs-built_in"> prefix </span>C-a<br>&gt;<br></code></pre></td></tr></table></figure></p></blockquote><p>只列出<strong>常用重要命令</strong></p><h3 id="在-tmux-之外如何进行控制"><a href="#在-tmux-之外如何进行控制" class="headerlink" title="在 tmux 之外如何进行控制"></a>在 tmux 之外如何进行控制</h3><ul><li><code>session</code> 会话： session是一个特定的终端组合。输入<code>tmux</code>就可以打开一个新的session.<ul><li><code>tmux new -s blog</code> : 创建一个叫做blog的tmux session</li><li><code>tmux ls</code> : 列出所有的 session</li><li><code>tmux attach -t blog</code> ：重新开启叫做<code>blog</code>的 tmux session</li></ul></li></ul><h3 id="在-tmux-中直接控制"><a href="#在-tmux-中直接控制" class="headerlink" title="在 tmux 中直接控制"></a>在 tmux 中直接控制</h3><p>直接通过默认前缀<code>CTRL + b</code> 之后输入对应命令来操作，具体如下（这里只列出输入默认前缀之后需要输入的操作）：</p><blockquote><p> 会话基本操作</p></blockquote><ul><li><code>d</code>  脱离当前会话,可暂时返回Shell界面</li><li><code>s</code>  选择并切换会话；在同时开启了多个会话时使用</li><li><code>$</code>  重命名当前Session</li></ul><blockquote><p>窗口操作</p></blockquote><ul><li><code>c</code> 创建新窗口</li><li><code>&amp;</code> 关闭当前窗口</li><li><code>[0-9]</code> 数字键切换到指定窗口</li></ul><blockquote><p>面板操作</p></blockquote><ul><li><code>&quot;</code> 将当前面板上下分屏</li><li><code>%</code> 将当前面板左右分屏</li><li><code>x</code> 关闭当前分屏</li><li><code>o</code> 选择当前窗口中下一个面板</li><li><code>方向键</code> 移动光标选择对应面板</li><li><code>z</code> 最大化当前所在面板</li></ul><p>因为 iTerm2 的支持，很多切换的操作可以直接用鼠标进行，非常方便。具体大家可以自己尝试一下。</p><h2 id="tmux的一些个性化定制"><a href="#tmux的一些个性化定制" class="headerlink" title="tmux的一些个性化定制"></a>tmux的一些个性化定制</h2><p>如果希望做一些美化和个性化配置的话，建议使用<a href="https://github.com/gpakosz/.tmux" target="_blank" rel="noopener">gpakosz的tmux配置</a>。它的本质是一个tmux配置文件，实现了以下功能：</p><ul><li>基于powerline的美化</li><li>显示笔记本电池电量</li><li>和Mac互通的剪切板</li><li>和vim更相近的快捷键</li></ul><p>安装方式也很简单如下 (注意：如果想使用powerline美化需要先安装powerline。</p><p>可达到如图效果：<br><img src="/pic/2017-09/figure_10.png" alt=""></p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装美化</span><br>pip install powerline<br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span></span><br><span class="hljs-meta">$</span><span class="bash"> rm -rf .tmux</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/gpakosz/.tmux.git</span><br><span class="hljs-meta">$</span><span class="bash"> ln -s .tmux/.tmux.conf</span><br><span class="hljs-meta">$</span><span class="bash"> cp .tmux/.tmux.conf.local .</span><br></code></pre></td></tr></table></figure><h2 id="高效的结对编程"><a href="#高效的结对编程" class="headerlink" title="高效的结对编程"></a>高效的结对编程</h2><p>你可以将 Tmux 会话的地址分享给他人，这样他们就可以通过 SSH 接入这个会话了。由于会话是建立在 SSH 之上的，所以不会产生额外的开销。通过使用高速的互联网，对于那些连接到远程会话上的用户而言，他们会觉得这个会话就是运行在本地的。</p><h3 id="在Tmux-中使用-Tmate"><a href="#在Tmux-中使用-Tmate" class="headerlink" title="在Tmux 中使用 Tmate"></a>在Tmux 中使用 Tmate</h3><p>Tmate 是一个 Tmux 的管理工具，使用它不但能够轻松地创建 Tmux 会话而且还能够通过互联网把该会话共享给其他人。若要使用 Tmate 共享 Tmux 会话，请按照以下步骤操作：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装 Homebrew</span><br><span class="hljs-meta"><br>&gt;</span><span class="bash"> $ ruby -e <span class="hljs-string">"<span class="hljs-variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br><span class="hljs-meta"><br>#</span><span class="bash"> 安装 Tmate</span><br><br>brew update &amp;&amp;brew tap nviennot/tmate &amp;&amp;<br>brew install mate<br><span class="hljs-meta"><br>#</span><span class="bash"> 使用 Tmate 开启一个新的会话</span><br><br>tmate<br></code></pre></td></tr></table></figure><p>从 Tmux 的会话中复制由 Tmate 产生的 SSH URL。请注意屏幕下方的信息<code>“[tmate] Remote session: ssh …”：</code></p><p>利用刚刚复制下来的 URL 就可以邀请其他人通过 SSH 访问你的会话了。</p><p>了解了如何利用 Tmux 的结对编程功能之后，还可以再利用您所喜爱的运营商提供的语音服务进一步加强会话交互性。</p><h3 id="调整-Tmux-以增强其同-Vim-的集成度"><a href="#调整-Tmux-以增强其同-Vim-的集成度" class="headerlink" title="调整 Tmux 以增强其同 Vim 的集成度"></a>调整 Tmux 以增强其同 Vim 的集成度</h3><h4 id="调整背景的配色方案"><a href="#调整背景的配色方案" class="headerlink" title="调整背景的配色方案"></a>调整背景的配色方案</h4><p>当我第一次通过 Tmux 打开 Vim 时，我发现 Vim 的颜色没有正确显示。只有有字符的地方才有背景色。</p><p>这个问题是因为通过 Tmux 运行 Vim 需要配置一个特殊的终端参数（term parameter）。请将下面这行配置添加以你的 ~/.vim 文件中。</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">if exists('$TMUX')<br>set term=screen-256color<br>endif<br></code></pre></td></tr></table></figure><blockquote><p>在更新了配置文件 ~/.vimrc 以后，颜色应该就可以正确显示了。</p></blockquote><h4 id="调整光标的形状"><a href="#调整光标的形状" class="headerlink" title="调整光标的形状"></a>调整光标的形状</h4><p>在默认情况下，当通过 Tmux 运行 Vim 时，无论当前 Vim 是处于插入模式、可视模式还是其他模式，光标的形状都是一样的。这样就很难判断当前的 Vim 模式是什么。若要避免这个问题，就需要让 Tmux 通知 iTerm 更新光标的形状。为此，需要将以下配置加入到文件 ~/.vimrc 中。</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">if exists('$ITERM_PROFILE')<br>if exists('$TMUX')<br>let &amp;amp;t_SI = "&lt;Esc&gt;[3 q"<br>let &amp;amp;t_EI = "&lt;Esc&gt;[0 q"<br>else<br>let &amp;amp;t_SI = "&lt;Esc&gt;]50;CursorShape=1x7"<br>let &amp;amp;t_EI = "&lt;Esc&gt;]50;CursorShape=0x7"<br>endif<br>end<br></code></pre></td></tr></table></figure><h4 id="调整粘贴时的文本缩进"><a href="#调整粘贴时的文本缩进" class="headerlink" title="调整粘贴时的文本缩进"></a>调整粘贴时的文本缩进</h4><p>在 Vim 中粘贴文本时可能会遇到这样的问题，有时文本的缩进会发生变化，特别是在粘贴大量的文本时，这个问题会更加明显。虽然可以通过在粘贴前执行 :set nopaste 来解决这个问题，但是这里还有一种更好的解决方法。就是把下面这段配置加入到配置文件 ~/.vimrc 中，这样 Vim 就会自动地阻止粘贴文本时的自动缩进。</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">" for tmux to automatically set paste and nopaste mode at the time pasting (as happens in VIM UI)<br><br>function! WrapForTmux(s)<br><br>if !exists('$TMUX')<br><br>return a:s<br><br>endif<br><br>let tmux_start = "&lt;Esc&gt;Ptmux;"<br><br>let tmux_end = "&lt;Esc&gt;"<br><br>return tmux_start . substitute(a:s, "&lt;Esc&gt;", "&lt;Esc&gt;&lt;Esc&gt;", 'g') . tmux_end<br><br>endfunction<br><br>let &amp;amp;t_SI .= WrapForTmux("&lt;Esc&gt;[?2004h")<br><br>let &amp;amp;t_EI .= WrapForTmux("&lt;Esc&gt;[?2004l")<br><br>function! XTermPasteBegin()<br><br>set pastetoggle=&lt;Esc&gt;[201~<br><br>set paste<br><br>return ""<br><br>endfunction<br><br>inoremap &lt;special&gt; &lt;expr&gt; &lt;Esc&gt;[200~ XTermPasteBegin()<br></code></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>陈巍学基因A07-A09</title>
      <link href="/2018/04/13/%E9%99%88%E5%B7%8D%E5%AD%A6%E5%9F%BA%E5%9B%A0A07-A09/"/>
      <url>/2018/04/13/%E9%99%88%E5%B7%8D%E5%AD%A6%E5%9F%BA%E5%9B%A0A07-A09/</url>
      <content type="html"><![CDATA[<ul><li>应用Boyer-Moore的规则</li><li>把参考基因组做成索引</li></ul><a id="more"></a><h1 id="陈巍学基因A07-A09"><a href="#陈巍学基因A07-A09" class="headerlink" title="陈巍学基因A07-A09"></a>陈巍学基因A07-A09</h1><h2 id="A07：应用Boyer-Moore-二规则"><a href="#A07：应用Boyer-Moore-二规则" class="headerlink" title="A07：应用Boyer-Moore 二规则"></a>A07：应用Boyer-Moore 二规则</h2><p>我们需要联合使用<code>坏字规则</code>和<code>好后缀规则</code>。只要碰到错配，我们就要同时使用这2个规则。两个规则都会告诉我们需要跳过的次数，我们只要选择最大的进行跳过就行了。</p><p><img src="/pic/2017-03/2017-03-12-1.jpg" alt=""></p><p>实际在实施Boyer-Moore算法时，要预先建一个查询表，这样每当我们要用任何一个规则时，就到这个表里去查找可以跳多少步。做这个表格只需要模式P而不需要文本T。好后缀，坏字都需要创建表格。</p><p><img src="/pic/2017-03/2017-03-12-2.jpg" alt=""></p><h2 id="A08："><a href="#A08：" class="headerlink" title="A08："></a>A08：</h2><p><img src="/pic/2017-03/2017-03-12-3.jpg" alt=""></p><p>预处理可能会花费较多的时间，但均摊到每次比对，消耗就比较少了。</p><p>同样的，我们可以<code>预处理T</code>，解决重复比对的问题。</p><p>把文本<code>T</code>进行预处理版本的算法，叫做<code>离线算法(offline algorithm)</code>，而不处理文本的算法，被称为<code>online</code>。在线算法还是离线算法，与我们是否预处理P无关。区别在于，是否预处理文本T</p><p><img src="/pic/2017-03/2017-03-12-4.jpg" alt=""></p><ul><li>naive算法是在线算法，还是离线算法？在线。naive算法完全不做任何预处理。</li><li>Boyer-Moore算法是在线还是离线？在线。只对P进行了预处理。</li><li>Web search engine？离线算法。</li><li>Read alignment 基因序列比对问题？离线算法</li></ul><h2 id="A09：把参考基因组做成索引"><a href="#A09：把参考基因组做成索引" class="headerlink" title="A09：把参考基因组做成索引"></a>A09：把参考基因组做成索引</h2><p>把参考基因组看成是一本书，我们可以给书加上索引。当想查找某个单词，直接看索引就行了。是根据字母进行排序的。</p><p>另一个例子：到杂货店买牛奶，找到奶制品，再找牛奶。是按照分类进行排序的。</p><ul><li>做一个长度为5的子字符串的偏移值串的索引。在一张表中，放下所有<code>K-mer</code>的偏移量。</li></ul><p><img src="/pic/2017-03/2017-03-12-5.jpg" alt=""></p><p>关于第二个3，是按照字典顺序，将第三个索引插到了0和1之间。</p><p>关于第一行的4，是添加一个新的值。</p><p>做好索引：</p><p><img src="/pic/2017-03/2017-03-12-6.jpg" alt=""></p><p>我们用<code>K-mer:substring of length K</code>用<code>K-mer</code>来指代长度为<code>K</code>的子字符串。对于长度为5的子字符串，我们说<code>5-mer</code>。</p><ul><li>如何查询这个索引？query the index</li></ul><p><img src="/pic/2017-03/2017-03-12-7.jpg" alt=""></p><blockquote><p>我们找到了3</p></blockquote><p><img src="/pic/2017-03/2017-03-12-8.jpg" alt=""></p><blockquote><p>下一步验证第六个碱基是否与T相同。相同，我们可以得出结论，P在T偏移3个碱基的位置。</p></blockquote><ul><li>同样的，我们也可以从右边开始进行查询：</li></ul><p><img src="/pic/2017-03/2017-03-12-9.jpg" alt=""></p><blockquote><p>当查询到偏移为0的时候，由于0左边没有碱基，不能与P的第一位match，所以查询失败。</p><p>在查询偏移值为4：match！</p></blockquote><p><img src="/pic/2017-03/2017-03-12-10.jpg" alt=""></p><blockquote><p>说明在使用该模式时，用哪个<code>5-mer</code>并不重要，它们中的任何一个都会引导出正确的P和T匹配的偏移值。</p></blockquote><ul><li>一个修改的例子：修改后P不再match T。</li></ul><p><img src="/pic/2017-03/2017-03-12-11.jpg" alt=""></p><p><img src="/pic/2017-03/2017-03-12-12.jpg" alt=""></p><p>定义index 相匹配为<code>hit</code>，<code>hit</code>说明有可能match ，也有可能不match。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>陈巍学基因A04-A06</title>
      <link href="/2018/04/13/%E9%99%88%E5%B7%8D%E5%AD%A6%E5%9F%BA%E5%9B%A0A04-A06/"/>
      <url>/2018/04/13/%E9%99%88%E5%B7%8D%E5%AD%A6%E5%9F%BA%E5%9B%A0A04-A06/</url>
      <content type="html"><![CDATA[<ul><li>简单序列比对</li><li>基础Boyer-Moore算法</li></ul><a id="more"></a><h1 id="陈巍学基因A04-A06"><a href="#陈巍学基因A04-A06" class="headerlink" title="陈巍学基因A04-A06"></a>陈巍学基因A04-A06</h1><h2 id="A04-简单序列比对"><a href="#A04-简单序列比对" class="headerlink" title="A04 简单序列比对"></a>A04 简单序列比对</h2><p>在这个实践中，会写一个(碱基)完全匹配的算法，并用它把人工做出来的read比对到基因组上。</p><p>首先先下载一个PhiX生物体(PhiX是一种噬菌体)的基因组开始：</p><figure class="hljs highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">wget --no-check https:<span class="hljs-regexp">//</span>d28rh4a8wq0iu5.cloudfront.net<span class="hljs-regexp">/ads1/</span>data<span class="hljs-regexp">/phix.fa</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">#encoding:utf-8</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">readGenome</span><span class="hljs-params">(filename)</span>:</span><br>    genome = <span class="hljs-string">''</span><br>    <span class="hljs-keyword">with</span> open(filename,<span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> line[<span class="hljs-number">0</span>] == <span class="hljs-string">'&gt;'</span>:<br>                genome += line.rstrip()<br>    <span class="hljs-keyword">return</span> genome<br><br>genome = readGenome(<span class="hljs-string">'phix.fa'</span>)<br><br><span class="hljs-comment">#p作为read，t作为基因组</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">naive</span><span class="hljs-params">(p,t)</span>:</span><br>    occurrences = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(t) - len(p) + <span class="hljs-number">1</span>):<br>        match = <span class="hljs-keyword">True</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(p)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> t[i+j] == p[j]:<br>                match = <span class="hljs-keyword">False</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> match:<br>            occurrences.append(i)<br>    <span class="hljs-keyword">return</span> occurrences<br> <br>t = <span class="hljs-string">'AGCTTAGAtAGC'</span><br>p = <span class="hljs-string">'AG'</span><br>print(naive(p,t))<br> <br> <br><span class="hljs-comment"># 从genome中随机产生子序列</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generateReads</span><span class="hljs-params">(genome,numReads,readLen)</span>:</span><br>    <span class="hljs-string">'''Generate reads from random positions in the given genome.'''</span><br><br>    reads = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(numReads):<br>        start = random.randint(<span class="hljs-number">0</span>,len(genome)-readLen) - <span class="hljs-number">1</span><br>        reads.append(genome[start : start+readLen])<br>    <span class="hljs-keyword">return</span> reads<br><br>reads = generateReads(genome,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>)<br><br>numMatched = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> reads:<br>    matches = naive(r,genome)<br>    <span class="hljs-keyword">if</span> len(matches)&gt;<span class="hljs-number">0</span>:<br>        numMatched +=<span class="hljs-number">1</span><br><br>print(<span class="hljs-string">"%d / %d reads matched exactly!"</span> % (numMatched,len(reads)))<br></code></pre></td></tr></table></figure><h2 id="A05-简单序列比对法的效率"><a href="#A05-简单序列比对法的效率" class="headerlink" title="A05 简单序列比对法的效率"></a>A05 简单序列比对法的效率</h2><blockquote><p>实际进行比较的次数与可能比较次数的最小值接近</p></blockquote><h2 id="A06-基础Boyer-Moore算法"><a href="#A06-基础Boyer-Moore算法" class="headerlink" title="A06 基础Boyer-Moore算法"></a>A06 基础Boyer-Moore算法</h2><blockquote><p>跟上面定义的naive算法接近，但可以跳过很多不必要的比较，是算是精确比较算法中的标杆了，应用十分广泛</p></blockquote><p><img src="/pic/2017-03/2017-03-11-11.png" alt=""></p><blockquote><p>由于u没有在<code>P</code>中出现过，所以，我们直接跳过U！</p><p>而Boyer-Moore算法将这个规则应用到最大限度。</p></blockquote><ol><li><p>Try alignments in left-to-right order,and try character comparisons in right-to-left order<br><img src="/pic/2017-03/2017-03-11-12.png" alt=""></p></li><li><p>Bad character rule：当我们遇到错配(mismatch)时,我们移动P，直到错配变成匹配<br>用坏字规则有2步，这也是用Boyer-Moore算法的规则之一，<br><img src="/pic/2017-03/2017-03-11-13.png" alt=""></p></li><li><p>好后缀规则：让<code>t</code>等于内部循环中，匹配的子字符串</p><blockquote><p>好字规则是针对我们能够匹配上的字符的，我们要移动P，移动的结果，是不会把匹配的，变成错配的</p></blockquote><p><img src="/pic/2017-03/2017-03-11-14.png" alt=""></p></li></ol><blockquote><p>坏字符规则把不匹配的转到匹配的，好后缀规则试图把匹配上，保持匹配的状态，让它不要变成错配的。</p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>陈巍学基因A01-A03</title>
      <link href="/2018/04/13/%E9%99%88%E5%B7%8D%E5%AD%A6%E5%9F%BA%E5%9B%A0A01-A03/"/>
      <url>/2018/04/13/%E9%99%88%E5%B7%8D%E5%AD%A6%E5%9F%BA%E5%9B%A0A01-A03/</url>
      <content type="html"><![CDATA[<p>噬菌体基因组简单探究</p><a id="more"></a><h1 id="陈巍学基因A01-A03"><a href="#陈巍学基因A01-A03" class="headerlink" title="陈巍学基因A01-A03"></a>陈巍学基因A01-A03</h1><h2 id="A01：查看基因组的信息"><a href="#A01：查看基因组的信息" class="headerlink" title="A01：查看基因组的信息"></a>A01：查看基因组的信息</h2><blockquote><p>下载一个噬菌体的基因组</p></blockquote><blockquote><p>wget –no-check <a href="https://d28rh4a8wq0iu5.cloudfront.net/ads1/data/lambda_virus.fa" target="_blank" rel="noopener">https://d28rh4a8wq0iu5.cloudfront.net/ads1/data/lambda_virus.fa</a></p></blockquote><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">#encoding:utf-8</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">readGenome</span><span class="hljs-params">(filename)</span>:</span><br>    genome = <span class="hljs-string">''</span><br>    <span class="hljs-keyword">with</span> open(filename,<span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> line[<span class="hljs-number">0</span>] == <span class="hljs-string">'&gt;'</span>:<br>                genome += line.rstrip()<span class="hljs-comment">#rstrip是去除跟在字符串后面的空白</span><br>    <span class="hljs-keyword">return</span> genome<br><br>genome = readGenome(<span class="hljs-string">'lambda_virus.fa'</span>)<br><br>print(<span class="hljs-string">"the length of 噬菌体genome is:\n"</span>)<br>print(len(genome))<br><br><span class="hljs-comment">#统计碱基个数</span><br><br>counts = &#123;<span class="hljs-string">'A'</span>:<span class="hljs-number">0</span>,<span class="hljs-string">'C'</span>:<span class="hljs-number">0</span>,<span class="hljs-string">'T'</span>:<span class="hljs-number">0</span>,<span class="hljs-string">'G'</span>:<span class="hljs-number">0</span>&#125;<br><span class="hljs-keyword">for</span> base <span class="hljs-keyword">in</span> genome:<br>    counts[base] += <span class="hljs-number">1</span><br><br>print(counts)<br><br><span class="hljs-comment">####使用模块计算####</span><br><span class="hljs-comment">#Counter会遍历字符串中的每个字符，并且对每个字符出现次数进行计数</span><br><br><span class="hljs-keyword">import</span> collections<br>t=collections.Counter(genome)<br><br>print(t)<br></code></pre></td></tr></table></figure><h2 id="A02-查看fastq-的信息"><a href="#A02-查看fastq-的信息" class="headerlink" title="A02: 查看fastq 的信息"></a>A02: 查看fastq 的信息</h2><blockquote><p>对于fastq文件，可以看到以四行为单位，<br>第一行以@符号开头，这是一个tag，是个哪个序列的名字。<br>第二行是DNA碱基的字符串<br>第三行是+号<br>第四行是read的质量序列</p></blockquote><blockquote><p>下载一个fastq：<br>wget –no-check <a href="https://d28rh4a8wq0iu5.cloudfront.net/ads1/data/SRR835775_1.first1000.fastq" target="_blank" rel="noopener">https://d28rh4a8wq0iu5.cloudfront.net/ads1/data/SRR835775_1.first1000.fastq</a></p></blockquote><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">#encoding:utf-8</span><br><br><span class="hljs-comment">#将测序的结果及测序的质量分别放到俩数组里</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">readFastq</span><span class="hljs-params">(filename)</span>:</span><br>    sequences = []<br>    qualities = []<br>    <span class="hljs-keyword">with</span> open(filename) <span class="hljs-keyword">as</span> fh:<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:<br>            fh.readline()<br>            seq = fh.readline().rstrip()<br>            fh.readline()<br>            qual = fh.readline().rstrip()<br>            <span class="hljs-keyword">if</span> len(seq) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>            sequences.append(seq)<br>            qualities.append(qual)<br>    <span class="hljs-keyword">return</span> sequences,qualities<br><br>seqs,quals = readFastq(<span class="hljs-string">'SRR835775_1.first1000.fastq'</span>)<br><br><span class="hljs-comment">#将phred 33 编码转成数值的质量分数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">phred33ToQ</span><span class="hljs-params">(qual)</span>:</span><br>    <span class="hljs-keyword">return</span> ord(qual) - <span class="hljs-number">33</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createHist</span><span class="hljs-params">(qualities)</span>:</span><br>    hist = [<span class="hljs-number">0</span>] * <span class="hljs-number">50</span><br>    <span class="hljs-keyword">for</span> qual <span class="hljs-keyword">in</span> qualities:<br>        <span class="hljs-keyword">for</span> phred <span class="hljs-keyword">in</span> qual:<br>            q = phred33ToQ(phred)<br>            hist[q] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> hist<br><br>h = createHist(quals)<br><br><span class="hljs-comment"># 使用matplotlib(一个Python上的图形化工具)来做(可视化)</span><br><br><span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<br>mpl.use(<span class="hljs-string">'Agg'</span>)<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>plt.bar(range(len(h)),h)<br>plt.savefig(<span class="hljs-string">'1.png'</span>)<br></code></pre></td></tr></table></figure><blockquote><p>将phred 33 编码的值转成质量分数,也就是测序质量,将ASCII字符转变成质量分数<br>ord函数取一个字符，并把该字符的ASCII值编程数值<br>print(phred33ToQ(‘#’)) #得到2，说明测序质量很低。可信度比较低。<br>错误的可能性大概有30~32%,且’#’多出现在read的末尾，说明督导read的末尾时，确信度会下降</p><p>最低为2，最高为44</p></blockquote><p><img src="/pic/2017-03/2017-03-11-9.png" alt=""></p><blockquote><p>从图形结果来看，分值为2的很多，说明这一部分是质量比较差的，可能原因是这一部分的碱基发出的荧光是四种颜色的混合，比较难确认。</p></blockquote><h3 id="matplotlib小代码"><a href="#matplotlib小代码" class="headerlink" title="matplotlib小代码"></a>matplotlib小代码</h3><figure class="hljs highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<br>mpl.use(<span class="hljs-string">'Agg'</span>)<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>plt.bar(range(len(h)),h)<br>plt.savefig(<span class="hljs-string">'1.png'</span>)<br></code></pre></td></tr></table></figure><blockquote><p>必须关闭上个图形设备才能保存新画的图形：<br><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">fig = plt.figure<span class="hljs-comment">(0)</span> <span class="hljs-attr"># 新图 0</span><br>plt.savefig<span class="hljs-comment">()</span> <span class="hljs-attr"># 保存<br>plt. close(0</span>) <span class="hljs-attr"># 关闭图 0</span><br></code></pre></td></tr></table></figure></p></blockquote><p>或者<br><figure class="hljs highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">fig = plt.figure() <span class="hljs-comment"># 新图 0</span><br>plt.savefig() <span class="hljs-comment"># 保存</span><br>plt.<span class="hljs-built_in">close</span>(<span class="hljs-string">'all'</span>) <span class="hljs-comment"># 关闭图 0</span><br></code></pre></td></tr></table></figure></p><h2 id="A03：按碱基位置分析GC含量"><a href="#A03：按碱基位置分析GC含量" class="headerlink" title="A03：按碱基位置分析GC含量"></a>A03：按碱基位置分析GC含量</h2><p>不同的物种会有不同的GC含量，把整个read的GC做成图形，来看测序中是否有什么strange的事情发生。  </p><p><img src="/pic/2017-03/2017-03-11-10.png" alt=""></p><blockquote><p>图的GC含量大概60~80% </p></blockquote><figure class="hljs highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">import</span> collections<br> <span class="hljs-built_in">count</span> = collections.<span class="hljs-type">Counter</span>()<br> <span class="hljs-keyword">for</span> seq <span class="hljs-keyword">in</span> seqs:<br>     <span class="hljs-built_in">count</span>.update(seq)<br> <span class="hljs-built_in">print</span>(<span class="hljs-built_in">count</span>)<br></code></pre></td></tr></table></figure><blockquote><p>Counter({‘G’: 28742, ‘C’: 28272, ‘T’: 21836, ‘A’: 21132, ‘N’: 18})</p><p>有一些N：当碱基判读程序对一个碱基的判读很不确定时，它就会读成”N”</p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>开始建站</title>
      <link href="/2018/04/13/%E5%BC%80%E5%A7%8B%E5%BB%BA%E7%AB%99/"/>
      <url>/2018/04/13/%E5%BC%80%E5%A7%8B%E5%BB%BA%E7%AB%99/</url>
      <content type="html"><![CDATA[<h1 id="从零开始建站笔记-Hexo-NexT"><a href="#从零开始建站笔记-Hexo-NexT" class="headerlink" title="从零开始建站笔记 Hexo+NexT"></a>从零开始建站笔记 Hexo+NexT</h1><a id="more"></a><h2 id="1-初始化blog文件夹"><a href="#1-初始化blog文件夹" class="headerlink" title="1. 初始化blog文件夹"></a>1. 初始化blog文件夹</h2><figure class="hljs highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">mkdir HexoBlog<br>cd HexoBlog<br>hexo init<br><span class="hljs-built_in">npm</span> install <span class="hljs-comment"># 安装依赖包</span><br>hexo g<br>hexo s<br><br><span class="hljs-comment"># 发一篇新文章：</span><br>hexo <span class="hljs-keyword">new</span> <span class="hljs-string">'test'</span><br>hexo s -g<br></code></pre></td></tr></table></figure><h2 id="2-1-GitHub信息配置"><a href="#2-1-GitHub信息配置" class="headerlink" title="2.1 GitHub信息配置"></a>2.1 GitHub信息配置</h2><figure class="hljs highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># 创建github repo：kaigedong.github.io,并复制Repository的地址（ssh格式） </span><br><span class="hljs-comment"># 打开_config.yml文件并修改：</span><br><span class="hljs-symbol">deploy:</span><br>  <span class="hljs-symbol">type:</span> git<br>  <span class="hljs-symbol">repository:</span> git@github.<span class="hljs-symbol">com:</span>kaigedong/kaigedong.github.io.git<br>  <span class="hljs-symbol">branch:</span> master<br><br><span class="hljs-comment"># 生成ssh文件：</span><br>ssh-keygen -t rsa -C <span class="hljs-string">"dongkaige@gmail.com"</span><br>ssh-agent -s<br>ssh-add ~<span class="hljs-regexp">/.ssh/id</span>_rsa<br><br><span class="hljs-comment"># 添加到GitHub：</span><br>复制~<span class="hljs-regexp">/.ssh/id</span>_rsa.pub 内容 -- “Settings” -- <span class="hljs-string">"SSH and GPG keys"</span> -- 填写<br><br><span class="hljs-comment"># 验证：</span><br>ssh -T git@github.com<br><span class="hljs-meta">&gt;&gt;</span>&gt;Hi kaigedong! You<span class="hljs-string">'ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><h2 id="2-2-发布到GitHub"><a href="#2-2-发布到GitHub" class="headerlink" title="2.2 发布到GitHub"></a>2.2 发布到GitHub</h2><figure class="hljs highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">开始部署：<br>hexo clean<br>hexo <span class="hljs-keyword">g</span><br>hexo <span class="hljs-built_in">d</span><br>&gt;&gt;&gt;<span class="hljs-keyword">ERROR</span> Deployer not found: git<br>npm install hexo-deployer-git --<span class="hljs-keyword">save</span><br>hexo <span class="hljs-built_in">d</span><br></code></pre></td></tr></table></figure><h2 id="2-3-安装NexT主题"><a href="#2-3-安装NexT主题" class="headerlink" title="2.3 安装NexT主题"></a>2.3 安装NexT主题</h2><figure class="hljs highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/theme-<span class="hljs-keyword">next</span>/hexo-theme-<span class="hljs-keyword">next</span> themes/<span class="hljs-keyword">next</span><br>更改主目录下_config.ym<span class="hljs-variable">l:</span><br>theme: <span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><h2 id="2-4-hexo-支持更简单的命令格式了，比如："><a href="#2-4-hexo-支持更简单的命令格式了，比如：" class="headerlink" title="2.4 hexo 支持更简单的命令格式了，比如："></a>2.4 hexo 支持更简单的命令格式了，比如：</h2><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">hexo g ==  hexo generate<br>hexo d ==  hexo deploy<br>hexo s ==  hexo<span class="hljs-built_in"> server<br></span>hexo n ==  hexo new<br></code></pre></td></tr></table></figure><h2 id="2-5-Tips"><a href="#2-5-Tips" class="headerlink" title="2.5 Tips"></a>2.5 Tips</h2><p>1.如何设置「阅读全文」？</p><blockquote><p>在文章中使用 <!-- more --> 手动进行截断，Hexo 提供的方式 <strong>推荐</strong></p></blockquote><p>2.换电脑了怎么办？</p><blockquote><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> 在github创建 HexoBlog</span><br><span class="hljs-meta">&gt;</span><span class="bash"> 然后将本地仓库与之关联并推送到github仓库：</span><br><span class="hljs-meta">&gt;</span><span class="bash"> git init</span><br><span class="hljs-meta">&gt;</span><span class="bash"> git add .</span><br><span class="hljs-meta">&gt;</span><span class="bash"> git commit -m <span class="hljs-string">"初始化添加Hexo所有文件"</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> git remote add origin git@github.com:kaigedong/HexoBlog.git <span class="hljs-comment"># 根据GitHub提示</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment"># 添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> git push -u origin master <span class="hljs-comment"># 把本地内容推送到远程库</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br></code></pre></td></tr></table></figure></blockquote><p>3.发布文章流程</p><blockquote><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> hexo s <span class="hljs-comment"># 本地显示</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> hexo new <span class="hljs-string">"test"</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> hexo g</span><br><span class="hljs-meta">&gt;</span><span class="bash"> hexo d</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br><span class="hljs-meta">&gt;</span><span class="bash"> git add .</span><br><span class="hljs-meta">&gt;</span><span class="bash"> git commit -m <span class="hljs-string">"修改Hexo站点说明"</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> git push origin master</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br></code></pre></td></tr></table></figure></blockquote><blockquote></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/u012443858/article/details/60811236" target="_blank" rel="noopener">hexo+github教程之一：搭建hexo博客</a></li></ul><ul><li><a href="https://www.zhihu.com/question/21193762" target="_blank" rel="noopener">使用hexo，如果换了电脑怎么更新博客？</a></li><li><a href="https://formulahendry.github.io/2016/12/04/hexo-ci/" target="_blank" rel="noopener">Hexo的版本控制与持续集成</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000" target="_blank" rel="noopener">廖雪峰Git教程</a></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>猪的exon有多大(R版本)</title>
      <link href="/2017/09/26/%E7%8C%AA%E7%9A%84exon%E6%9C%89%E5%A4%9A%E5%A4%A7-R%E7%89%88%E6%9C%AC/"/>
      <url>/2017/09/26/%E7%8C%AA%E7%9A%84exon%E6%9C%89%E5%A4%9A%E5%A4%A7-R%E7%89%88%E6%9C%AC/</url>
      <content type="html"><![CDATA[<h1 id="How-big-are-pig-exons"><a href="#How-big-are-pig-exons" class="headerlink" title="How big are pig exons?"></a>How big are pig exons?</h1><a id="more"></a><p>当我坐在办公室，我需要研究一下猪的exon的信息。那么猪的exon有多大？我们可以用R轻松的实现：(请保存Rstudio中的其他信息防止R崩溃)</p><figure class="hljs highlight R"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment"># load the biomaRt library</span><br><span class="hljs-comment"># install it if it doesn't exist</span><br><span class="hljs-comment"># source("http://www.bioconductor.org/biocLite.R")</span><br><span class="hljs-comment"># biocLite("biomaRt")</span><br><span class="hljs-keyword">library</span>(biomaRt)<br><br><span class="hljs-comment"># get data from Ensembl</span><br>mart &lt;- useMart(<span class="hljs-string">"ensembl"</span>)<br><br><span class="hljs-comment"># we are interested in the S scrofa (pig) genome</span><br>mart &lt;- useDataset(<span class="hljs-string">"sscrofa_gene_ensembl"</span>,mart)<br><br><span class="hljs-comment"># set the attributes we want and fetch them</span><br>myatt &lt;- c(<span class="hljs-string">"ensembl_transcript_id"</span>, <span class="hljs-string">"chromosome_name"</span>,<span class="hljs-string">"ensembl_exon_id"</span>, <span class="hljs-string">"exon_chrom_start"</span>, <span class="hljs-string">"exon_chrom_end"</span>)<br>mydat &lt;- getBM(myatt, mart=mart, uniqueRows=<span class="hljs-literal">TRUE</span>)<br><br><span class="hljs-comment"># calculate the exon length</span><br>mydat$el &lt;- mydat$exon_chrom_end - mydat$exon_chrom_start + <span class="hljs-number">1</span><br><br><span class="hljs-comment"># get a unique set of exons</span><br>exons &lt;- unique(mydat[,c(<span class="hljs-string">"ensembl_exon_id"</span>,<span class="hljs-string">"exon_chrom_start"</span>,<span class="hljs-string">"exon_chrom_end"</span>,<span class="hljs-string">"el"</span>)])<br><br><span class="hljs-comment"># plot</span><br>hist(exons$el, breaks=<span class="hljs-number">10000</span>, col=<span class="hljs-string">"blue"</span>, border=<span class="hljs-string">"blue"</span>, main=<span class="hljs-string">"Histogram of S scrofa exon lengths"</span>, xlab=<span class="hljs-string">"length"</span>)<br><br><span class="hljs-comment"># how long in Mb?</span><br><br>sum(exons$el)/<span class="hljs-number">1000000</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>R极客的情人节</title>
      <link href="/2017/09/26/R%E6%9E%81%E5%AE%A2%E7%9A%84%E6%83%85%E4%BA%BA%E8%8A%82/"/>
      <url>/2017/09/26/R%E6%9E%81%E5%AE%A2%E7%9A%84%E6%83%85%E4%BA%BA%E8%8A%82/</url>
      <content type="html"><![CDATA[<p><img src="/pic/2017-09/figure_16.png" alt=""></p><a id="more"></a><figure class="hljs highlight R"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R">a &lt;- seq(<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,by=<span class="hljs-number">0.05</span>)<br>x&lt;- <span class="hljs-number">10</span>* (sin(a)^<span class="hljs-number">3</span>)<br>y &lt;- <span class="hljs-number">10</span> * cos(a) - <span class="hljs-number">3</span>*cos(<span class="hljs-number">2</span>*a) - <span class="hljs-number">2</span>*cos(<span class="hljs-number">3</span>*a)<br>plot(x,y)<br><br><span class="hljs-comment"># suggested update from @jokereumers on Twitter:</span><br>plot(x,y, type = <span class="hljs-string">'l'</span>, col = <span class="hljs-string">'red'</span>, lwd = <span class="hljs-number">10</span>, axes = <span class="hljs-literal">FALSE</span>)<br><br><span class="hljs-comment"># more updates from @BioMickWatson</span><br>plot(x,y, type = <span class="hljs-string">'l'</span>, col = <span class="hljs-string">'red'</span>, lwd = <span class="hljs-number">10</span>, axes = <span class="hljs-literal">FALSE</span>)<br>lines(-<span class="hljs-number">9</span>:-<span class="hljs-number">1</span>, -<span class="hljs-number">9</span>:-<span class="hljs-number">1</span>, col=<span class="hljs-string">"pink"</span>, lwd=<span class="hljs-number">10</span>)<br>lines(<span class="hljs-number">8</span>:<span class="hljs-number">10</span>, <span class="hljs-number">8</span>:<span class="hljs-number">10</span>, col=<span class="hljs-string">"pink"</span>, lwd=<span class="hljs-number">10</span>)<br>lines(rep(-<span class="hljs-number">9</span>,<span class="hljs-number">4</span>), -<span class="hljs-number">9</span>:-<span class="hljs-number">6</span>, col=<span class="hljs-string">"pink"</span>, lwd=<span class="hljs-number">10</span>)<br>lines(-<span class="hljs-number">9</span>:-<span class="hljs-number">6</span>, rep(-<span class="hljs-number">9</span>,<span class="hljs-number">4</span>), col=<span class="hljs-string">"pink"</span>, lwd=<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>You’re welcome ;)</p><p>转自 <a href="http://www.ark-genomics.org/events-online-training/r-geeks-valentines-day" target="_blank" rel="noopener">here</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Counting known microRNAs in five easy steps</title>
      <link href="/2017/09/26/Counting-known-microRNAs-in-five-easy-steps/"/>
      <url>/2017/09/26/Counting-known-microRNAs-in-five-easy-steps/</url>
      <content type="html"><![CDATA[<p>获取一个示例的数据集</p><p>获取当前miRBase 的成熟序列</p><p>将尿嘧啶转为胸腺嘧啶</p><p>通过一行命令搜索并计算：</p><p>通过一行命令搜索并计算</p><a id="more"></a><h1 id="Counting-known-microRNAs-in-five-easy-steps"><a href="#Counting-known-microRNAs-in-five-easy-steps" class="headerlink" title="Counting known microRNAs in five easy steps"></a>Counting known microRNAs in five easy steps</h1><p>翻译自<a href="http://www.ark-genomics.org/events-online-training/counting-known-micrornas-five-easy-steps" target="_blank" rel="noopener">这里</a></p><p>假设，当你来到这里，你应该是知道<a href="https://en.wikipedia.org/wiki/MicroRNA" target="_blank" rel="noopener">microRNAs</a>是什么. 或许有人看过我的演讲<a href="http://www.nottingham.ac.uk/deepseq/documents/ngs2011finalagenda.pdf" target="_blank" rel="noopener">UK Next-generation sequencing</a> ,标题为<code>21 ‐ 23 facts; the devil in the detail of microRNA‐Seq</code>.  对于这一小类的RNA, 它们肯定是有很大的影响，现在已有大量的生物信息学工具来处理microRNA 测序数据(microRNA-seq). 然而，基本的工作来数已知的microRNA 是非常的简单的，每个人都能做，只用简单的Unix 技巧（下面使用<code>Novoalign</code>这个很酷的工具）。下面的代码假设你在路径中有<code>Novoalign</code>. 这事怎么做的：</p><blockquote><p>5个小步骤来统计human 中的microRNAs</p></blockquote><h2 id="1-获取一个示例的数据集"><a href="#1-获取一个示例的数据集" class="headerlink" title="1. 获取一个示例的数据集"></a>1. 获取一个示例的数据集</h2><p>这个数据集来自发表在<em>Genome Research</em>上的人类研究：</p><p>Morin RD, O’Connor MD, Griffith M, Kuchenbauer F, Delaney A, Prabhu AL, Zhao Y, McDonald H, Zeng T, Hirst M, Eaves CJ, Marra MA. (2008) Application of massively parallel sequencing to microRNA profiling and discovery in human embryonic stem cells. Genome Res. 18(4):610-21. [<a href="http://genome.cshlp.org/content/18/4/610.abstract" target="_blank" rel="noopener">link</a>]</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR026/SRR026762/SRR026762.fastq.gz<br></code></pre></td></tr></table></figure><h2 id="2-获取当前miRBase-的成熟序列"><a href="#2-获取当前miRBase-的成熟序列" class="headerlink" title="2. 获取当前miRBase 的成熟序列"></a>2. 获取当前miRBase 的成熟序列</h2><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget ftp://mirbase.org/pub/mirbase/CURRENT/mature.fa.gz<br></code></pre></td></tr></table></figure><h2 id="3-只提取human-microRNAs-为了方便，将尿嘧啶转为胸腺嘧啶"><a href="#3-只提取human-microRNAs-为了方便，将尿嘧啶转为胸腺嘧啶" class="headerlink" title="3. 只提取human microRNAs, 为了方便，将尿嘧啶转为胸腺嘧啶"></a>3. 只提取human microRNAs, 为了方便，将<strong>尿嘧啶转为胸腺嘧啶</strong></h2><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zcat  mature.fa.gz | grep -A 1 "^&gt;hsa" | grep -v "^-" | sed 's/U/T/g' &gt; human_mature.fa<br></code></pre></td></tr></table></figure><h2 id="4-创建-Novoalign-inde-Novoalign-是免费的，可从http-www-novocraft-com-得到"><a href="#4-创建-Novoalign-inde-Novoalign-是免费的，可从http-www-novocraft-com-得到" class="headerlink" title="4. 创建 Novoalign inde. Novoalign 是免费的，可从http://www.novocraft.com 得到"></a>4. 创建 Novoalign inde. Novoalign 是免费的，可从<a href="http://www.novocraft.com" target="_blank" rel="noopener">http://www.novocraft.com</a> 得到</h2><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">novoindex human_mature.nidx human_mature.fa<br></code></pre></td></tr></table></figure><h2 id="5-通过一行命令搜索并计算："><a href="#5-通过一行命令搜索并计算：" class="headerlink" title="5. 通过一行命令搜索并计算："></a>5. 通过一行命令搜索并计算：</h2><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">novoalign -f SRR026762.fastq.gz -F STDFQ -d human_mature.nidx -l 18 -s 1 -a -R 0 -r Random -t 0 \<br>                 | grep "^@" | awk '$9 != "" &#123;print $9&#125;' \<br>                 | sort | uniq -c | sort -n -r &gt; counts.txt<br></code></pre></td></tr></table></figure><p><strong>下面看一下结果</strong></p><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">head counts.txt<br>#  <span class="hljs-number">126476</span> &gt;hsa-miR<span class="hljs-number">-92</span>a<span class="hljs-number">-3</span>p<br>#  <span class="hljs-number">120762</span> &gt;hsa-miR<span class="hljs-number">-103</span>b<br>#  <span class="hljs-number">120576</span> &gt;hsa-miR<span class="hljs-number">-103</span>a<span class="hljs-number">-3</span>p<br>#   <span class="hljs-number">62704</span> &gt;hsa-miR<span class="hljs-number">-25</span><span class="hljs-number">-3</span>p<br>#   <span class="hljs-number">53155</span> &gt;hsa-miR<span class="hljs-number">-92</span>b<span class="hljs-number">-3</span>p<br>#   <span class="hljs-number">49215</span> &gt;hsa-miR<span class="hljs-number">-372</span><br>#   <span class="hljs-number">42536</span> &gt;hsa-miR<span class="hljs-number">-378</span>a<span class="hljs-number">-3</span>p<br>#   <span class="hljs-number">37287</span> &gt;hsa-miR<span class="hljs-number">-140</span><span class="hljs-number">-3</span>p<br>#   <span class="hljs-number">36178</span> &gt;hsa-miR<span class="hljs-number">-21</span><span class="hljs-number">-5</span>p<br></code></pre></td></tr></table></figure><blockquote><p>文章中的一个结论是『最丰富的miRNA是miR-103 』.</p><p>从结果看他们漏掉了一个（我猜hsa-miR-92a-3p是2008年之后发现的）</p></blockquote><p>现在我们完成了。运行平台Scientific Linux 5 using Novoalign V2.07.18. 如果你有问题,<a href="mick.watson@roslin.ed.ac.uk">e-mail me</a>. 请注意awk 中使用的<strong><code>$9</code></strong>可能根据你的<code>reads identifier</code> 而改变， 所以<strong>检查一下运行Novoalign时，放到了标识符哪一列。</strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Adapter and quality trimming of illumina data</title>
      <link href="/2017/09/25/Adapter-and-quality-trimming-of-illumina-data/"/>
      <url>/2017/09/25/Adapter-and-quality-trimming-of-illumina-data/</url>
      <content type="html"><![CDATA[<p>闲着翻译一个[文章]<br>FastQC报告的adapter<br>更深入了解一下adapter<br>究竟何去除掉adapter污染呢？<br><a id="more"></a></p><h1 id="Adapter-and-quality-trimming-of-illumina-data"><a href="#Adapter-and-quality-trimming-of-illumina-data" class="headerlink" title="Adapter and quality trimming of illumina data"></a>Adapter and quality trimming of illumina data</h1><p>闲着翻译一个<a href="http://www.ark-genomics.org/events-online-training-eu-training-course/adapter-and-quality-trimming-illumina-data" target="_blank" rel="noopener">文章</a></p><h2 id="part1-FastQC报告的adapter"><a href="#part1-FastQC报告的adapter" class="headerlink" title="part1 : FastQC报告的adapter"></a>part1 : FastQC报告的adapter</h2><blockquote><p>从之前的结果，查看过表达的序列，可以看到<code>fastqc</code>认为我们数据中存在下面的：</p></blockquote><ul><li>Illumina PCR Primer Index 1</li><li>RNA PCR Primer, Index 47</li><li>Illumina Single End Adapter 2</li><li>Illumina Paired End PCR Primer 2</li></ul><p>这些序列是啥？Illumina 以PDF文件的形式提供这些序列，你必须注册<a href="http://www.illumina.com并获取它。我在这里提供如下：" target="_blank" rel="noopener">www.illumina.com并获取它。我在这里提供如下：</a></p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash">PCRPrimerIndex1</span><br>CAAGCAGAAGACGGCATACGAGATCGTGATGTGACTGGAGTTC<br><span class="hljs-meta">&gt;</span><span class="bash">RNAPCRPrimerIndex47</span><br>CAAGCAGAAGACGGCATACGAGATCTTCGAGTGACTGGAGTTCCTTGGCACCCGAGAATTCCA<br><span class="hljs-meta">&gt;</span><span class="bash">IlluminaSingleEndAdapter2</span><br>CAAGCAGAAGACGGCATACGAGCTCTTCCGATCT<br><span class="hljs-meta">&gt;</span><span class="bash">PEPCRPrimer2.0</span><br>CAAGCAGAAGACGGCATACGAGATCGGTCTCGGCATTCCTGCTGAACCGCTCTTCCGATCT<br></code></pre></td></tr></table></figure><p>可以看到，这些序列之间有很多共同点。</p><p>FastQC实际使用的列表存放在<strong><code>/usr/share/java/fastqc-0.10.1/Contaminants/contaminant_list.txt</code></strong></p><p>我们也应该考虑反向互补的序列，因为FastQC会同样查找它们。</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash">PCRPrimerIndex1_RC</span><br>GAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTG<br><span class="hljs-meta">&gt;</span><span class="bash">RNAPCRPrimerIndex47_RC</span><br>TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTCGAAGATCTCGTATGCCGTCTTCTGCTTG<br><span class="hljs-meta">&gt;</span><span class="bash">IlluminaSingleEndAdapter2_RC</span><br>AGATCGGAAGAGCTCGTATGCCGTCTTCTGCTTG<br><span class="hljs-meta">&gt;</span><span class="bash">PEPCRPrimer2.0_RC</span><br>AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG<br></code></pre></td></tr></table></figure><p>现在我透露给你一个小秘密——</p><blockquote><p>这个数据集<strong>实际</strong>使用的adapter 是：</p></blockquote><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash">SmallRNA3pAdapter_1.5</span><br>ATCTCGTATGCCGTCTTCTGCTTG<br></code></pre></td></tr></table></figure><p>如果我们再看FastQ报的反向互补的adapter,我们可以看到(空格分开的后面是adapter)：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash">PCRPrimerIndex1_RC</span><br>GAACTCCAGTCACATCACG   ATCTCGTATGCCGTCTTCTGCTTG<br><span class="hljs-meta">&gt;</span><span class="bash">RNAPCRPrimerIndex47_RC</span><br>TGGAATTCTCGGGTGCCAAGGAACTCCAGTCACTCGAAG   ATCTCGTATGCCGTCTTCTGCTTG<br><span class="hljs-meta">&gt;</span><span class="bash">IlluminaSingleEndAdapter2_RC</span><br>AGATCGGAAGAGCTCGTATGCCGTCTTCTGCTTG<br><span class="hljs-meta">&gt;</span><span class="bash">PEPCRPrimer2.0_RC</span><br>AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCG   ATCTCGTATGCCGTCTTCTGCTTG<br></code></pre></td></tr></table></figure><p>所以，我们需要了解：</p><ul><li>FastQC可以告诉我们adapter 的污染，但 可能不会告诉我们正确的adapter</li><li>确定我们数据中出现的adapter可能需要更深入的工作</li></ul><p>一个策略即是问产生这些数据的科学家，但有时他们也不知道。</p><hr><h2 id="更深入了解一下adapter："><a href="#更深入了解一下adapter：" class="headerlink" title="更深入了解一下adapter："></a>更深入了解一下adapter：</h2><p>我们看一下adapter:</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd<br><br>zcat SRR026762.fastq.gz | head -n 20000 | grep ATCTCGTATGCCGTCTTCTGCTTG<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-09/figure_15.png" alt=""></p><p>如果你够敏感，你将会注意到，我们adapter 边上也是一个重复序列：</p><figure class="hljs highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">TACAGTCCGACG   ATCTCGTATGCCGTCTTCTGCTTG<br>TACAGTCCGACG   ATCTCGTATGCCGTCTTCTGCTTG<br>TACAGTCCGACG   ATCTCGTATGCCGTCTTCTGCTTG<br>TACAGTCCGACG   ATCTCGTATGCCGTCTTCTGCTTG</span><br></code></pre></td></tr></table></figure><p>结果证明是这事Small RNA sequencing primmer 的一部分：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash">SmallRNASequencingPrimer</span><br>CGACAGGTTCAGAGTTCTACAGTCCGACGATC<br></code></pre></td></tr></table></figure><p>我们把两个结合起来，得到：</p><figure class="hljs highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">CGACAGGTTCAGAGTTCTACAGTCCGACGATC                             &lt;- Small RNA Primer<br>                 TACAGTCCGACGATCTCGTATGCCGTCTTCTGCTTG        &lt;- Our read(s)<br>                             ATCTCGTATGCCGTCTTCTGCTTG        &lt;- Small RNA <span class="hljs-number">5</span><span class="hljs-string">' adapter</span><br></code></pre></td></tr></table></figure><p>(原文解释很清楚)Essentially, what is happening here, is that <strong>during the small RNA library prep stage, small RNA fragments are selected. </strong> This inevitable ends up with a huge amount of “primer-dimer” i.e. where the Illumina primers/adapters have no actual product between them.</p><h2 id="究竟何去除掉adapter污染呢？"><a href="#究竟何去除掉adapter污染呢？" class="headerlink" title="究竟何去除掉adapter污染呢？"></a>究竟何去除掉adapter污染呢？</h2><h3 id="1）使用cutadapt-去除adapter"><a href="#1）使用cutadapt-去除adapter" class="headerlink" title="1）使用cutadapt 去除adapter"></a>1）使用cutadapt 去除adapter</h3><p>cutadapt 是一个专门去除NGS数据adapter的工具。查看详细帮组，输入<code>cutadapt -h</code></p><p>因为我们数据中有很多接头，我们运行cutadapt 来去除它们。命令是：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cutadapt -a CGACAGGTTCAGAGTTCTACAGTCCGACGATC \<br>         -a TACAGTCCGACGATC \<br>         -a ATCTCGTATGCCGTCTTCTGCTTG \<br>         -e 0.1 -O 5 -m 15 \<br>         -o SRR026762_adaprm.fastq SRR026762.fastq.gz<br></code></pre></td></tr></table></figure><p>参数意义：</p><ul><li><code>-a CGACAGGTTCAGAGTTCTACAGTCCGACGATC</code>  : 第一个去除的adapter , 这是一个small RNA primer.</li><li><code>-a TACAGTCCGACGATC</code>: 第二个去除的adapter，这是我们观察到的Small RNA primer </li><li><code>-a ATCTCGTATGCCGTCTTCTGCTTG</code>: 第三个去除的adapter, 这是全长的Small RNA 5’ adapter</li><li><code>-e 0.1</code>: 允许read 和 adapter之间，每10个允许一个错配。</li><li><code>-O 5</code>:  至少有5个碱基的重叠</li><li><code>-m 15</code>: trimming 之后，小于15bp的reads将被扔掉</li><li><code>-o SRR026762_adaprm.fastq</code>： 把trimmer data 放到这个文件里。</li></ul><p>程序的输出是这样的：</p><figure class="hljs highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Maximum error rate: 10.00%<br>   Processed reads: 5677631<br>     Trimmed reads:<span class="hljs-number"> 1927223 </span>( 33.9%)<br>   Total basepairs:   <span class="hljs-number"> 204394716 </span>(204.4 Mbp)<br> Trimmed basepairs:    <span class="hljs-number"> 41594144 </span>(41.6 Mbp) (20.35% of total)<br>   Too short reads:<span class="hljs-number"> 1016544 </span>( 17.9% of processed reads)<br>    Too long reads:<span class="hljs-number"> 0 </span>(  0.0% of processed reads)<br>        Total time:    287.36 s<br>     Time per read:      0.05 ms<br><br>=== Adapter<span class="hljs-number"> 1 </span>===<br><br>Adapter 'CGACAGGTTCAGAGTTCTACAGTCCGACGATC', length 32, was trimmed<span class="hljs-number"> 333 </span>times.<br><br>Lengths of removed sequences<br>length  count   expected<br>5      <span class="hljs-number"> 331 </span>    5544.6<br>7      <span class="hljs-number"> 1 </span>      346.5<br>10     <span class="hljs-number"> 1 </span>      5.4<br><br>=== Adapter<span class="hljs-number"> 2 </span>===<br><br>Adapter 'TACAGTCCGACGATC', length 15, was trimmed<span class="hljs-number"> 52873 </span>times.<br><br>Lengths of removed sequences<br>length  count   expected<br>5      <span class="hljs-number"> 93 </span>     5544.6<br>6      <span class="hljs-number"> 1121 </span>   1386.1<br>7      <span class="hljs-number"> 1082 </span>   346.5<br>8      <span class="hljs-number"> 7 </span>      86.6<br>9      <span class="hljs-number"> 2 </span>      21.7<br>10     <span class="hljs-number"> 3 </span>      5.4<br>11     <span class="hljs-number"> 2 </span>      1.4<br>&gt;=17   <span class="hljs-number"> 50563 </span>  0.1<br><br>=== Adapter<span class="hljs-number"> 3 </span>===<br><br>Adapter 'ATCTCGTATGCCGTCTTCTGCTTG', length 24, was trimmed<span class="hljs-number"> 1874017 </span>times.<br><br>Lengths of removed sequences<br>length  count   expected<br>5      <span class="hljs-number"> 322 </span>    5544.6<br>6      <span class="hljs-number"> 90 </span>     1386.1<br>7      <span class="hljs-number"> 162 </span>    346.5<br>8      <span class="hljs-number"> 20 </span>     86.6<br>9      <span class="hljs-number"> 132 </span>    21.7<br>10     <span class="hljs-number"> 384 </span>    5.4<br>11     <span class="hljs-number"> 1257 </span>   1.4<br>12     <span class="hljs-number"> 4026 </span>   0.3<br>13     <span class="hljs-number"> 10585 </span>  0.1<br>14     <span class="hljs-number"> 33836 </span>  0.0<br>15     <span class="hljs-number"> 84695 </span>  0.0<br>16     <span class="hljs-number"> 104889 </span> 0.0<br>17     <span class="hljs-number"> 86715 </span>  0.0<br>18     <span class="hljs-number"> 77590 </span>  0.0<br>19     <span class="hljs-number"> 121253 </span> 0.0<br>20     <span class="hljs-number"> 199881 </span> 0.0<br>21     <span class="hljs-number"> 182110 </span> 0.0<br>22     <span class="hljs-number"> 205659 </span> 0.0<br>23     <span class="hljs-number"> 184010 </span> 0.0<br>24     <span class="hljs-number"> 232069 </span> 0.0<br>25     <span class="hljs-number"> 137080 </span> 0.0<br>&gt;=26   <span class="hljs-number"> 207252 </span> 0.0<br></code></pre></td></tr></table></figure><p>可以看到，超过33% 的reads有某种形式的adapter.  之后超过17% 的reads 小于15bp被丢弃了。结果在<strong>SRR026762_adaprm.fastq</strong>中。</p><blockquote><p>作业问题：</p></blockquote><p>How many reads are in SRR026762_adaprm.fastq?</p><p>Can you think of a combination of <strong>cat</strong>, <strong>paste </strong>and <strong>awk </strong>that would print out a column of sequence lengths?</p><p>Can you think of how you might add <strong>sort</strong>, and <strong>uniq -c</strong> to count how many there are of each length?</p><h3 id="2）使用sickle-基于quality-来trim-reads"><a href="#2）使用sickle-基于quality-来trim-reads" class="headerlink" title="2）使用sickle 基于quality 来trim reads"></a>2）使用sickle 基于quality 来trim reads</h3><p>如我们所见，Illumina reads (别的其他技术同样如此)的质量到reads结束逐渐下降。当我们错误的把它们组装进基因组，或者用它们call SNP， 将需要将这些低质量的bases 去除。我们推荐使用<code>sickle</code>，一个quality trimmer, 并支持paired-end 模式。</p><blockquote><p>支持paired-end 模式是什么意思</p></blockquote><p>双端测序是我们对一个长的DNA片段进行从两端进行测序。所以我们知道这些paired-reads 来自同一个片段，另外他们应该离得多远，这当我们来比对和组装它们时非常有用。最常见的表现是是有两个区域，第一个包含<code>read 1</code>, 第二个包含<code>read 2</code>. 因此，第一个文件中的第一个read 和 第二个文件中的第一个read 是成对的，第二个reads 和 第二个成对等。</p><blockquote><p>这有什么用</p></blockquote><p>需要维持在每个文件中的reads 的顺序。如果我们从一个文件中去除了一个read，因为它低质量或者包含adapter, 我们也必须去除另一个文件中对应的read. <code>Sickle</code>这样做的很好，但不幸的是<code>cutadapt</code>不这样干。</p><blockquote><p>输入</p></blockquote><p><code>sickle</code></p><p><code>sickle se</code></p><p><code>sickle pe</code></p><p>这将显示每个命令的帮助信息。 我们trimmed adapters 的这个microRNA 数据是单端的测序文件，因此我们可以通过下面命令trim:</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sickle se -f SRR026762_adaprm.fastq -t sanger -o SRR026762_adaprm_trim.fastq -q 30 -l 15<br></code></pre></td></tr></table></figure><blockquote><p>参数的含义</p></blockquote><ul><li><code>se</code>: 使用单端模式</li><li><code>-f SRR026762_adaprm.fastq</code> : 这事输入的fastq文件</li><li><code>-t sanger</code>: 质量编码方式。所有从EBI 或者 NCBI 下载的应该是<code>sanger</code>编码的。 可通过下面检查解释：<a href="http://en.wikipedia.org/wiki/FASTQ_format#Encoding" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/FASTQ_format#Encoding</a></li><li><code>-o SRR026762_adaprm_trim.fastq</code> : 输出文件</li><li><code>-q 30</code> : 使用的质量值。低于这个分数的reads将会被trimmed 掉，使用一个滑动窗口</li><li><code>-l 15</code>: 在trim之后允许的最小长度，这里我们去除小于15bp的reads</li></ul><blockquote><p>输出会像这个：</p></blockquote><figure class="hljs highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">FastQ records kept: <span class="hljs-number">2622021</span><br>FastQ records discarded: <span class="hljs-number">2039066</span><br></code></pre></td></tr></table></figure><p>如你所见，丢弃了很多reads. </p><p><em>Try trimming using a lower quality value (e.g. 20) - how many reads are kept then?</em></p><p><em>Try allowing shorter reads to be kept (e.g. 10bp) - how many reads are kept then?</em></p><blockquote><p>那trim paired reads 会怎么样？我们在<strong>training</strong>文件夹下有：</p></blockquote><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ubuntu@domU-12-31-39-10-6D-92:~$ ls -l training/rnaseq/*.fastq.gz<br>-rw-rw-r-- 1 ubuntu ubuntu 65721000 Oct  5  2011 training/rnaseq/ERR022486_chr22_read1.fastq.gz<br>-rw-rw-r-- 1 ubuntu ubuntu 62899231 Oct  5  2011 training/rnaseq/ERR022486_chr22_read2.fastq.gz<br>-rw-rw-r-- 1 ubuntu ubuntu 41417843 Oct  5  2011 training/rnaseq/ERR022488_chr22_read1.fastq.gz<br>-rw-rw-r-- 1 ubuntu ubuntu 39405527 Oct  5  2011 training/rnaseq/ERR022488_chr22_read2.fastq.gz<br></code></pre></td></tr></table></figure><p>我们trim 这些reads的命令是：</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sickle pe -f training/rnaseq/ERR022486_chr22_read1.fastq.gz \<br>          -r training/rnaseq/ERR022486_chr22_read2.fastq.gz \<br>          -t sanger \<br>          -o ERR022486_chr22_read1_trim.fastq \<br>          -p ERR022486_chr22_read2_trim.fastq \<br>          -s ERR022486_chr22_single_trim.fastq \<br>          -q 30 -l 15<br></code></pre></td></tr></table></figure><blockquote><p>参数的解释</p></blockquote><ul><li><code>pe</code>: 使用双端模式</li><li><code>-f training/rnaseq/ERR022486_chr22_read1.fastq.gz</code> : read1 的fastq文件</li><li><code>-r training/rnaseq/ERR022486_chr22_read2.fastq.gz</code>： read2 de fastq 文件</li><li><code>-t sanger</code>：质量编码方式。所有从EBI 或者 NCBI 下载的应该是<code>sanger</code>编码的。 可通过下面检查解释：<a href="http://en.wikipedia.org/wiki/FASTQ_format#Encoding" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/FASTQ_format#Encoding</a></li><li><code>-o ERR022486_chr22_read1_trim.fastq</code>： 从read1 的文件中trimmed之后的输出文件</li><li><code>-p ERR022486_chr22_read2_trim.fastq</code>：从read2 的文件中trimmed之后的输出文件</li><li><code>-s ERR022486_chr22_single_trim.fastq</code>： 不符合质量检测或长度检测的成对的reads.</li><li><code>-q 30</code>trimming 之后，小于15bp的reads将被扔掉</li><li><code>-l 15</code>在trim之后允许的最小长度，这里我们去除小于15bp的reads</li></ul><blockquote><p>输出结果看起来是这样：</p></blockquote><figure class="hljs highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">FastQ paired records <span class="hljs-string">kept:</span> <span class="hljs-number">1357006</span> (<span class="hljs-number">678503</span> pairs)<br>FastQ single records <span class="hljs-string">kept:</span> <span class="hljs-number">118391</span> (from <span class="hljs-string">PE1:</span> <span class="hljs-number">89173</span>, from <span class="hljs-string">PE2:</span> <span class="hljs-number">29218</span>)<br>FastQ paired records <span class="hljs-string">discarded:</span> <span class="hljs-number">106702</span> (<span class="hljs-number">53351</span> pairs)<br>FastQ single records <span class="hljs-string">discarded:</span> <span class="hljs-number">118391</span> (from <span class="hljs-string">PE1:</span> <span class="hljs-number">29218</span>, from <span class="hljs-string">PE2:</span> <span class="hljs-number">89173</span>)<br></code></pre></td></tr></table></figure><p><em>What happens if you set a quality threshold of 20?</em></p><p><em>What happens if you set the length threshold at 10?  At 0?</em></p><p>现在我们完成了！现在你可以trim adapters 并评估单端或双端的Illumina data 的质量。</p><p>如果你有更多的空闲时间，你可以登录EBI European Nucleotide Archive, 下载并练习你的新技能(<a href="http://www.ebi.ac.uk/ena/data/view/SRP008449" target="_blank" rel="noopener">http://www.ebi.ac.uk/ena/data/view/SRP008449</a>)</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>pytorch:CNN卷积神经网络</title>
      <link href="/2017/09/23/pytorch-CNN%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2017/09/23/pytorch-CNN%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      <content type="html"><![CDATA[<p>卷积神经网络目前被广泛地用在图片识别上, 已经有层出不穷的应用, 一步一步做一个分析手写数字的 CNN 吧.</p><a id="more"></a><h2 id="MNIST手写数据"><a href="#MNIST手写数据" class="headerlink" title="MNIST手写数据"></a>MNIST手写数据</h2><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> torch.autograd <span class="hljs-keyword">import</span> Variable<br><span class="hljs-keyword">import</span> torch.utils.data <span class="hljs-keyword">as</span> Data<br><span class="hljs-keyword">import</span> torchvision      <span class="hljs-comment"># 数据库模块</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>torch.manual_seed(<span class="hljs-number">1</span>)    <span class="hljs-comment"># reproducible</span><br><br><span class="hljs-comment"># Hyper Parameters</span><br>EPOCH = <span class="hljs-number">1</span>           <span class="hljs-comment"># 训练整批数据多少次, 为了节约时间, 我们只训练一次</span><br>BATCH_SIZE = <span class="hljs-number">50</span><br>LR = <span class="hljs-number">0.001</span>          <span class="hljs-comment"># 学习率</span><br>DOWNLOAD_MNIST = <span class="hljs-keyword">True</span>  <span class="hljs-comment"># 如果你已经下载好了mnist数据就写上 Fasle</span><br><br><br><span class="hljs-comment"># Mnist 手写数字</span><br>train_data = torchvision.datasets.MNIST(<br>    root=<span class="hljs-string">'./mnist/'</span>,    <span class="hljs-comment"># 保存或者提取位置</span><br>    train=<span class="hljs-keyword">True</span>,  <span class="hljs-comment"># this is training data</span><br>    transform=torchvision.transforms.ToTensor(),    <span class="hljs-comment"># 转换 PIL.Image or numpy.ndarray 成</span><br>                                                    <span class="hljs-comment"># torch.FloatTensor (C x H x W), 训练的时候 normalize 成 [0.0, 1.0] 区间</span><br>    download=DOWNLOAD_MNIST,          <span class="hljs-comment"># 没下载就下载, 下载了就不用再下了</span><br>)<br></code></pre></td></tr></table></figure><h3 id="一个数字的例子"><a href="#一个数字的例子" class="headerlink" title="一个数字的例子"></a>一个数字的例子</h3><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># plot one example</span><br>print(train_data.train_data.size())                 <span class="hljs-comment"># (60000, 28, 28)</span><br>print(train_data.train_labels.size())               <span class="hljs-comment"># (60000)</span><br>plt.imshow(train_data.train_data[<span class="hljs-number">0</span>].numpy(), cmap=<span class="hljs-string">'gray'</span>)<br>plt.title(<span class="hljs-string">'%i'</span> % train_data.train_labels[<span class="hljs-number">0</span>])<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-09/figure_9.png" alt=""></p><p>黑色的地方的值都是0, 白色的地方值大于0.</p><p>同样, 我们除了训练数据, 还给一些测试数据, 测试看看它有没有训练好.</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">test_data = torchvision.datasets.MNIST(root=<span class="hljs-string">'./mnist/'</span>, train=<span class="hljs-keyword">False</span>)<br><br><span class="hljs-comment"># 批训练 50samples, 1 channel, 28x28 (50, 1, 28, 28)</span><br>train_loader = Data.DataLoader(dataset=train_data, batch_size=BATCH_SIZE, shuffle=<span class="hljs-keyword">True</span>)<br><br><span class="hljs-comment"># 为了节约时间, 我们测试时只测试前2000个</span><br>test_x = Variable(torch.unsqueeze(test_data.test_data, dim=<span class="hljs-number">1</span>), volatile=<span class="hljs-keyword">True</span>).type(torch.FloatTensor)[:<span class="hljs-number">2000</span>]/<span class="hljs-number">255.</span>   <span class="hljs-comment"># shape from (2000, 28, 28) to (2000, 1, 28, 28), value in range(0,1)</span><br>test_y = test_data.test_labels[:<span class="hljs-number">2000</span>]<br></code></pre></td></tr></table></figure><h2 id="CNN-模型"><a href="#CNN-模型" class="headerlink" title="CNN 模型"></a>CNN 模型</h2><p>和以前一样, 我们用一个 class 来建立 CNN 模型. 这个 CNN 整体流程是 卷积(<code>Conv2d</code>) -&gt; 激励函数(<code>ReLU</code>) -&gt; 池化, 向下采样 (<code>MaxPooling</code>) -&gt; 再来一遍 -&gt; 展平多维的卷积成的特征图 -&gt; 接入全连接层 (<code>Linear</code>) -&gt; 输出</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CNN</span><span class="hljs-params">(nn.Module)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        super(CNN, self).__init__()<br>        self.conv1 = nn.Sequential(  <span class="hljs-comment"># input shape (1, 28, 28)</span><br>            nn.Conv2d(<br>                in_channels=<span class="hljs-number">1</span>,      <span class="hljs-comment"># input height</span><br>                out_channels=<span class="hljs-number">16</span>,    <span class="hljs-comment"># n_filters</span><br>                kernel_size=<span class="hljs-number">5</span>,      <span class="hljs-comment"># filter size</span><br>                stride=<span class="hljs-number">1</span>,           <span class="hljs-comment"># filter movement/step</span><br>                padding=<span class="hljs-number">2</span>,      <span class="hljs-comment"># 如果想要 con2d 出来的图片长宽没有变化, padding=(kernel_size-1)/2 当 stride=1</span><br>            ),      <span class="hljs-comment"># output shape (16, 28, 28)</span><br>            nn.ReLU(),    <span class="hljs-comment"># activation</span><br>            nn.MaxPool2d(kernel_size=<span class="hljs-number">2</span>),    <span class="hljs-comment"># 在 2x2 空间里向下采样, output shape (16, 14, 14)</span><br>        )<br>        self.conv2 = nn.Sequential(  <span class="hljs-comment"># input shape (1, 28, 28)</span><br>            nn.Conv2d(<span class="hljs-number">16</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),  <span class="hljs-comment"># output shape (32, 14, 14)</span><br>            nn.ReLU(),  <span class="hljs-comment"># activation</span><br>            nn.MaxPool2d(<span class="hljs-number">2</span>),  <span class="hljs-comment"># output shape (32, 7, 7)</span><br>        )<br>        self.out = nn.Linear(<span class="hljs-number">32</span> * <span class="hljs-number">7</span> * <span class="hljs-number">7</span>, <span class="hljs-number">10</span>)   <span class="hljs-comment"># fully connected layer, output 10 classes</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span><span class="hljs-params">(self, x)</span>:</span><br>        x = self.conv1(x)<br>        x = self.conv2(x)<br>        x = x.view(x.size(<span class="hljs-number">0</span>), <span class="hljs-number">-1</span>)   <span class="hljs-comment"># 展平多维的卷积图成 (batch_size, 32 * 7 * 7)</span><br>        output = self.out(x)<br>        <span class="hljs-keyword">return</span> output<br><br>cnn = CNN()<br>print(cnn)  <span class="hljs-comment"># net architecture</span><br><span class="hljs-string">"""<br>CNN (<br>  (conv1): Sequential (<br>    (0): Conv2d(1, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))<br>    (1): ReLU ()<br>    (2): MaxPool2d (size=(2, 2), stride=(2, 2), dilation=(1, 1))<br>  )<br>  (conv2): Sequential (<br>    (0): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))<br>    (1): ReLU ()<br>    (2): MaxPool2d (size=(2, 2), stride=(2, 2), dilation=(1, 1))<br>  )<br>  (out): Linear (1568 -&gt; 10)<br>)<br>"""</span><br></code></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>下面我们开始训练, 将 <code>x</code> <code>y</code> 都用 <code>Variable</code> 包起来, 然后放入 <code>cnn</code> 中计算 <code>output</code>, 最后再计算误差. 下面代码省略了计算精确度 <code>accuracy</code> 的部分。</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">optimizer = torch.optim.Adam(cnn.parameters(), lr=LR)   <span class="hljs-comment"># optimize all cnn parameters</span><br>loss_func = nn.CrossEntropyLoss()   <span class="hljs-comment"># the target label is not one-hotted</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># following function (plot_with_labels) is for visualization, can be ignored if not interested</span><br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> cm<br><span class="hljs-keyword">try</span>: <span class="hljs-keyword">from</span> sklearn.manifold <span class="hljs-keyword">import</span> TSNE; HAS_SK = <span class="hljs-keyword">True</span><br><span class="hljs-keyword">except</span>: HAS_SK = <span class="hljs-keyword">False</span>; print(<span class="hljs-string">'Please install sklearn for layer visualization'</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_with_labels</span><span class="hljs-params">(lowDWeights, labels)</span>:</span><br>    plt.cla()<br>    X, Y = lowDWeights[:, <span class="hljs-number">0</span>], lowDWeights[:, <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> x, y, s <span class="hljs-keyword">in</span> zip(X, Y, labels):<br>        c = cm.rainbow(int(<span class="hljs-number">255</span> * s / <span class="hljs-number">9</span>)); plt.text(x, y, s, backgroundcolor=c, fontsize=<span class="hljs-number">9</span>)<br>    plt.xlim(X.min(), X.max()); plt.ylim(Y.min(), Y.max()); plt.title(<span class="hljs-string">'Visualize last layer'</span>); plt.show(); plt.pause(<span class="hljs-number">0.01</span>)<br><br>plt.ion()<br></code></pre></td></tr></table></figure><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># training and testing</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> range(EPOCH):<br>    <span class="hljs-keyword">for</span> step, (x, y) <span class="hljs-keyword">in</span> enumerate(train_loader):   <span class="hljs-comment"># 分配 batch data, normalize x when iterate train_loader</span><br>        b_x = Variable(x)   <span class="hljs-comment"># batch x</span><br>        b_y = Variable(y)   <span class="hljs-comment"># batch y</span><br><br>        output = cnn(b_x)               <span class="hljs-comment"># cnn output</span><br>        loss = loss_func(output, b_y)   <span class="hljs-comment"># cross entropy loss</span><br>        optimizer.zero_grad()           <span class="hljs-comment"># clear gradients for this training step</span><br>        loss.backward()                 <span class="hljs-comment"># backpropagation, compute gradients</span><br>        optimizer.step()                <span class="hljs-comment"># apply gradients</span><br>        <br>        <span class="hljs-keyword">if</span> step % <span class="hljs-number">50</span> == <span class="hljs-number">0</span>:<br>            test_output, last_layer = cnn(test_x)<br>            pred_y = torch.max(test_output, <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>].data.squeeze()<br>            accuracy = sum(pred_y == test_y) / float(test_y.size(<span class="hljs-number">0</span>))<br>            print(<span class="hljs-string">'Epoch: '</span>, epoch, <span class="hljs-string">'| train loss: %.4f'</span> % loss.data[<span class="hljs-number">0</span>], <span class="hljs-string">'| test accuracy: %.2f'</span> % accuracy)<br>            <span class="hljs-keyword">if</span> HAS_SK:<br>                <span class="hljs-comment"># Visualization of trained flatten layer (T-SNE)</span><br>                tsne = TSNE(perplexity=<span class="hljs-number">30</span>, n_components=<span class="hljs-number">2</span>, init=<span class="hljs-string">'pca'</span>, n_iter=<span class="hljs-number">5000</span>)<br>                plot_only = <span class="hljs-number">500</span><br>                low_dim_embs = tsne.fit_transform(last_layer.data.numpy()[:plot_only, :])<br>                labels = test_y.numpy()[:plot_only]<br>                plot_with_labels(low_dim_embs, labels)<br>plt.ioff()<br><br><span class="hljs-string">"""<br>...<br>Epoch:  0 | train loss: 0.0306 | test accuracy: 0.97<br>Epoch:  0 | train loss: 0.0147 | test accuracy: 0.98<br>Epoch:  0 | train loss: 0.0427 | test accuracy: 0.98<br>Epoch:  0 | train loss: 0.0078 | test accuracy: 0.98<br>"""</span><br></code></pre></td></tr></table></figure><p>最后我们再来取10个数据, 看看预测的值到底对不对:</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">test_output = cnn(test_x[:<span class="hljs-number">10</span>])<br>pred_y = torch.max(test_output, <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>].data.numpy().squeeze()<br>print(pred_y, <span class="hljs-string">'prediction number'</span>)<br>print(test_y[:<span class="hljs-number">10</span>].numpy(), <span class="hljs-string">'real number'</span>)<br><br><span class="hljs-string">"""<br>[7 2 1 0 4 1 4 9 5 9] prediction number<br>[7 2 1 0 4 1 4 9 5 9] real number<br>"""</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>pytorch:Optimizer优化器</title>
      <link href="/2017/09/23/pytorch-Optimizer%E4%BC%98%E5%8C%96%E5%99%A8/"/>
      <url>/2017/09/23/pytorch-Optimizer%E4%BC%98%E5%8C%96%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="Optimizer-优化器"><a href="#Optimizer-优化器" class="headerlink" title="Optimizer 优化器"></a>Optimizer 优化器</h1><p>这节内容主要是用Torch的几种优化器查看优化器效果。</p><p><img src="/pic/2017-09/figure_7.png" alt=""></p><a id="more"></a><h2 id="创建伪数据"><a href="#创建伪数据" class="headerlink" title="创建伪数据"></a>创建伪数据</h2><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.utils.data <span class="hljs-keyword">as</span> Data<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">from</span> torch.autograd <span class="hljs-keyword">import</span> Variable<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>torch.manual_seed(<span class="hljs-number">1</span>)    <span class="hljs-comment"># reproducible</span><br><br>LR = <span class="hljs-number">0.01</span><br>BATCH_SIZE = <span class="hljs-number">32</span><br>EPOCH = <span class="hljs-number">12</span><br><br><span class="hljs-comment"># fake dataset</span><br>x = torch.unsqueeze(torch.linspace(<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1000</span>), dim=<span class="hljs-number">1</span>)<br>y = x.pow(<span class="hljs-number">2</span>) + <span class="hljs-number">0.1</span>*torch.normal(torch.zeros(*x.size()))<br><br><span class="hljs-comment"># plot dataset</span><br>plt.scatter(x.numpy(), y.numpy())<br>plt.show()<br><br><span class="hljs-comment"># 使用上节内容提到的 data loader</span><br>torch_dataset = Data.TensorDataset(data_tensor=x, target_tensor=y)<br>loader = Data.DataLoader(dataset=torch_dataset, batch_size=BATCH_SIZE, shuffle=<span class="hljs-keyword">True</span>, num_workers=<span class="hljs-number">2</span>,)<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-09/figure_7.png" alt=""></p><h2 id="每个优化器优化一个神经网络"><a href="#每个优化器优化一个神经网络" class="headerlink" title="每个优化器优化一个神经网络"></a>每个优化器优化一个神经网络</h2><p>接下来在创建不同的优化器, 用来训练不同的网络. 并创建一个 <code>loss_func</code> 用来计算误差. 我们用几种常见的优化器, <code>SGD</code>, <code>Momentum</code>, <code>RMSprop</code>, <code>Adam</code>.</p><figure class="hljs highlight Python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 默认的 network 形式</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Net</span><span class="hljs-params">(torch.nn.Module)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        super(Net, self).__init__()<br>        self.hidden = torch.nn.Linear(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>)   <span class="hljs-comment"># hidden layer</span><br>        self.predict = torch.nn.Linear(<span class="hljs-number">20</span>, <span class="hljs-number">1</span>)   <span class="hljs-comment"># output layer</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span><span class="hljs-params">(self, x)</span>:</span><br>        x = F.relu(self.hidden(x))      <span class="hljs-comment"># activation function for hidden layer</span><br>        x = self.predict(x)             <span class="hljs-comment"># linear output</span><br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-comment"># 为每个优化器创建一个 net</span><br>net_SGD         = Net()<br>net_Momentum    = Net()<br>net_RMSprop     = Net()<br>net_Adam        = Net()<br>nets = [net_SGD, net_Momentum, net_RMSprop, net_Adam]<br></code></pre></td></tr></table></figure><h2 id="优化器Optimizer"><a href="#优化器Optimizer" class="headerlink" title="优化器Optimizer"></a>优化器Optimizer</h2><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># different optimizers</span><br>opt_SGD         = torch.optim.SGD(net_SGD.parameters(), lr=LR)<br>opt_Momentum    = torch.optim.SGD(net_Momentum.parameters(), lr=LR, momentum=<span class="hljs-number">0.8</span>)<br>opt_RMSprop     = torch.optim.RMSprop(net_RMSprop.parameters(), lr=LR, alpha=<span class="hljs-number">0.9</span>)<br>opt_Adam        = torch.optim.Adam(net_Adam.parameters(), lr=LR, betas=(<span class="hljs-number">0.9</span>, <span class="hljs-number">0.99</span>))<br>optimizers = [opt_SGD, opt_Momentum, opt_RMSprop, opt_Adam]<br><br>loss_func = torch.nn.MSELoss()<br>losses_his = [[], [], [], []]   <span class="hljs-comment"># 记录 training 时不同神经网络的 loss</span><br></code></pre></td></tr></table></figure><h2 id="训练-出图"><a href="#训练-出图" class="headerlink" title="训练/出图"></a>训练/出图</h2><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> range(EPOCH):<br>    print(<span class="hljs-string">'Epoch: '</span>, epoch)<br>    <span class="hljs-keyword">for</span> step, (batch_x, batch_y) <span class="hljs-keyword">in</span> enumerate(loader):<br>        b_x = Variable(batch_x)  <span class="hljs-comment"># 务必要用 Variable 包一下</span><br>        b_y = Variable(batch_y)<br><br>        <span class="hljs-comment"># 对每个优化器, 优化属于他的神经网络</span><br>        <span class="hljs-keyword">for</span> net, opt, l_his <span class="hljs-keyword">in</span> zip(nets, optimizers, losses_his):<br>            output = net(b_x)              <span class="hljs-comment"># get output for every net</span><br>            loss = loss_func(output, b_y)  <span class="hljs-comment"># compute loss for every net</span><br>            opt.zero_grad()                <span class="hljs-comment"># clear gradients for next train</span><br>            loss.backward()                <span class="hljs-comment"># backpropagation, compute gradients</span><br>            opt.step()                     <span class="hljs-comment"># apply gradients</span><br>            l_his.append(loss.data[<span class="hljs-number">0</span>])     <span class="hljs-comment"># loss recoder</span><br></code></pre></td></tr></table></figure><h2 id="画图代码"><a href="#画图代码" class="headerlink" title="画图代码"></a>画图代码</h2><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">labels = [<span class="hljs-string">'SGD'</span>, <span class="hljs-string">'Momentum'</span>, <span class="hljs-string">'RMSprop'</span>, <span class="hljs-string">'Adam'</span>]<br><span class="hljs-keyword">for</span> i, l_his <span class="hljs-keyword">in</span> enumerate(losses_his):<br>    plt.plot(l_his, label=labels[i])<br>plt.legend(loc=<span class="hljs-string">'best'</span>)<br>plt.xlabel(<span class="hljs-string">'Steps'</span>)<br>plt.ylabel(<span class="hljs-string">'Loss'</span>)<br>plt.ylim((<span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>))<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-09/figure_8.png" alt=""></p><p><code>SGD</code> 是最普通的优化器, 也可以说没有加速效果, 而 <code>Momentum</code> 是 <code>SGD</code> 的改良版, 它加入了动量原则. 后面的 <code>RMSprop</code> 又是 <code>Momentum</code> 的升级版. 而 <code>Adam</code> 又是 <code>RMSprop</code> 的升级版. 不过从这个结果中我们看到, <code>Adam</code> 的效果似乎比 <code>RMSprop</code> 要差一点. 所以说并不是越先进的优化器, 结果越佳. 我们在自己的试验中可以尝试不同的优化器, 找到那个最适合你数据/网络的优化器.</p><p>参考:<a href="https://morvanzhou.github.io/tutorials/machine-learning/torch/3-06-optimizer/" target="_blank" rel="noopener">莫烦python</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>pytorch批训练</title>
      <link href="/2017/09/23/pytorch%E6%89%B9%E8%AE%AD%E7%BB%83/"/>
      <url>/2017/09/23/pytorch%E6%89%B9%E8%AE%AD%E7%BB%83/</url>
      <content type="html"><![CDATA[<h1 id="pytorch-的批训练"><a href="#pytorch-的批训练" class="headerlink" title="pytorch 的批训练"></a>pytorch 的批训练</h1><ul><li>要点：Torch 中提供了一种帮你整理你的数据结构的好东西, 叫做 <code>DataLoader</code>, 我们能用它来<strong>包装自己的数据, 进行批训练.</strong></li></ul><a id="more"></a><h2 id="DataLoader"><a href="#DataLoader" class="headerlink" title="DataLoader"></a>DataLoader</h2><p><code>DataLoader</code> 是 torch 给你用来包装你的数据的工具. 所以你要将自己的 (numpy array 或其他) 数据形式装换成 <code>Tensor</code>, 然后再放进这个包装器中. 使用 <code>DataLoader</code> 有什么好处呢? 就是他们帮你<strong>有效地迭代数据</strong>, 举例:</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.utils.data <span class="hljs-keyword">as</span> Data<br>torch.manual_seed(<span class="hljs-number">1</span>)    <span class="hljs-comment"># reproducible</span><br><br>BATCH_SIZE = <span class="hljs-number">5</span>      <span class="hljs-comment"># 批训练的数据个数</span><br><br>x = torch.linspace(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>)       <span class="hljs-comment"># x data (torch tensor) x 从1到10</span><br>y = torch.linspace(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>)       <span class="hljs-comment"># y data (torch tensor) y 从10到1</span><br><br><span class="hljs-comment"># 先转换成 torch 能识别的 Dataset</span><br>torch_dataset = Data.TensorDataset(data_tensor=x, target_tensor=y)<br><br><span class="hljs-comment"># 把 dataset 放入 DataLoader</span><br>loader = Data.DataLoader(<br>    dataset=torch_dataset,      <span class="hljs-comment"># torch TensorDataset format</span><br>    batch_size=BATCH_SIZE,      <span class="hljs-comment"># mini batch size</span><br>    shuffle=<span class="hljs-keyword">True</span>,               <span class="hljs-comment"># 要不要打乱数据 (打乱比较好)</span><br>    num_workers=<span class="hljs-number">2</span>,              <span class="hljs-comment"># 多线程来读数据</span><br>)<br><br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):   <span class="hljs-comment"># 训练所有!整套!数据 3 次</span><br>    <span class="hljs-keyword">for</span> step, (batch_x, batch_y) <span class="hljs-keyword">in</span> enumerate(loader):  <span class="hljs-comment"># 每一步 loader 释放一小批数据用来学习</span><br>        <span class="hljs-comment"># 假设这里就是你训练的地方...</span><br><br>        <span class="hljs-comment"># 打出来一些数据</span><br>        print(<span class="hljs-string">'Epoch: '</span>, epoch, <span class="hljs-string">'| Step: '</span>, step, <span class="hljs-string">'| batch x: '</span>,<br>              batch_x.numpy(), <span class="hljs-string">'| batch y: '</span>, batch_y.numpy())<br><br><br><span class="hljs-string">"""<br>Epoch:  0 | Step:  0 | batch x:  [ 6.  7.  2.  3.  1.] | batch y:  [  5.   4.   9.   8.  10.]<br>Epoch:  0 | Step:  1 | batch x:  [  9.  10.   4.   8.   5.] | batch y:  [ 2.  1.  7.  3.  6.]<br>Epoch:  1 | Step:  0 | batch x:  [  3.   4.   2.   9.  10.] | batch y:  [ 8.  7.  9.  2.  1.]<br>Epoch:  1 | Step:  1 | batch x:  [ 1.  7.  8.  5.  6.] | batch y:  [ 10.   4.   3.   6.   5.]<br>Epoch:  2 | Step:  0 | batch x:  [ 3.  9.  2.  6.  7.] | batch y:  [ 8.  2.  9.  5.  4.]<br>Epoch:  2 | Step:  1 | batch x:  [ 10.   4.   8.   1.   5.] | batch y:  [  1.   7.   3.  10.   6.]<br>"""</span><br></code></pre></td></tr></table></figure><p>可以看出, 每步都导出了5个数据进行学习. 然后每个 epoch 的导出数据都是先打乱了以后再导出.</p><p>真正方便的还不是这点. 如果我们改变一下 <code>BATCH_SIZE = 8</code>, 这样我们就知道, <code>step=0</code> 会导出8个数据, 但是, <code>step=1</code> 时数据库中的数据不够 8个, 这时怎么办呢:</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">BATCH_SIZE = <span class="hljs-number">8</span>      <span class="hljs-comment"># 批训练的数据个数</span><br><br><span class="hljs-keyword">for</span> :<br>    <span class="hljs-keyword">for</span> :<br>        print(<span class="hljs-string">'Epoch: '</span>, epoch, <span class="hljs-string">'| Step: '</span>, step, <span class="hljs-string">'| batch x: '</span>,<br>              batch_x.numpy(), <span class="hljs-string">'| batch y: '</span>, batch_y.numpy())<br><span class="hljs-string">"""<br>Epoch:  0 | Step:  0 | batch x:  [  6.   7.   2.   3.   1.   9.  10.   4.] | batch y:  [  5.   4.   9.   8.  10.   2.   1.   7.]<br>Epoch:  0 | Step:  1 | batch x:  [ 8.  5.] | batch y:  [ 3.  6.]<br>Epoch:  1 | Step:  0 | batch x:  [  3.   4.   2.   9.  10.   1.   7.   8.] | batch y:  [  8.   7.   9.   2.   1.  10.   4.   3.]<br>Epoch:  1 | Step:  1 | batch x:  [ 5.  6.] | batch y:  [ 6.  5.]<br>Epoch:  2 | Step:  0 | batch x:  [  3.   9.   2.   6.   7.  10.   4.   8.] | batch y:  [ 8.  2.  9.  5.  4.  1.  7.  3.]<br>Epoch:  2 | Step:  1 | batch x:  [ 1.  5.] | batch y:  [ 10.   6.]<br>"""</span><br></code></pre></td></tr></table></figure><p>这时, 在 <code>step=1</code> 就只给你返回这个 epoch 中剩下的数据就好了.</p><p>参考<a href="https://morvanzhou.github.io/tutorials/machine-learning/torch/3-05-train-on-batch/" target="_blank" rel="noopener">莫烦python</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>pytorch07</title>
      <link href="/2017/09/22/pytorch07/"/>
      <url>/2017/09/22/pytorch07/</url>
      <content type="html"><![CDATA[<h1 id="模型的保存与提取"><a href="#模型的保存与提取" class="headerlink" title="模型的保存与提取"></a>模型的保存与提取</h1><h2 id="保存的两种方法与提取的两种方法"><a href="#保存的两种方法与提取的两种方法" class="headerlink" title="保存的两种方法与提取的两种方法"></a>保存的两种方法与提取的两种方法</h2><p>我们快速地建造数据, 搭建网络:</p><a id="more"></a><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.manual_seed(<span class="hljs-number">1</span>)    <span class="hljs-comment"># reproducible</span><br><br><span class="hljs-comment"># 假数据</span><br>x = torch.unsqueeze(torch.linspace(<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>), dim=<span class="hljs-number">1</span>)  <span class="hljs-comment"># x data (tensor), shape=(100, 1)</span><br>y = x.pow(<span class="hljs-number">2</span>) + <span class="hljs-number">0.2</span>*torch.rand(x.size())  <span class="hljs-comment"># noisy y data (tensor), shape=(100, 1)</span><br>x, y = Variable(x, requires_grad=<span class="hljs-keyword">False</span>), Variable(y, requires_grad=<span class="hljs-keyword">False</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-comment"># 建网络</span><br>    net1 = torch.nn.Sequential(<br>        torch.nn.Linear(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>),<br>        torch.nn.ReLU(),<br>        torch.nn.Linear(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>)<br>    )<br>    optimizer = torch.optim.SGD(net1.parameters(), lr=<span class="hljs-number">0.5</span>)<br>    loss_func = torch.nn.MSELoss()<br><br>    <span class="hljs-comment"># 训练</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br>        prediction = net1(x)<br>        loss = loss_func(prediction, y)<br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>    <span class="hljs-comment"># 两种方法保存net1：</span><br>    torch.save(net1, <span class="hljs-string">'net.pkl'</span>)  <span class="hljs-comment"># save entire net</span><br>    torch.save(net1.state_dict(), <span class="hljs-string">'net_params.pkl'</span>)   <span class="hljs-comment"># save only the parameters</span><br><br><br><span class="hljs-comment"># 对应有两种加载方式：</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">restore_net</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-comment"># restore entire net1 to net2</span><br>    net2 = torch.load(<span class="hljs-string">'net.pkl'</span>)<br>    prediction = net2(x)<br><br>    <span class="hljs-comment"># plot result</span><br>    plt.subplot(<span class="hljs-number">132</span>)<br>    plt.title(<span class="hljs-string">'Net2'</span>)<br>    plt.scatter(x.data.numpy(), y.data.numpy())<br>    plt.plot(x.data.numpy(), prediction.data.numpy(), <span class="hljs-string">'r-'</span>, lw=<span class="hljs-number">5</span>)<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">restore_params</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-comment"># restore only the parameters in net1 to net3</span><br>    net3 = torch.nn.Sequential( <span class="hljs-comment">#第一步要先构建一个跟net1一样的神经网络，然后在加载参数。</span><br>        torch.nn.Linear(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>),<br>        torch.nn.ReLU(),<br>        torch.nn.Linear(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>)<br>    )<br><br>    <span class="hljs-comment"># copy net1's parameters into net3</span><br>    net3.load_state_dict(torch.load(<span class="hljs-string">'net_params.pkl'</span>))<br>    prediction = net3(x)<br><br>    <span class="hljs-comment"># plot result</span><br>    plt.subplot(<span class="hljs-number">133</span>)<br>    plt.title(<span class="hljs-string">'Net3'</span>)<br>    plt.scatter(x.data.numpy(), y.data.numpy())<br>    plt.plot(x.data.numpy(), prediction.data.numpy(), <span class="hljs-string">'r-'</span>, lw=<span class="hljs-number">5</span>)<br>    plt.show()<br><br><br><span class="hljs-comment"># save net1</span><br>save()<br><br><span class="hljs-comment"># restore entire net (may slow)</span><br>restore_net()<br><br><span class="hljs-comment"># restore only the net parameters</span><br>restore_params()<br></code></pre></td></tr></table></figure><p>接下来我们有两种途径来保存：</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.save(net1, <span class="hljs-string">'net.pkl'</span>)  <span class="hljs-comment"># 保存整个网络</span><br>torch.save(net1.state_dict(), <span class="hljs-string">'net_params.pkl'</span>)   <span class="hljs-comment"># 只保存网络中的参数 (速度快, 占内存少)</span><br></code></pre></td></tr></table></figure><p><img src="/pic/2017-09/figure_6.png" alt=""></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>pytorch06</title>
      <link href="/2017/09/22/pytorch06/"/>
      <url>/2017/09/22/pytorch06/</url>
      <content type="html"><![CDATA[<h1 id="pytorch-神经层的快速构建"><a href="#pytorch-神经层的快速构建" class="headerlink" title="pytorch 神经层的快速构建"></a>pytorch 神经层的快速构建</h1><h2 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h2><a id="more"></a><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Net</span><span class="hljs-params">(torch.nn.Module)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, n_feature, n_hidden, n_output)</span>:</span><br>        super(Net, self).__init__()<br>        self.hidden = torch.nn.Linear(n_feature, n_hidden)<br>        self.predict = torch.nn.Linear(n_hidden, n_output)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span><span class="hljs-params">(self, x)</span>:</span><br>        x = F.relu(self.hidden(x))<br>        x = self.predict(x)<br>        <span class="hljs-keyword">return</span> x<br><br>net1 = Net(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>)   <span class="hljs-comment"># 这是我们用这种方式搭建的 net1</span><br></code></pre></td></tr></table></figure><p>我们用 class 继承了一个 torch 中的神经网络结构, 然后对其进行了修改, 不过还有更快的一招, 用一句话就概括了上面所有的内容!</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">net2 = torch.nn.Sequential(<br>    torch.nn.Linear(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>),<br>    torch.nn.ReLU(),<br>    torch.nn.Linear(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>)<br>)<br></code></pre></td></tr></table></figure><p>我们再对比一下两者的结构:</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">print(net1)<br><span class="hljs-string">"""<br>Net (<br>  (hidden): Linear (1 -&gt; 10)<br>  (predict): Linear (10 -&gt; 1)<br>)<br>"""</span><br>print(net2)<br><span class="hljs-string">"""<br>Sequential (<br>  (0): Linear (1 -&gt; 10)<br>  (1): ReLU ()<br>  (2): Linear (10 -&gt; 1)<br>)<br>"""</span><br></code></pre></td></tr></table></figure><p>我们会发现 <code>net2</code> 多显示了一些内容, 这是为什么呢? 原来他把激励函数也一同纳入进去了, 但是 <code>net1</code> 中, 激励函数实际上是在 <code>forward()</code> 功能中才被调用的. 这也就说明了, 相比 <code>net2</code>, <code>net1</code> 的好处就是, 你可以根据你的个人需要更加个性化你自己的前向传播过程, 比如(RNN). 不过如果你不需要七七八八的过程, 相信 <code>net2</code> 这种形式更适合你.</p><p>来源<a href="https://morvanzhou.github.io/tutorials/machine-learning/torch/3-03-fast-nn/" target="_blank" rel="noopener">莫烦python</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>pytorch05</title>
      <link href="/2017/09/22/pytorch05/"/>
      <url>/2017/09/22/pytorch05/</url>
      <content type="html"><![CDATA[<h1 id="区分类型-分类"><a href="#区分类型-分类" class="headerlink" title="区分类型(分类)"></a>区分类型(分类)</h1><a id="more"></a><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.autograd <span class="hljs-keyword">import</span> Variable<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 假数据</span><br>n_data = torch.ones(<span class="hljs-number">100</span>, <span class="hljs-number">2</span>)         <span class="hljs-comment"># 数据的基本形态</span><br>x0 = torch.normal(<span class="hljs-number">2</span>*n_data, <span class="hljs-number">1</span>)      <span class="hljs-comment"># 类型0 x data (tensor), shape=(100, 2)</span><br>y0 = torch.zeros(<span class="hljs-number">100</span>)               <span class="hljs-comment"># 类型0 y data (tensor), shape=(100, 1)</span><br>x1 = torch.normal(<span class="hljs-number">-2</span>*n_data, <span class="hljs-number">1</span>)     <span class="hljs-comment"># 类型1 x data (tensor), shape=(100, 1)</span><br>y1 = torch.ones(<span class="hljs-number">100</span>)                <span class="hljs-comment"># 类型1 y data (tensor), shape=(100, 1)</span><br><br><span class="hljs-comment"># 注意 x, y 数据的数据形式是一定要像下面一样 (torch.cat 是在合并数据)</span><br>x = torch.cat((x0, x1), <span class="hljs-number">0</span>).type(torch.FloatTensor)  <span class="hljs-comment"># FloatTensor = 32-bit floating</span><br>y = torch.cat((y0, y1), ).type(torch.LongTensor)    <span class="hljs-comment"># LongTensor = 64-bit integer</span><br><br><span class="hljs-comment"># torch 只能在 Variable 上训练, 所以把它们变成 Variable</span><br>x, y = Variable(x), Variable(y)<br><br>plt.scatter(x.data.numpy()[:, <span class="hljs-number">0</span>], x.data.numpy()[:, <span class="hljs-number">1</span>], c=y.data.numpy(), s=<span class="hljs-number">100</span>, lw=<span class="hljs-number">0</span>, cmap=<span class="hljs-string">'RdYlGn'</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-09/figure_4.png" alt=""></p><h2 id="建立神经网络"><a href="#建立神经网络" class="headerlink" title="建立神经网络"></a>建立神经网络</h2><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F     <span class="hljs-comment"># 激励函数都在这</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Net</span><span class="hljs-params">(torch.nn.Module)</span>:</span>     <span class="hljs-comment"># 继承 torch 的 Module</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, n_feature, n_hidden, n_output)</span>:</span><br>        super(Net, self).__init__()     <span class="hljs-comment"># 继承 __init__ 功能</span><br>        self.hidden = torch.nn.Linear(n_feature, n_hidden)   <span class="hljs-comment"># 隐藏层线性输出</span><br>        self.out = torch.nn.Linear(n_hidden, n_output)       <span class="hljs-comment"># 输出层线性输出</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span><span class="hljs-params">(self, x)</span>:</span><br>        <span class="hljs-comment"># 正向传播输入值, 神经网络分析出输出值</span><br>        x = F.relu(self.hidden(x))      <span class="hljs-comment"># 激励函数(隐藏层的线性值)</span><br>        x = self.out(x)                 <span class="hljs-comment"># 输出值, 但是这个不是预测值, 预测值还需要再另外计算</span><br>        <span class="hljs-keyword">return</span> x<br><br>net = Net(n_feature=<span class="hljs-number">2</span>, n_hidden=<span class="hljs-number">10</span>, n_output=<span class="hljs-number">2</span>) <span class="hljs-comment"># 几个类别就几个 output</span><br><br>print(net)  <span class="hljs-comment"># net 的结构</span><br><span class="hljs-string">"""<br>Net (<br>  (hidden): Linear (2 -&gt; 10)<br>  (out): Linear (10 -&gt; 2)<br>)<br>"""</span><br></code></pre></td></tr></table></figure><h2 id="训练神经网络"><a href="#训练神经网络" class="headerlink" title="训练神经网络"></a>训练神经网络</h2><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># optimizer 是训练的工具</span><br>optimizer = torch.optim.SGD(net.parameters(), lr=<span class="hljs-number">0.02</span>)  <span class="hljs-comment"># 传入 net 的所有参数, 学习率</span><br><span class="hljs-comment"># 算误差的时候, 注意真实值!不是! one-hot 形式的, 而是1D Tensor, (batch,)</span><br><span class="hljs-comment"># 但是预测值是2D tensor (batch, n_classes)</span><br>loss_func = torch.nn.CrossEntropyLoss()<br><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br>    out = net(x)     <span class="hljs-comment"># 喂给 net 训练数据 x, 输出分析值</span><br><br>    loss = loss_func(out, y)     <span class="hljs-comment"># 计算两者的误差</span><br><br>    optimizer.zero_grad()   <span class="hljs-comment"># 清空上一步的残余更新参数值</span><br>    loss.backward(retain_graph=<span class="hljs-keyword">True</span>)         <span class="hljs-comment"># 误差反向传播, 计算参数更新值</span><br>    optimizer.step()        <span class="hljs-comment"># 将参数更新值施加到 net 的 parameters 上</span><br></code></pre></td></tr></table></figure><h2 id="可视化训练过程"><a href="#可视化训练过程" class="headerlink" title="可视化训练过程"></a>可视化训练过程</h2><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>plt.ion()   <span class="hljs-comment"># 画图</span><br>plt.show()<br><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br><br>    ...<br>    loss.backward(retain_graph=<span class="hljs-keyword">True</span>)<br>    optimizer.step()<br><br>    <span class="hljs-comment"># 接着上面来</span><br>    <span class="hljs-keyword">if</span> t % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        plt.cla()<br>        <span class="hljs-comment"># 过了一道 softmax 的激励函数后的最大概率才是预测值</span><br>        prediction = torch.max(F.softmax(out), <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>]<br>        pred_y = prediction.data.numpy().squeeze()<br>        target_y = y.data.numpy()<br>        plt.scatter(x.data.numpy()[:, <span class="hljs-number">0</span>], x.data.numpy()[:, <span class="hljs-number">1</span>], c=pred_y, s=<span class="hljs-number">100</span>, lw=<span class="hljs-number">0</span>, cmap=<span class="hljs-string">'RdYlGn'</span>)<br>        accuracy = sum(pred_y == target_y)/<span class="hljs-number">200</span>  <span class="hljs-comment"># 预测中有多少和真实值一样</span><br>        plt.text(<span class="hljs-number">1.5</span>, <span class="hljs-number">-4</span>, <span class="hljs-string">'Accuracy=%.2f'</span> % accuracy, fontdict=&#123;<span class="hljs-string">'size'</span>: <span class="hljs-number">20</span>, <span class="hljs-string">'color'</span>:  <span class="hljs-string">'red'</span>&#125;)<br>        plt.pause(<span class="hljs-number">0.1</span>)<br><br>plt.ioff()  <span class="hljs-comment"># 停止画图</span><br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-09/figure_5.png" alt=""></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>pytorch04</title>
      <link href="/2017/09/22/pytorch04/"/>
      <url>/2017/09/22/pytorch04/</url>
      <content type="html"><![CDATA[<h1 id="关系拟合-回归"><a href="#关系拟合-回归" class="headerlink" title="关系拟合(回归)"></a>关系拟合(回归)</h1><p>这次将见证如何通过简单的形式将一群数据用一条线段来表示。</p><h2 id="建立数据集"><a href="#建立数据集" class="headerlink" title="建立数据集"></a>建立数据集</h2><a id="more"></a><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.autograd <span class="hljs-keyword">import</span> Variable<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = torch.unsqueeze(torch.linspace(<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>), dim=<span class="hljs-number">1</span>)  <span class="hljs-comment"># x data (tensor), shape=(100, 1)</span><br>y = x.pow(<span class="hljs-number">2</span>) + <span class="hljs-number">0.2</span>*torch.rand(x.size())                 <span class="hljs-comment"># noisy y data (tensor), shape=(100, 1)</span><br><br><span class="hljs-comment"># 用 Variable 来修饰这些数据 tensor</span><br>x, y = torch.autograd.Variable(x), Variable(y)<br><br><span class="hljs-comment"># 画图</span><br>plt.scatter(x.data.numpy(), y.data.numpy())<br>plt.show()<br></code></pre></td></tr></table></figure><blockquote><p><code>unsequeeze</code>函数之后，变成了[[1,2,3,4,5]]这样的结构</p></blockquote><p><img src="/pic/2017-09/figure_2.png" alt=""></p><h2 id="建立神经网络"><a href="#建立神经网络" class="headerlink" title="建立神经网络"></a>建立神经网络</h2><p> 先定义所有的层属性(<code>__init__()</code>), 然后再一层层搭建(<code>forward(x)</code>)层于层的关系链接. </p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F     <span class="hljs-comment"># 激励函数都在这</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Net</span><span class="hljs-params">(torch.nn.Module)</span>:</span>  <span class="hljs-comment"># 继承 torch 的 Module</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, n_feature, n_hidden, n_output)</span>:</span><br>        super(Net, self).__init__()     <span class="hljs-comment"># 继承 __init__ 功能</span><br>        <span class="hljs-comment"># 定义每层用什么样的形式</span><br>        self.hidden = torch.nn.Linear(n_feature, n_hidden)   <span class="hljs-comment"># 隐藏层线性输出</span><br>        self.predict = torch.nn.Linear(n_hidden, n_output)   <span class="hljs-comment"># 输出层线性输出</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span><span class="hljs-params">(self, x)</span>:</span>   <span class="hljs-comment"># 这同时也是 Module 中的 forward 功能</span><br>        <span class="hljs-comment"># 正向传播输入值, 神经网络分析出输出值</span><br>        x = F.relu(self.hidden(x))      <span class="hljs-comment"># 激励函数(隐藏层的线性值)</span><br>        x = self.predict(x)             <span class="hljs-comment"># 输出值</span><br>        <span class="hljs-keyword">return</span> x<br><br><br>net = Net(n_feature=<span class="hljs-number">1</span>, n_hidden=<span class="hljs-number">10</span>, n_output=<span class="hljs-number">1</span>)<br><br>print(net)  <span class="hljs-comment"># net 的结构</span><br><br><span class="hljs-string">"""<br>Net (<br>  (hidden): Linear (1 -&gt; 10)<br>  (predict): Linear (10 -&gt; 1)<br>)<br>"""</span><br></code></pre></td></tr></table></figure><h2 id="训练网络"><a href="#训练网络" class="headerlink" title="训练网络"></a>训练网络</h2><p>训练的步骤很简单, 如下:</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># optimizer 是训练的工具</span><br>optimizer = torch.optim.SGD(net.parameters(), lr=<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># 传入 net 的所有参数, 学习率.优化器优化神经网络的参数，并传入学习率。</span><br>loss_func = torch.nn.MSELoss()      <span class="hljs-comment"># 预测值和真实值的误差计算公式 (均方差)</span><br><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br>    prediction = net(x)     <span class="hljs-comment"># 喂给 net 训练数据 x, 输出预测值</span><br><br>    loss = loss_func(prediction, y)     <span class="hljs-comment"># 计算两者的误差</span><br><br>    optimizer.zero_grad()   <span class="hljs-comment"># 清空上一步的残余更新参数值</span><br>    loss.backward(retain_graph=<span class="hljs-keyword">True</span>)         <span class="hljs-comment"># 误差反向传播, 计算参数更新值 参数说明见下面。</span><br>    optimizer.step()        <span class="hljs-comment"># 将参数更新值施加到 net 的 parameters 上</span><br></code></pre></td></tr></table></figure><h2 id="可视化训练过程"><a href="#可视化训练过程" class="headerlink" title="可视化训练过程"></a>可视化训练过程</h2><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>plt.ion()   <span class="hljs-comment"># 画图，变成一个实时打印的过程。</span><br>plt.show()<br><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br><br>    ...<br>    loss.backward(retain_graph=<span class="hljs-keyword">True</span>)<br>    optimizer.step()<br><br>    <span class="hljs-comment"># 接着上面来</span><br>    <span class="hljs-keyword">if</span> t % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># plot and show learning process</span><br>        plt.cla()<br>        plt.scatter(x.data.numpy(), y.data.numpy())<br>        plt.plot(x.data.numpy(), prediction.data.numpy(), <span class="hljs-string">'r-'</span>, lw=<span class="hljs-number">5</span>)<br>        plt.text(<span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'Loss=%.4f'</span> % loss.data[<span class="hljs-number">0</span>], fontdict=&#123;<span class="hljs-string">'size'</span>: <span class="hljs-number">20</span>, <span class="hljs-string">'color'</span>:  <span class="hljs-string">'red'</span>&#125;)<br>        plt.pause(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><blockquote><p><a href="http://pytorch.org/tutorials/beginner/former_torchies/autograd_tutorial.html" target="_blank" rel="noopener">pytorch_tutorials_</a>By default, gradient computation flushes all the internal buffers contained in the graph, so if you even want to do the backward on some part of the graph twice, you need to pass in <code>retain_variables = True</code> during the first pass.</p></blockquote><p><img src="/pic/2017-09/figure_3.png" alt=""></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>pytorch03</title>
      <link href="/2017/09/22/pytorch03/"/>
      <url>/2017/09/22/pytorch03/</url>
      <content type="html"><![CDATA[<h1 id="激励函数"><a href="#激励函数" class="headerlink" title="激励函数"></a>激励函数</h1><p>$Y = AF(MX)$ ：AF即是激励函数。MX是线性函数，通过激励函数将线性函数转成非线性函数。</p><p>常用的激励函数有<code>relu</code>,<code>sigmoid</code>,<code>tanh</code>,<code>softplus</code></p><p>下面画出激励函数。</p><a id="more"></a><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F     <span class="hljs-comment"># 激励函数都在这</span><br><span class="hljs-keyword">from</span> torch.autograd <span class="hljs-keyword">import</span> Variable<br><br><span class="hljs-comment"># 做一些假数据来观看图像</span><br>x = torch.linspace(<span class="hljs-number">-5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">200</span>)  <span class="hljs-comment"># x data (tensor), shape=(100, 1)</span><br>x = Variable(x)<br></code></pre></td></tr></table></figure><blockquote><p><code>torch.linspac(a,b,n)</code>: 分成<code>n-1</code>份，</p></blockquote><p>接着就是做生成不同的激励函数数据:</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">x_np = x.data.numpy()   <span class="hljs-comment"># 换成 numpy array, 出图时用</span><br><br><span class="hljs-comment"># 几种常用的 激励函数</span><br>y_relu = F.relu(x).data.numpy()<br>y_sigmoid = F.sigmoid(x).data.numpy()<br>y_tanh = F.tanh(x).data.numpy()<br>y_softplus = F.softplus(x).data.numpy()<br><span class="hljs-comment"># y_softmax = F.softmax(x)  softmax 比较特殊, 不能直接显示, 不过他是关于概率的, 用于分类</span><br></code></pre></td></tr></table></figure><p>接着我们开始画图, 画图的代码也在下面:</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt  <span class="hljs-comment"># python 的可视化模块, 我有教程 (https://morvanzhou.github.io/tutorials/data-manipulation/plt/)</span><br><br>plt.figure(<span class="hljs-number">1</span>, figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">6</span>))<br>plt.subplot(<span class="hljs-number">221</span>)<br>plt.plot(x_np, y_relu, c=<span class="hljs-string">'red'</span>, label=<span class="hljs-string">'relu'</span>)<br>plt.ylim((<span class="hljs-number">-1</span>, <span class="hljs-number">5</span>))<br>plt.legend(loc=<span class="hljs-string">'best'</span>)<br><br>plt.subplot(<span class="hljs-number">222</span>)<br>plt.plot(x_np, y_sigmoid, c=<span class="hljs-string">'red'</span>, label=<span class="hljs-string">'sigmoid'</span>)<br>plt.ylim((<span class="hljs-number">-0.2</span>, <span class="hljs-number">1.2</span>))<br>plt.legend(loc=<span class="hljs-string">'best'</span>)<br><br>plt.subplot(<span class="hljs-number">223</span>)<br>plt.plot(x_np, y_tanh, c=<span class="hljs-string">'red'</span>, label=<span class="hljs-string">'tanh'</span>)<br>plt.ylim((<span class="hljs-number">-1.2</span>, <span class="hljs-number">1.2</span>))<br>plt.legend(loc=<span class="hljs-string">'best'</span>)<br><br>plt.subplot(<span class="hljs-number">224</span>)<br>plt.plot(x_np, y_softplus, c=<span class="hljs-string">'red'</span>, label=<span class="hljs-string">'softplus'</span>)<br>plt.ylim((<span class="hljs-number">-0.2</span>, <span class="hljs-number">6</span>))<br>plt.legend(loc=<span class="hljs-string">'best'</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><blockquote><p><code>plt.figure()</code>作用新建绘画窗口,独立显示绘画的图片</p><p><code>plt.plot()</code>这个函数比较常用，就是默认一个参数下,就是y的坐标</p><p><code>plt.subplot()</code>这个比较重要,需要重点掌握,参数有r,c,n三个参数</p><p>r            表示行数</p><p>c            表示列行</p><p>n            表示第几个</p><p><code>plt.show()</code>显示绘画的图像</p></blockquote><p><img src="/pic/2017-09/figure_1.png" alt=""></p><blockquote><p>参考:</p><p><a href="https://morvanzhou.github.io/tutorials/machine-learning/torch/2-03-activation/" target="_blank" rel="noopener">莫烦python</a></p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>pytorch02</title>
      <link href="/2017/09/22/pytorch02/"/>
      <url>/2017/09/22/pytorch02/</url>
      <content type="html"><![CDATA[<h2 id="pytorch的变量"><a href="#pytorch的变量" class="headerlink" title="pytorch的变量"></a>pytorch的变量</h2><a id="more"></a><p>同样感谢<a href="https://xmfbit.github.io/2017/02/25/pytorch-tutor-01/" target="_blank" rel="noopener">xmfbit</a>，讲的很清楚搬过来。</p><p>说完了数据类型<code>Tensor</code>，下一步便是如何实现一个神经网络。首先，对<a href="http://pytorch.org/docs/autograd.html" target="_blank" rel="noopener">自动求导</a>做一说明。</p><p>我们需要关注的是<code>autograd.Variable</code>。这个东西包装了<code>Tensor</code>。一旦你完成了计算，就可以使用<code>.backward()</code>方法自动得到（以该<code>Variable</code>为叶子节点的那个）网络中参数的梯度。<code>Variable</code>有一个名叫<code>data</code>的字段，可以通过它获得被包装起来的那个原始的<code>Tensor</code>数据。同时，使用<code>grad</code>字段，可以获取梯度（也是一个<code>Variable</code>）。</p><p><code>Variable</code>是计算图的节点，同时<code>Function</code>实现了变量之间的变换。它们互相联系，构成了用于计算的无环图。每个<code>Variable</code>有一个<code>creator</code>的字段，表明了它是由哪个<code>Function</code>创建的（除了用户自己显式创建的那些，这时候<code>creator</code>是<code>None</code>）。</p><p>当进行反向传播计算梯度时，如果<code>Variable</code>是标量（比如最终的<code>loss</code>是欧氏距离或者交叉熵），那么<code>backward()</code>函数不需要参数。然而如果<code>Variable</code>有不止一个元素的时候，需要为其中的每个元素指明其（由上层传导来的）梯度（也就是一个和<code>Variable</code>shape匹配的<code>Tensor</code>）。看下面的说明代码。</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.autograd <span class="hljs-keyword">import</span> Variable<br>x = Variable(torch.ones(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), requires_grad = <span class="hljs-keyword">True</span>)<br>x     <span class="hljs-comment"># x 包装了一个2x2的Tensor</span><br><span class="hljs-string">"""<br>Variable containing:<br> 1  1<br> 1  1<br>[torch.FloatTensor of size 2x2]<br>"""</span><br><span class="hljs-comment"># Variable进行计算</span><br><span class="hljs-comment"># y was created as a result of an operation,</span><br><span class="hljs-comment"># so it has a creator</span><br>y = x + <span class="hljs-number">2</span><br>y.creator    <span class="hljs-comment"># out: &lt;torch.autograd._functions.basic_ops.AddConstant at 0x7fa1cc158c08&gt;</span><br>z = y * y * <span class="hljs-number">3</span>  <br>out = z.mean()   <span class="hljs-comment"># out: Variable containing: 27 [torch.FloatTensor of size 1]</span><br><span class="hljs-comment"># let's backprop now</span><br>out.backward()  <span class="hljs-comment"># 其实相当于 out.backward(torch.Tensor([1.0]))</span><br><span class="hljs-comment"># print gradients d(out)/dx</span><br>x.grad<br><span class="hljs-string">"""<br>Variable containing:<br> 4.5000  4.5000<br> 4.5000  4.5000<br>[torch.FloatTensor of size 2x2]<br>"""</span><br></code></pre></td></tr></table></figure><p>下面的代码就是结果不是标量，而是普通的<code>Tensor</code>的例子。</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 也可以通过Tensor显式地创建Variable</span><br>x = torch.randn(<span class="hljs-number">3</span>)<br>x = Variable(x, requires_grad = <span class="hljs-keyword">True</span>)<br><span class="hljs-comment"># 一个更复杂的 op例子</span><br>y = x * <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> y.data.norm() &lt; <span class="hljs-number">1000</span>:<br>    y = y * <span class="hljs-number">2</span><br><span class="hljs-comment"># 计算 dy/dx</span><br>gradients = torch.FloatTensor([<span class="hljs-number">0.1</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0001</span>])<br>y.backward(gradients)<br>x.grad<br><span class="hljs-string">"""<br>Variable containing:<br>  204.8000<br> 2048.0000<br>    0.2048<br>[torch.FloatTensor of size 3]<br>"""</span><br></code></pre></td></tr></table></figure><h2 id="获取Variable-里面的数据："><a href="#获取Variable-里面的数据：" class="headerlink" title="获取Variable 里面的数据："></a>获取Variable 里面的数据：</h2><p>上面已经说过，<code>Variable</code>包装了<code>data</code>的字段,</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">print(variable.data)<span class="hljs-comment"># 获取包装的数据信息。</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>pytorch01</title>
      <link href="/2017/09/22/pytorch01/"/>
      <url>/2017/09/22/pytorch01/</url>
      <content type="html"><![CDATA[<h1 id="pytorch-学习笔记"><a href="#pytorch-学习笔记" class="headerlink" title="pytorch 学习笔记"></a>pytorch 学习笔记</h1><a id="more"></a><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p><a href="http://pytorch.org/" target="_blank" rel="noopener">pytorch主页</a>有详细说明.</p><p><code>os: osx</code>-<code>package mamnager: conda</code>-<code>python 3.6</code>-<code>no CPU</code></p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install pytorch torchvision -c soumith <br>python<br><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; import torch 出现错误。</span><br>解决：pip install numpy --upgrade<br></code></pre></td></tr></table></figure><h2 id="2-Torch-或-Numpy"><a href="#2-Torch-或-Numpy" class="headerlink" title="2.Torch 或 Numpy"></a>2.Torch 或 Numpy</h2><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>np_data = np.arange(<span class="hljs-number">6</span>).reshape((<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br>torch_data = torch.from_numpy(np_data)<br>tensor2array = torch_data.numpy()<br>print(<br>    <span class="hljs-string">'\nnumpy array:'</span>, np_data,          <span class="hljs-comment"># [[0 1 2], [3 4 5]]</span><br>    <span class="hljs-string">'\ntorch tensor:'</span>, torch_data,      <span class="hljs-comment">#  0  1  2 \n 3  4  5    [torch.LongTensor of size 2x3]</span><br>    <span class="hljs-string">'\ntensor to array:'</span>, tensor2array, <span class="hljs-comment"># [[0 1 2], [3 4 5]]</span><br>)<br></code></pre></td></tr></table></figure><blockquote><p><strong><code>np.arange</code>与<code>range</code></strong></p><p>使用方式相似，<code>np.arange([start,] stop[, step,], dtype=None)</code>;<code>range(start, stop[, step])</code></p><p>但<code>np.arange</code>产生的是<code>array</code>类型的数据。</p><p><strong>torch data对应的numpy array类型</strong>: 可通过函数互换。</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;In [<span class="hljs-number">14</span>]: torch_data<br>&gt;Out[<span class="hljs-number">14</span>]:<br>&gt;<br>&gt; <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><br>&gt; <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span><br>&gt;[torch.LongTensor of size <span class="hljs-number">2</span>x3]<br>&gt;<br>&gt;In [<span class="hljs-number">15</span>]: np_data<br>&gt;Out[<span class="hljs-number">15</span>]:<br>&gt;array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>&gt;       [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]])<br>&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="3-Torch-中的数学运算"><a href="#3-Torch-中的数学运算" class="headerlink" title="3. Torch 中的数学运算"></a>3. Torch 中的数学运算</h2><h3 id="简单计算"><a href="#简单计算" class="headerlink" title="简单计算"></a>简单计算</h3><p><code>Tensor</code> 和<code>numy</code>一样，且能互相转换，转换前后没有发生内存的复制，所以修改其中某一方的值，也会引起另一方改变。</p><figure class="hljs highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment"># np.array 转为Tensor</span><br>import numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">a</span> = np.ones(<span class="hljs-number">5</span>)<br><span class="hljs-comment"># 使用torch.from_numpy即可实现转换</span><br>b = torch.from_numpy(<span class="hljs-keyword">a</span>)  <span class="hljs-comment"># out: [torch.DoubleTensor of size 5]</span><br>np.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">a</span>, <span class="hljs-number">1</span>, out=<span class="hljs-keyword">a</span>)<br>print(<span class="hljs-keyword">a</span>)<br>print(b)            <span class="hljs-comment"># a b的值都变为2</span><br></code></pre></td></tr></table></figure><blockquote><p><code>Tensor</code>，即<code>numpy</code>中的多维数组。上面已经提到过，PyTorch对其加入了GPU支持。同时，PyTorch中的<code>Tensor</code>可以与<code>numpy</code>中的<code>array</code>很方便地进行互相转换。</p><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt; x = torch.Tensor(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)  <span class="hljs-comment"># construct a 5x3 matrix, uninitialized</span><br>&gt; <span class="hljs-comment"># 或者随机填充</span><br>&gt; y = torch.rand(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)    <span class="hljs-comment"># construct a randomly initialized matrix</span><br>&gt; <span class="hljs-comment"># 使用size方法可以获得tensor的shape信息，torch.Size 可以看做 tuple</span><br>&gt; x.size()                <span class="hljs-comment"># out: torch.Size([5, 3])</span><br>&gt;<br></code></pre></td></tr></table></figure></blockquote><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">data = [<span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>tensor = torch.FloatTensor(data)  <span class="hljs-comment"># 转换成32位浮点 tensor</span><br><br>np.abs(data)<br>torch.abs(tensor)  <br><br>np.sin(data)<br>torch.sin(tensor)<br><br>np.mean(data)<br>torch.mean(tensor)<br></code></pre></td></tr></table></figure><blockquote><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> abs </span><br><span class="hljs-meta">&gt;</span><span class="bash"> numpy:  [1 2 1 2] </span><br><span class="hljs-meta">&gt;</span><span class="bash"> torch:  </span><br><span class="hljs-meta">&gt;</span><span class="bash">  1</span><br><span class="hljs-meta">&gt;</span><span class="bash">  2</span><br><span class="hljs-meta">&gt;</span><span class="bash">  1</span><br><span class="hljs-meta">&gt;</span><span class="bash">  2</span><br><span class="hljs-meta">&gt;</span><span class="bash"> [torch.FloatTensor of size 4]</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p>numpy 是横着排列，tensor 是纵向排列的(<code>\n</code>)。</p></blockquote><h3 id="矩阵计算"><a href="#矩阵计算" class="headerlink" title="矩阵计算"></a>矩阵计算</h3><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># matrix multiplication 矩阵点乘</span><br>data = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]]<br>tensor = torch.FloatTensor(data)  <span class="hljs-comment"># 转换成32位浮点 tensor</span><br><br>np.matmul(data, data)<br>torch.mm(tensor, tensor) <br>[[<span class="hljs-number">7</span>,<span class="hljs-number">10</span>]，[<span class="hljs-number">15</span>,<span class="hljs-number">22</span>]]<br></code></pre></td></tr></table></figure><h3 id="GPU计算"><a href="#GPU计算" class="headerlink" title="GPU计算"></a>GPU计算</h3><p>PyTorch中使用GPU计算很简单，通过调用<code>.cuda()</code>方法，很容易实现GPU支持。</p><figure class="hljs highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"># <span class="hljs-keyword">let</span> us run this cell <span class="hljs-keyword">only</span> <span class="hljs-keyword">if</span> CUDA <span class="hljs-keyword">is</span> available<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">'cuda is avaliable'</span>)<br>    <span class="hljs-keyword">x</span> = <span class="hljs-keyword">x</span>.cuda()<br>    <span class="hljs-keyword">y</span> = <span class="hljs-keyword">y</span>.cuda()<br>    <span class="hljs-keyword">x</span> + <span class="hljs-keyword">y</span>          # 在GPU上进行计算<br></code></pre></td></tr></table></figure><blockquote><p> 感谢<em><a href="https://morvanzhou.github.io/tutorials/" target="_blank" rel="noopener">莫烦python</a></em>，<a href="https://xmfbit.github.io/2017/02/25/pytorch-tutor-01/" target="_blank" rel="noopener">xmfbit</a></p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>同步服务器文件夹</title>
      <link href="/2017/09/22/%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>/2017/09/22/%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      <content type="html"><![CDATA[<p>一个简单的脚本，将本地文件夹和服务器文件夹内容互相同步。</p><a id="more"></a><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding:utf-8 -*- </span><br><span class="hljs-keyword">import</span> os,paramiko,time<br> <br><br><span class="hljs-string">'''<br>需要安装paramiko! Python3下已测试通过。<br>部分代码参考：http://www.cnblogs.com/kex1n/p/6021445.html<br>已知问题：不能文件夹内的文件夹。<br>'''</span><br><br><span class="hljs-comment">###############################</span><br><span class="hljs-comment">#####      参数设置      ######</span><br><span class="hljs-comment">###############################</span><br>synPath = <span class="hljs-string">'/home/***/Syn'</span> <span class="hljs-comment"># 远程文件夹</span><br>localSynPath = <span class="hljs-string">'/home/***/Downloads/Syn'</span> <span class="hljs-comment"># 本地文件夹</span><br>sleepTime = <span class="hljs-number">300</span> <span class="hljs-comment"># 设置同步时间间隔(秒)</span><br>ip = <span class="hljs-string">'10.10.***.***'</span> <span class="hljs-comment">#设置服务器IP地址</span><br>usrName = <span class="hljs-string">''</span><br>passwd = <span class="hljs-string">''</span> <span class="hljs-comment"># 服务器账号密码</span><br><span class="hljs-comment">###############################</span><br><br>ssh = paramiko.SSHClient()<br>ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>ssh.connect(ip,username=usrName,password=passwd,timeout=<span class="hljs-number">300</span>)<br><br><br>sftp = paramiko.SFTPClient.from_transport(ssh.get_transport())<br>sftp = ssh.open_sftp()<br><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:<br>    fileList = set(sftp.listdir(synPath)) <span class="hljs-comment"># 服务器同步文件夹中的内容</span><br>    localFileList = set(os.listdir(localSynPath))<br><br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> fileList:  <span class="hljs-comment"># 将远程文件下载到本地</span><br>        <span class="hljs-keyword">if</span> file <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> localFileList:<br>            remotName = synPath +<span class="hljs-string">'/'</span>+ file<br>            localName = localSynPath +<span class="hljs-string">'/'</span>+ file<br>            <span class="hljs-keyword">try</span>:<br>                sftp.get(remotName,localName)<br>            <span class="hljs-keyword">except</span>:<br>                print(<span class="hljs-string">'err:下载到本地出错！'</span>)<br>                next<br><br><br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> localFileList: <span class="hljs-comment"># 将本地文件上传到服务器</span><br>        <span class="hljs-keyword">if</span> file <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> fileList:<br>            remotName = synPath +<span class="hljs-string">'/'</span>+ file<br>            localName = localSynPath +<span class="hljs-string">'/'</span>+ file<br>            <span class="hljs-keyword">try</span>:<br>                sftp.put(localName,remotName)<br>            <span class="hljs-keyword">except</span>:<br>                print(<span class="hljs-string">'err:上传到服务器出错！'</span>)<br>                next<br>    <br>    time.sleep(sleepTime)<br></code></pre></td></tr></table></figure><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><ul><li>在本地运行该脚本。<blockquote><p>建议加入环境变量：alias syn=’nohup python3 scpFile.py 1&gt;.log 2&gt;&amp;1 &amp;’</p></blockquote></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>matlab04图像的增强处理</title>
      <link href="/2017/09/22/matlab04%E5%9B%BE%E5%83%8F%E7%9A%84%E5%A2%9E%E5%BC%BA%E5%A4%84%E7%90%86/"/>
      <url>/2017/09/22/matlab04%E5%9B%BE%E5%83%8F%E7%9A%84%E5%A2%9E%E5%BC%BA%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="MATLAB04图像的增强处理"><a href="#MATLAB04图像的增强处理" class="headerlink" title="MATLAB04图像的增强处理"></a>MATLAB04图像的增强处理</h1><p>两函数的傅里叶变换的乘积等于它们卷积后的傅里叶变换。</p><a id="more"></a><p>图像增强的基本方法有空域处理和频域处理两种。图像的平滑处理是图像增强的典型应用，其主要任务是既平滑掉噪声，又尽量保持图像的细节；在频域处理中，噪声和图像的细节部分都位于高频，所以如何在低通滤波的同时保持高频细节是处理时要考虑的问题。</p><h2 id="卷积积分与邻域处理"><a href="#卷积积分与邻域处理" class="headerlink" title="卷积积分与邻域处理"></a>卷积积分与邻域处理</h2><h3 id="邻点和邻域"><a href="#邻点和邻域" class="headerlink" title="邻点和邻域"></a>邻点和邻域</h3><ol><li><p>图像是由像素构成的，图像中的相邻像素构成邻域，邻域中的像素点互为邻点。对于任意像素，处于上下左右四个方向的像素点称为它的4邻点；加上角里的4个像素，就称为它的8邻点。同样的也能定义它的24邻点。</p><p>像素的邻域可以看做是像素邻点的集合，在图像处理中也将中心像素和它的特定邻点合称为邻域。一般划定使用正方形。如3x3邻域、5x5邻域等。</p></li><li><p>邻域处理</p><p>以包含中心像素的邻域为分析对象，处理得到的像素灰度来源于对邻域内像素灰度的计算。常用的邻域处理包括图像的平滑、图像的锐化、边缘检测。</p></li><li><p>卷积和模板</p><p>在对图像进行卷积运算时，原始数据与结果数据分开保存，对原始数据分块处理，在处理过程中保持原始数据不变，最终得到完整的结果数据。用卷积对图像进行处理时，改变对原始图像各部分的处理顺序不会对处理结果造成影响。</p></li><li><p>卷积运算在处理中的使用</p><p>图像的卷积运算实际上是通过模板在图像上的移动完成的。在图像处理中，不断在图像上移动模板的位置，每当模板中心对准一个像素时，就对此像素所在邻域内的像素灰度根据模板进行加权求和，得到的结果通常远大于原像素灰度，这就需要将球和结果除以一个比例因子(衰减因子)。最后将结果限制在0~255之间作为中心像素的灰度保存在结果中。</p></li></ol><h3 id="运用模板实现邻域处理"><a href="#运用模板实现邻域处理" class="headerlink" title="运用模板实现邻域处理"></a>运用模板实现邻域处理</h3><p>在图像处理中，使用模板进行邻域处理，本质上就是执行二维卷积计算。MATLAB中已经提供了执行二维卷积计算的函数<code>conv2()</code>,还有基于卷积的图像滤波函数<code>filter()</code>，两者是等价的。还有一个<code>imfilter()</code>直接对多维矩阵(RGB图像)进行空间滤波，而<code>filter2</code>只能处理二维矩阵(灰度图像)。另外<code>conv2</code>所得图像大小将会发生改变，<code>imfilter()</code>系统会自动执行对于图像四边像素的处理而保持大小不变。</p><figure class="hljs highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">g</span>=imfilter(f,w,option1,option2,...)<br></code></pre></td></tr></table></figure><blockquote><p>f是要进行滤波操作的图像，w是滤波操作所使用的模板。</p></blockquote><ul><li>参数表</li></ul><p>1、边界选项</p><table><thead><tr><th>合法值</th><th>含义</th></tr></thead><tbody><tr><td><code>X</code>(X代表一个具体的数值)</td><td>用固定数值X填充虚拟边界，在默认情况下用0填充</td></tr><tr><td><code>&#39;symmetric&#39;</code></td><td>填充虚拟边界的内容是通过对靠近原始图像边缘的像素相对于原始图像边缘镜像得到的</td></tr><tr><td><code>&#39;replicate&#39;</code></td><td>填充虚拟边界的内容总是重复它最近的边缘像素</td></tr><tr><td><code>&#39;circular&#39;</code></td><td>认为原始图像模式具有周期性，从而周期性地填充虚拟边界的内容</td></tr></tbody></table><p>2、尺寸选项</p><table><thead><tr><th>合法取值</th><th>含义</th></tr></thead><tbody><tr><td><code>&#39;same&#39;</code></td><td>输出图像g与输入图像f尺寸相同</td></tr><tr><td><code>&#39;full&#39;</code></td><td>输出图像g的尺寸为填充虚拟边界后图像f的尺寸</td></tr></tbody></table><p>3、模式选项</p><table><thead><tr><th>合法取值</th><th>含义</th></tr></thead><tbody><tr><td><code>&#39;corr&#39;</code></td><td>滤波过程为相关</td></tr><tr><td><code>&#39;conv&#39;</code></td><td>滤波过程为卷积</td></tr></tbody></table><blockquote><p>用于滤波的模板可以自定义，也可以使用系统预设的模板。此时与imfilter()相配合的另一个函数是<code>fspecial()</code>    ,该函数用于创建一些预定义的二维滤波器(模板)来供imfilter()使用语法如下：</p></blockquote><figure class="hljs highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-title">h</span> = fspecial(<span class="hljs-keyword">type</span>,parameters)<br></code></pre></td></tr></table></figure><blockquote><p>type用于指定模板的类型，合法取值如下</p></blockquote><p>参数取值表：</p><table><thead><tr><th>合法取值</th><th>功能描述</th></tr></thead><tbody><tr><td><code>&#39;average&#39;</code></td><td>平均模板</td></tr><tr><td><code>&#39;disk&#39;</code></td><td>圆形邻域的平均模板</td></tr><tr><td><code>&#39;gaussian&#39;</code></td><td>高斯模板</td></tr><tr><td><code>&#39;laplacian&#39;</code></td><td>拉普拉斯模板</td></tr><tr><td><code>&#39;log&#39;</code></td><td>高斯-拉普拉斯模板</td></tr><tr><td><code>&#39;prewitt&#39;</code></td><td>prewitt水平边缘检测滤波器</td></tr><tr><td><code>&#39;sobel&#39;</code></td><td>sobel水平边缘检测滤波器</td></tr><tr><td><code>&#39;unsharp&#39;</code></td><td>unsharp对比度增强滤波器</td></tr></tbody></table><blockquote><p>参数parameters为可选选项，是和指定的模板相关的配置参数，如尺寸大小或者标准差等。该函数的返回值h为一个特定的模板。</p></blockquote><h2 id="图像的简单平滑"><a href="#图像的简单平滑" class="headerlink" title="图像的简单平滑"></a>图像的简单平滑</h2><p>图像的简单平滑是指通过邻域简单平均对图像进行平滑处理的方法，可以在一定程度上消除原始图像中的噪声、降低原始图像对比度的作用。</p><p>简单平滑模板：</p><table><thead><tr><th>1</th><th>1</th><th>1</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><blockquote><p>选取9作为衰减因子，就可以很容易的实现图像的简单平滑。</p></blockquote><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined">i = imread('<span class="hljs-number">2017</span><span class="hljs-number">-03</span><span class="hljs-number">-20</span><span class="hljs-number">-1.</span>jpg')<br>%注意w和h1这两个模板是等价的<br>w = [<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>;<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>;<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>]/<span class="hljs-number">9</span>;<br>h1 = fspecial('average',[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]);<br>h2 = fspecial('average',[<span class="hljs-number">5</span>,<span class="hljs-number">5</span>]);<br>h3 = fspecial('average',[<span class="hljs-number">7</span>,<span class="hljs-number">7</span>]);<br>%执行图像的简单平滑<br>g1 = imfilter(i,w,'conv','replicate');<br>g2 = imfilter(i,h2,'conv','replicate');<br>g3 = imfilter(i,h3,'conv','replicate');<br><br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),imshow(g1),title('A');<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>),imshow(g2),title('B');<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),imshow(g3),title('C');<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-20-2.jpg" alt=""></p><blockquote><p>增大平滑临边长的方法可以消除更多的噪声影响，同时图像的对比度也下降很多。使用简单平滑的方法进行噪声下消除往往以大幅降低图像清晰度为代价。</p><p>简单平滑处理实质上并不能真正消除噪点，只是尽可能使人眼不易察觉到噪声的影响。</p></blockquote><h2 id="图像的高斯平滑"><a href="#图像的高斯平滑" class="headerlink" title="图像的高斯平滑"></a>图像的高斯平滑</h2><p>在图像的高斯平滑中，在对图像邻域进行平均时，不同位置的像素被赋予了不同的权值。</p><p>在图像处理中把对邻域像素逐一处理的算法过程称为滤波器。</p><p>平滑线性滤波器的工作原理是利用模板对邻域内像素灰度进行加权平均，因此平滑线性滤波器也被称为均值滤波器。平滑线性滤波器的衰减因子一般选用模板中所有权值的和，这样可以避免处理对图像整体属性的影响。</p><p>高斯模板上的权值是由高斯分布函数确定的。</p><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">i = imread<span class="hljs-comment">('2017-03-20-3.jpg')</span>;<br>h = fspecial<span class="hljs-comment">('gaussian',7,2)</span>;<br>g = imfilter<span class="hljs-comment">(i,h,'conv')</span>;<br>subplot<span class="hljs-comment">(121)</span>,imshow<span class="hljs-comment">(i)</span>,title<span class="hljs-comment">('original image')</span>;<br>subplot<span class="hljs-comment">(122)</span>,imshow<span class="hljs-comment">(g)</span>,title<span class="hljs-comment">('gaussian smooth')</span>;<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-20-4.jpg" alt=""></p><blockquote><p>图像进行了7X7邻域高斯平滑处理的效果。标准差为2</p></blockquote><h2 id="图像的中值滤波"><a href="#图像的中值滤波" class="headerlink" title="图像的中值滤波"></a>图像的中值滤波</h2><p>是一种非线性的图像处理方法，通过对邻域内像素按灰度排序的结果决定中心像素的灰度。</p><p>通过对采样窗口内的<code>奇数个像素</code>的灰度数值进行排序，并取出序列中位于中间位置的灰度作为中心像素的灰度。</p><p>简单平滑和高斯平滑都是讲噪声分摊到整个邻域中的每个像素，以此来减小噪声点的影响，然而代价是图像清晰度的大量损失。</p><p>中值滤波对消除离散型噪声点效果显著。</p><p>MATLAB中提供了用以实现中值滤波的函数medfilt2(),该函数 <strong>只适用于处理灰度图片</strong></p><figure class="hljs highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">I2</span> = medfilt2(I1,[m n])<br></code></pre></td></tr></table></figure><blockquote><p>I1是待处理图像的像素矩阵，m和n给出了中值滤波处理模板的大小，默认3x3。</p><p>中值滤波在处理某些噪声有很大优势：如椒盐噪声(脉冲噪声)，常由图像传感器、传输信道、解码处理产生的黑白相间的亮暗点噪声。</p></blockquote><p>函数<code>imnoise()</code>来模拟图像受到噪声污染的过程：</p><figure class="hljs highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">J</span> = imnoise(I,type,parameters);<br></code></pre></td></tr></table></figure><blockquote><p>I 是原始图像，type指定了噪声的类型，合法取值是<code>gaussian</code> (高斯白噪声)或者<code>salt &amp; papper</code>（椒盐噪声）.</p><p>高斯白噪声：如果噪声幅度服从高斯分布，就是高斯噪声，如果噪声功率谱密度是均匀分布的，则它是高斯白噪声。</p><p>parameters控制噪声被加入的程度。如</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> J = imnoise(I,<span class="hljs-string">'gaussian'</span>,m,v)</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br></code></pre></td></tr></table></figure></blockquote><blockquote><blockquote><p>表示对原始图像中每个像素叠加一个服从均值为m方差为v的高斯分布产生的随机噪声。</p></blockquote></blockquote><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs undefined">i = rgb2gray(imread('<span class="hljs-number">2017</span><span class="hljs-number">-03</span><span class="hljs-number">-20</span><span class="hljs-number">-3.</span>jpg'));<br>i_noise = imnoise(i,'salt &amp; pepper');<br>w1 = [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span>;<span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span>;<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span>]/<span class="hljs-number">16</span>;<br>output1 = imfilter(i_noise,w1,'conv','replicate');<br>w2 = [<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>;<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>;<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>]/<span class="hljs-number">9</span>;<br>output2 = imfilter(i_noise,w2,'conv','replicate');<br>output3 = medfilt2(i_noise,[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]);<br><br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>),imshow(i_noise),title('noise image');<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),imshow(output1),title('gaussian filter');<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),imshow(output2),title('average filter');<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>),imshow(output3),title('med filter');<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-20-5.jpg" alt=""></p><blockquote><p>中值滤波很好的解决了图像降噪的问题，然而对于细节较多的图像，中值滤波处理常常导致图像信息丢失。</p></blockquote><h2 id="图像的双边滤波"><a href="#图像的双边滤波" class="headerlink" title="图像的双边滤波"></a>图像的双边滤波</h2><p>双边滤波是一种非线性滤波方法，是结合图像的空间邻近度和像素值相似度的一种折中处理，同时考虑了空域信息和灰度相似性，从而力求在保持图像中边缘信息的同时，又实现降噪效果。</p><p>在像素灰度过度和缓的区域，双边滤波有类似于高斯滤波的效果，而在图像边缘等梯度较大的地方，则有保持效果。</p><p>对彩色图像和灰色图像在计算灰度差距时计算方法不同。</p><figure class="hljs highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span> = <span class="hljs-title">bfilter2</span><span class="hljs-params">(A,w,sigma)</span></span><br><br><span class="hljs-comment">%针对灰度图像或彩色图像选择应用不同的处理函数</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">size</span>(A,<span class="hljs-number">3</span>) == <span class="hljs-number">1</span><br>B = bfltGray(A,w,sigma(<span class="hljs-number">1</span>),sigma(<span class="hljs-number">2</span>));<br><span class="hljs-keyword">else</span><br>B = bfltColor(A,w,sigma(<span class="hljs-number">1</span>),sigma(<span class="hljs-number">2</span>));<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%对灰度图像进行双边滤波处理的函数</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span> = <span class="hljs-title">bfltGray</span><span class="hljs-params">(A,w,sigma_d,sigma_r)</span></span><br><br><span class="hljs-comment">%计算高斯模板</span><br>[X,Y] = <span class="hljs-built_in">meshgrid</span>(-w:w,-w:w);<br>G = <span class="hljs-built_in">exp</span>(-(X.^<span class="hljs-number">2</span>+Y.^<span class="hljs-number">2</span>)/(<span class="hljs-number">2</span>*sigma_d^<span class="hljs-number">2</span>));<br><br><span class="hljs-comment">%进行双边滤波</span><br>dim = <span class="hljs-built_in">size</span>(A);<br>B = <span class="hljs-built_in">zeros</span>(dim);<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:dim(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">1</span>:dim(<span class="hljs-number">2</span>)<br><span class="hljs-comment">%抽取一块局部区域，这与值域的大小相对应</span><br>iMin = max(<span class="hljs-built_in">i</span>-w,<span class="hljs-number">1</span>);<br>iMax = min(<span class="hljs-built_in">i</span>+w,dim(<span class="hljs-number">1</span>));<br>jMin = max(<span class="hljs-built_in">j</span>-w,<span class="hljs-number">1</span>);<br>jMax = min(<span class="hljs-built_in">j</span>+w,dim(<span class="hljs-number">2</span>));<br>I = A(iMin:iMax,jMin:jMax);<br><span class="hljs-comment">%计算该值域核，也就是灰度值的权值模板</span><br>H = <span class="hljs-built_in">exp</span>(-(I-A(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)).^<span class="hljs-number">2</span>/(<span class="hljs-number">2</span>*sigma_r^<span class="hljs-number">2</span>));<br><br><span class="hljs-comment">%计算双边滤波响应</span><br>F = H.*G((iMin:iMax)-<span class="hljs-built_in">i</span>+w+<span class="hljs-number">1</span>,(jMin:jMax)-<span class="hljs-built_in">j</span>+w+<span class="hljs-number">1</span>);<br>B(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>) = sum(F(:).*I(:))/sum(F(:));<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%对彩色图像进行双边滤波处理的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span> = <span class="hljs-title">bfltColor</span><span class="hljs-params">(A,w,sigma_d,sigma_r)</span></span><br><br><span class="hljs-comment">%将输入的RGB图像转换到CIE颜色空间中</span><br><span class="hljs-keyword">if</span> exist(<span class="hljs-string">'applycform'</span>,<span class="hljs-string">'file'</span>)<br>A = applycform(A,makecform(<span class="hljs-string">'srgb2lab'</span>));<br><span class="hljs-keyword">else</span><br>A = colorspace(<span class="hljs-string">'Lab&lt;-RGB'</span>,A);<br><span class="hljs-keyword">end</span><br><br>[X,Y] = <span class="hljs-built_in">meshgrid</span>(-w:w,-w:w);<br>G = <span class="hljs-built_in">exp</span>(-(X.^<span class="hljs-number">2</span>+Y.^<span class="hljs-number">2</span>)/(<span class="hljs-number">2</span>*sigma_d^<span class="hljs-number">2</span>));<br>sigma_r = <span class="hljs-number">100</span>*sigma_r;<br><br><span class="hljs-comment">%进行滤波处理</span><br>dim = <span class="hljs-built_in">size</span>(A);<br>B = <span class="hljs-built_in">zeros</span>(dim);<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:dim(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">1</span>:dim(<span class="hljs-number">2</span>)<br>iMin = max(<span class="hljs-built_in">i</span>-w,<span class="hljs-number">1</span>);<br>iMax = min(<span class="hljs-built_in">i</span>+w,dim(<span class="hljs-number">1</span>));<br>jMin = max(<span class="hljs-built_in">j</span>-w,<span class="hljs-number">1</span>);<br>jMax = min(<span class="hljs-built_in">j</span>+w,dim(<span class="hljs-number">2</span>))<br>I = A(iMin:iMax,jMin:jMax,:);<br><br>dL = I(:,:,<span class="hljs-number">1</span>)-A(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,<span class="hljs-number">1</span>);<br>da = I(:,:,<span class="hljs-number">2</span>)-A(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,<span class="hljs-number">2</span>);<br>db = I(:,:,<span class="hljs-number">3</span>)-A(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,<span class="hljs-number">3</span>);<br>H = <span class="hljs-built_in">exp</span>(-(dL.^<span class="hljs-number">2</span>+da.^<span class="hljs-number">2</span>+db.^<span class="hljs-number">2</span>)/(<span class="hljs-number">2</span>*sigma_r^<span class="hljs-number">2</span>));<br><br>F = H.*G((iMin:iMax)-<span class="hljs-built_in">i</span>+w+<span class="hljs-number">1</span>,(jMin:jMax)-<span class="hljs-built_in">j</span>+w+<span class="hljs-number">1</span>);<br>norm_F = sum(F(:));<br>B(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,<span class="hljs-number">1</span>) = sum(sum(F.*I(:,:,<span class="hljs-number">1</span>)))/norm_F;<br>B(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,<span class="hljs-number">2</span>) = sum(sum(F.*I(:,:,<span class="hljs-number">2</span>)))/norm_F;<br>B(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>,<span class="hljs-number">2</span>) = sum(sum(F.*I(:,:,<span class="hljs-number">3</span>)))/norm_F;<br><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">% 将滤波结果转回RGB色彩空间</span><br><span class="hljs-keyword">if</span> exist(<span class="hljs-string">'applycform'</span>,<span class="hljs-string">'file'</span>)<br>B = applycform(B,makecform(<span class="hljs-string">'lab2srgb'</span>));<br><span class="hljs-keyword">else</span><br>B = colorspace(<span class="hljs-string">'RGB&lt;-Lab'</span>,B);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>调用上面的函数，对一副灰度图像进行双边滤波处理：</p><figure class="hljs highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">I</span> = imread(<span class="hljs-string">'2017-03-20-3.jpg'</span>);<br><span class="hljs-attribute">I</span> = double(I)/255;<br><br><span class="hljs-attribute">w</span> = 5;<br><span class="hljs-attribute">sigma</span> = [3 0.1];<br><span class="hljs-attribute">B</span> = bfilter2(I,w,sigma);<br></code></pre></td></tr></table></figure><h2 id="图像的拉普拉斯锐化"><a href="#图像的拉普拉斯锐化" class="headerlink" title="图像的拉普拉斯锐化"></a>图像的拉普拉斯锐化</h2><p>图像增强中，平滑是为了消除图像中的噪声干扰或降低图像对比度，与之相反的是为了增强图像的边缘和细节，需要对图像进行锐化以提高对比度。</p><p>图形的锐化：目的是提高图像的对比度。可以提高邻域内像素的会督查来提高图像的对比度。</p><p>像素锐化处理中，被增强的像素点应该是与邻域内其他像素有较大差异的，因此原始图像中灰度相同的区域不应受锐化处理的影响。</p><p>基本思想：当邻域的中心像素灰度值低于它所在邻域内其他像素的灰度的平均值时，此中心像素的灰度应被进一步降低；当邻域的中心像素灰度值高于它所在邻域内其他像素的平均灰度值时，此中心像素的灰度应被进一步提高，以此实现图像的锐化处理。</p><figure class="hljs highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">h</span> = fspecial(<span class="hljs-string">'unsharp'</span>,alpha)<br></code></pre></td></tr></table></figure><blockquote><p>以上代码返回一个3x3的unsharp对比度增强滤波器，其实就是一个Laplacian锐化模板。参数alpha用来控制拉普拉斯模板的形状，它的取值范围介于0.0和1.0之间。缺省时，alpha默认值是<code>0.2</code>.</p><p>unsharp滤波器是一个用来锐化图像的算子。</p></blockquote><figure class="hljs highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">I</span> = imread(<span class="hljs-string">'2017-03-20-3.jpg'</span>);<br>H = fspecial(<span class="hljs-string">'unsharp'</span>);<br>sharpened = imfilter(<span class="hljs-keyword">I</span>,H,<span class="hljs-string">'replicate'</span>);<br>subplot(<span class="hljs-number">121</span>),imshow(<span class="hljs-keyword">I</span>),title(<span class="hljs-string">'original Image'</span>)<br>subplot(<span class="hljs-number">122</span>),imshow(sharpened);title(<span class="hljs-string">'sharpened Image'</span>)<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-20-6.jpg" alt=""></p><blockquote><p>拉普拉斯锐化还是噪声敏感的，任何细小的噪声点都会在处理结果中清晰地显示出来。</p></blockquote><blockquote><p>如果不使用unsharp 算子：imfilter()在识别所采用的的模板是unsharp算子时，其实所执行的操作并不仅仅是卷积，为了完成特普拉斯锐化，还需要与原始图像进行叠加，以下代码演示了其中的细小差别：</p></blockquote><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">I = imread('<span class="hljs-number">2017</span><span class="hljs-number">-03</span><span class="hljs-number">-20</span><span class="hljs-number">-3.</span>jpg');<br>I = rgb2gray(I);<br>Laplace=[<span class="hljs-number">0</span> <span class="hljs-number">-1</span> <span class="hljs-number">0</span>;<span class="hljs-number">-1</span> <span class="hljs-number">4</span> <span class="hljs-number">-1</span>;<span class="hljs-number">0</span> <span class="hljs-number">-1</span> <span class="hljs-number">0</span>];<br>Data = double(I);<br>LaplaceImage=conv2(Data,Laplace,'same');<br>%上面这句也可以携程下面这种形式，作用是相同的。<br>%LaplaceImage=imfilter(Data,Laplace,'conv','same');<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);imshow(uint8(LaplaceImage));title('Laplace 图像');<br><br>%原始图像与拉普拉斯图像的叠加<br>DataLap = imadd(Data,LaplaceImage);<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),imshow(uint8(DataLap));<br>title('锐化增强后的图像');<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-20-7.jpg" alt=""></p><blockquote><p>图像的锐化是与平滑处理恰好相反的一种图像增强手段。</p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>matlab03图像的几何变换</title>
      <link href="/2017/09/22/matlab03%E5%9B%BE%E5%83%8F%E7%9A%84%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/"/>
      <url>/2017/09/22/matlab03%E5%9B%BE%E5%83%8F%E7%9A%84%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="图像的几何变换"><a href="#图像的几何变换" class="headerlink" title="图像的几何变换"></a>图像的几何变换</h1><p>图像的几何变换是指不改变图像像素的前提下进行相对空间位置移动的一种处理方式。主要包括：平移变换，镜像变换，图像的转置，缩放和旋转等。</p><a id="more"></a><h2 id="图像几何变换基本理论"><a href="#图像几何变换基本理论" class="headerlink" title="图像几何变换基本理论"></a>图像几何变换基本理论</h2><p>图像几何变换就是建立一种源图像像素与变换后的图像像素之间的映射关系。通过这种映射关系能够知道源图像任一像素变换后的坐标，或者变换后图像像素在原图像的坐标信息等。</p><p>变换公式可以是线性的，也可以是多项式的。只要给出图像任一像素的坐标，都可以通过映射关系获得几何变换后的像素坐标位置。这种输入到输出的过程称为<code>向前映射</code>。</p><ul><li><em>前向映射</em></li></ul><p>在使用向前映射处理图像的几何变换时还需要解决以下问题：</p><ul><li><p>浮点数坐标</p><p>变换前，像素坐标是离散型非负整数表示的，变换后可能会产生浮点数坐标</p></li><li><p>映射不完全和映射重叠</p><ul><li><p>映射不完全</p><p>指输入图像的像素总数小于输出图像的像素总数，会使得输出图像的部分像素与原始图像没有映射关系。</p></li><li><p>映射重叠</p><p>图像缩小时会产生这个问题。</p></li></ul></li><li><p><em>后向映射</em></p></li></ul><p>解决了前向映射产生的问题。</p><p>由输出图像的坐标反过来推算该像素在源图像的坐标位置。在实际处理中运用后向映射来进行图像的几何变换。</p><p>后向映射的矩阵表示更好是向前映射的逆变换。</p><h2 id="图像的平移变换"><a href="#图像的平移变换" class="headerlink" title="图像的平移变换"></a>图像的平移变换</h2><p>讨论dx、dy的值来确定复制关系：</p><ul><li><p>dx&gt;=width、dx&lt;=-width、dy&gt;=height或dy&lt;=-height</p><p>此时图像完全移出画布范围，不予处理。</p></li><li><p>dx&lt;0</p><p>此时左侧图像将被截去。一次从第|dx|个像素开始复制，复制图像宽度为width-|dx|</p></li><li><p>dx&gt;0</p><p>与上面相反</p></li></ul><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">I = imread<span class="hljs-comment">('2017-03-18-10.jpg')</span>;<br>I = double<span class="hljs-comment">(I)</span>;<br>B = zeros<span class="hljs-comment">(size(I)</span>);<br>H = size<span class="hljs-comment">(I)</span>;<br>move_x = <span class="hljs-number">100</span>;<br>move_y = <span class="hljs-number">150</span>;<br>B<span class="hljs-comment">(move_y +1:H(1)</span>,move_x<span class="hljs-number">+1</span>:H<span class="hljs-comment">(2)</span>,<span class="hljs-number">1</span>:H<span class="hljs-comment">(3)</span>)=I<span class="hljs-comment">(1:H(1)</span>-move_y,<span class="hljs-number">1</span>:H<span class="hljs-comment">(2)</span>-move_x,<span class="hljs-number">1</span>:H<span class="hljs-comment">(3)</span>);<br>subplot<span class="hljs-comment">(1,2,1)</span>,subimage<span class="hljs-comment">(uint8(I)</span>)<br>title<span class="hljs-comment">('原图像')</span><br>subplot<span class="hljs-comment">(1,2,2)</span>,subimage<span class="hljs-comment">(uint8(B)</span>);<br>title<span class="hljs-comment">('平移变换')</span><br></code></pre></td></tr></table></figure><blockquote><p><code>...</code>操作符可以用来续写一行</p></blockquote><p><img src="/pic/2017-03/2017-03-18-12.jpg" alt=""></p><p>图像形态学处理函数进行平移：<br><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">I = imread('<span class="hljs-number">2017</span><span class="hljs-number">-03</span><span class="hljs-number">-18</span><span class="hljs-number">-10.</span>jpg');<br>se = translate(strel(<span class="hljs-number">1</span>),[<span class="hljs-number">150</span> <span class="hljs-number">100</span>]);<br>B = imdilate(I,se);<br>figure<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>),subimage(I);<br>title('原图像');<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),subimage(B);<br>title('平移变换');<br></code></pre></td></tr></table></figure></p><h2 id="图像的镜像变换"><a href="#图像的镜像变换" class="headerlink" title="图像的镜像变换"></a>图像的镜像变换</h2><p>分为两种：水平镜像和垂直镜像</p><ol><li><p>水平镜像变换</p><p>x=width-x0-1</p><p>y=y0</p></li><li><p>垂直镜像变换</p><p>x=x0</p><p>y=height-y0-1</p></li></ol><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined">I = imread('<span class="hljs-number">2017</span><span class="hljs-number">-03</span><span class="hljs-number">-18</span><span class="hljs-number">-10.</span>jpg');<br>[height,width,dim]=size(I);<br>%水平镜像变换<br>tform = maketform('affine',[<span class="hljs-number">-1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>;width <span class="hljs-number">0</span> <span class="hljs-number">1</span>]);<br>B = imtransform(I,tform,'nearest');<br>%垂直镜像变换<br>tform2 = maketform('affine',[<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<span class="hljs-number">0</span> <span class="hljs-number">-1</span> <span class="hljs-number">0</span>;<span class="hljs-number">0</span> height <span class="hljs-number">1</span>]);<br>C = imtransform(I,tform2,'nearest');<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),imshow(I);<br>title('原图像');<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>),imshow(B);<br>title('水平图像');<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),imshow(C);<br>title('垂直图像')<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-18-13.jpg" alt=""></p><p>我们还可以参考图像平移中所使用的语法形式：</p><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">A = imread<span class="hljs-comment">('2017-03-18-10.jpg')</span>;<br>A = double<span class="hljs-comment">(A)</span>;<br>figure<span class="hljs-comment">(1)</span>,imshow<span class="hljs-comment">(uint8(A)</span>);<br>H = size<span class="hljs-comment">(A)</span>;<br>figure<span class="hljs-comment">(2)</span>,B<span class="hljs-comment">(1:H(1)</span>,<span class="hljs-number">1</span>:H<span class="hljs-comment">(2)</span>,<span class="hljs-number">1</span>:H<span class="hljs-comment">(3)</span>)=A<span class="hljs-comment">(H(1)</span>:<span class="hljs-number">-1</span>:<span class="hljs-number">1</span>,<span class="hljs-number">1</span>:H<span class="hljs-comment">(2)</span>,<span class="hljs-number">1</span>:H<span class="hljs-comment">(3)</span>);<span class="hljs-meta">%</span>垂直镜像<br>imshow<span class="hljs-comment">(uint8(B)</span>);<br>figure<span class="hljs-comment">(3)</span>,C<span class="hljs-comment">(1:H(1)</span>,<span class="hljs-number">1</span>:H<span class="hljs-comment">(2)</span>,<span class="hljs-number">1</span>:H<span class="hljs-comment">(3)</span>)=A<span class="hljs-comment">(1:H(1)</span>,H<span class="hljs-comment">(2)</span>:<span class="hljs-number">-1</span>:<span class="hljs-number">1</span>,<span class="hljs-number">1</span>:H<span class="hljs-comment">(3)</span>);<span class="hljs-meta">%</span>水平镜像<br>imshow<span class="hljs-comment">(uint8(C)</span>);<br></code></pre></td></tr></table></figure><h2 id="图像的转置"><a href="#图像的转置" class="headerlink" title="图像的转置"></a>图像的转置</h2><p>就是将图像像素的横坐标和纵坐标交换位置。可以看成水平镜像变换和旋转的组合，即陷阱性水平镜像变换，然后按逆时针旋转90°，转置操作会改变图像的大小，转之后图像的宽度和高度将互换。</p><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">I = imread('<span class="hljs-number">2017</span><span class="hljs-number">-03</span><span class="hljs-number">-18</span><span class="hljs-number">-10.</span>jpg');<br>tform = maketform('affine',[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>;<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>; <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>));%定义转置矩阵<br>B = imtransform(I,tform,'nearest');<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>),imshow(I)<br>title('原图像');<br>subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),imshow(B)<br>title('转置图像');<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-18-14.jpg" alt=""></p><h2 id="图像的缩放"><a href="#图像的缩放" class="headerlink" title="图像的缩放"></a>图像的缩放</h2><p>水平缩放系数和垂直缩放系数</p><p>实际运用缩放时，常常需要保持原始图像宽度和高度的比例，这种缩放不会使图像变性。</p><h3 id="插值算法"><a href="#插值算法" class="headerlink" title="插值算法"></a>插值算法</h3><p>主要用于处理几何变换中出现的浮点坐标像素。由于浮点数坐标是”插入”在整数坐标之间的，所以这种算法被称为”插值算法”。插值算法被广泛运用在图像的缩放、旋转、卷绕等变换中。</p><p>比较常见的插值算法有最临近插值法、双线性插值法和二次立方插值法等。一般，最邻近插值法效果最差。双线性插值法大大改善了放大图像的质量，避免了马赛克的产生，但是细节体现的同样不够；二次立方插值法效果最好，放大后的图像显得锐利清晰，图像细节较双线性插值法而言有了改善。</p><p>二次立方插值算法效果最好，运算时间最长；最邻近插值算法处理速度比后两者块上百倍甚至上千倍。</p><ul><li><p>最邻近插值算法</p><p>也称零阶插值算法。浮点数坐标的像素等于离该点最近的输入图像像素值。</p></li><li><p>双线性插值算法</p><p>也称二次线性插值法。主要思想是计算出浮点坐标像素的近似值，从周围四个像素值入手，按照一定的比例混合，最终得到该浮点坐标的像素值。</p><figure class="hljs highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">B = imread(A,scale,<span class="hljs-function"><span class="hljs-keyword">method</span>);</span><br></code></pre></td></tr></table></figure><blockquote><p>A是待缩放的原始图像，scale是统一缩放的比例。可选参数method用于指定插值方法，在缺省时，使用最邻近插值法。</p></blockquote><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">I = imread('<span class="hljs-number">2017</span><span class="hljs-number">-03</span><span class="hljs-number">-18</span><span class="hljs-number">-10.</span>jpg');<br>A = imresize(I,<span class="hljs-number">1.5</span>,'nearest');<br>B = imresize(I,<span class="hljs-number">1.5</span>,'bilinear');<br>C = imresize(I,<span class="hljs-number">1.5</span>,'bicubic');<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>),imshow(I),title('original');<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),imshow(A),title('nearest');<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),imshow(B),title('bilinear');<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>),imshow(C),title('bicubic');<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-19-1.jpg" alt=""></p><blockquote><p>由于matlab显示图像时，会根据窗口进行缩放调整，可以在显示窗口单机”Data Cursor”按钮，在图像上选一点就可以显示出该点的详细信息。</p></blockquote><p>如果想要在水平垂直两个方向以不同比例进行缩放：</p><figure class="hljs highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">B = imresize(A,[mrows nclos],<span class="hljs-function"><span class="hljs-keyword">method</span>);</span><br></code></pre></td></tr></table></figure><blockquote><p>[mrows nclos]给出了变换后B的具体行高和列宽。</p></blockquote></li></ul><h2 id="图像旋转"><a href="#图像旋转" class="headerlink" title="图像旋转"></a>图像旋转</h2><p>在MATLAB中可以调用函数<code>imtransform()</code>来实现图像旋转。但不是推荐的方法。推荐用专门的图像旋转函数<code>imrotate()</code>.</p><figure class="hljs highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">B = imrotate(A,angle,<span class="hljs-function"><span class="hljs-keyword">method</span>,<span class="hljs-title">bbox</span>);</span><br></code></pre></td></tr></table></figure><blockquote><p>其中A代表待旋转的原始图像，angle为旋转的角度，单位为度，如果指定一个正数，将按逆时针方向旋转图像。可选参数method为要使用的插值方法，在缺省时使用最邻近插值法。bbox也是可选的，缺省为<code>loose</code>,表示旋转后图像不会被截取，如果选择<code>crop</code>表示选择后图像大小将不会改变，超出边界部分会被截取。</p></blockquote><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">I = imread<span class="hljs-comment">('2017-03-18-10.jpg')</span>;<br>A = imrotate<span class="hljs-comment">(I,30,'nearest')</span>;<span class="hljs-meta">%</span>旋转<span class="hljs-number">30</span>°，最邻近插值<br>figure<span class="hljs-comment">(1)</span>,imshow<span class="hljs-comment">(A)</span><br>B = imrotate<span class="hljs-comment">(I,45,'bilinear','loose')</span>;<span class="hljs-meta">%</span>旋转<span class="hljs-number">45</span>°，二次线性插值，不截取<br>figure<span class="hljs-comment">(2)</span>,imshow<span class="hljs-comment">(B)</span><br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-19-2.jpg" alt=""></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>matlab02图像的点运算</title>
      <link href="/2017/09/22/matlab02%E5%9B%BE%E5%83%8F%E7%9A%84%E7%82%B9%E8%BF%90%E7%AE%97/"/>
      <url>/2017/09/22/matlab02%E5%9B%BE%E5%83%8F%E7%9A%84%E7%82%B9%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<h1 id="MATLAB-图像的点运算"><a href="#MATLAB-图像的点运算" class="headerlink" title="MATLAB 图像的点运算"></a>MATLAB 图像的点运算</h1><h2 id="灰度直方图"><a href="#灰度直方图" class="headerlink" title="灰度直方图"></a>灰度直方图</h2><p><img src="/pic/2017-03/2017-03-16-1.jpg" alt=""></p><a id="more"></a><ol><li><p>原理：对不同灰度的点进行数量统计</p></li><li><p>编码实现:<code>imhist()</code>函数</p><ul><li>绘制直方图的一般方法</li></ul><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">imhist</span><span class="hljs-params">(I)</span></span><br><span class="hljs-function"><span class="hljs-title">imhist</span><span class="hljs-params">(I,n)</span></span><br>[counts, x]=imhist(...)<br></code></pre></td></tr></table></figure><blockquote><p>I 是需要计算灰度图像的图像。</p><p>参数n是指定的灰度级数目，默认n等于256，也就是0~255。对于二值图像，n等于2</p><p>返回值counts为直方图的数据向量。counts(i)也就是第i个灰度区间中的像素数目，x是保存了对应的灰度小区间的向量。若采用第三种形式，需要配合stem()函数手动绘制直方图。</p></blockquote><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">i = imread('<span class="hljs-number">2017</span><span class="hljs-number">-03</span><span class="hljs-number">-16</span><span class="hljs-number">-1.</span>jpg')<br>g = rgb2gray(i)<br>figure<br>subplot(<span class="hljs-number">121</span>),imhist(g);<br>subplot(<span class="hljs-number">122</span>),imhist(g,<span class="hljs-number">64</span>);<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-16-2.png" alt=""></p><ul><li><p>绘制归一化灰度直方图：像素出现的概率</p><figure class="hljs highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">i = imread(<span class="hljs-string">'2017-03-16-1.jpg'</span>)<span class="hljs-comment">;</span><br>i = rgb2gray(i)<span class="hljs-comment">;</span><br>[m,n]=size(i)<span class="hljs-comment">;</span><br>[<span class="hljs-keyword">counts1,x] </span>= imhist(i,<span class="hljs-number">32</span>)<br><span class="hljs-keyword">subplot(121),stem(x,counts1);<br></span><span class="hljs-keyword">counts2 </span>= <span class="hljs-keyword">counts1/m/n;<br></span><span class="hljs-keyword">subplot(122), </span>stem(x,<span class="hljs-keyword">counts2);</span><br></code></pre></td></tr></table></figure><p><img src="pic/2017-03/2017-03-16-3.png" alt=""></p><blockquote><p>stem()是用来绘制针线图的函数</p><p>易知，归一化直方图所有取值之和为1</p><p>可用<code>sum(counts2)</code>进行查看</p></blockquote></li></ul></li><li><p>彩色图像的分量直方图</p><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs undefined">i = imread<span class="hljs-comment">('2017-03-16-4.jpeg')</span>;<br>[x,y,z]=size<span class="hljs-comment">(i)</span>;<br><br>figure<br>subplot<span class="hljs-comment">(221)</span>,imshow<span class="hljs-comment">(i)</span>;<br>title<span class="hljs-comment">('original image')</span><br><br><span class="hljs-meta">%</span>提取红色分量<br>r=i;<br><span class="hljs-meta">%</span>r<span class="hljs-comment">(:,:,1)</span>=a<span class="hljs-comment">(:,:,1)</span>;<br>r<span class="hljs-comment">(:,:,2)</span>=zeros<span class="hljs-comment">(x,y)</span>;<br>r<span class="hljs-comment">(:,:,3)</span>=zeros<span class="hljs-comment">(x,y)</span>;<br>r=ui<span class="hljs-symbol">nt8</span><span class="hljs-comment">(r)</span>;<br>subplot<span class="hljs-comment">(222)</span>,imshow<span class="hljs-comment">(r)</span>;<br>title<span class="hljs-comment">('R-component-image')</span><br><br><span class="hljs-meta">%</span>提取绿色分量<br>g=i;<br>g<span class="hljs-comment">(:,:,1)</span>=zeros<span class="hljs-comment">(x,y)</span>;<br><span class="hljs-meta">%</span>g<span class="hljs-comment">(:,:,2)</span>=a<span class="hljs-comment">(:,:,2)</span>;<br>g<span class="hljs-comment">(:,:,3)</span>=zeros<span class="hljs-comment">(x,y)</span>;<br>g=ui<span class="hljs-symbol">nt8</span><span class="hljs-comment">(g)</span>;<br>subplot<span class="hljs-comment">(223)</span>,imshow<span class="hljs-comment">(g)</span>;<br>title<span class="hljs-comment">('G-component-image')</span><br><br><span class="hljs-meta">%</span>提取蓝色分量<br>b=i;<br>b<span class="hljs-comment">(:,:,1)</span>=zeros<span class="hljs-comment">(x,y)</span>;<br>b<span class="hljs-comment">(:,:,2)</span>=zeros<span class="hljs-comment">(x,y)</span>;<br><span class="hljs-meta">%</span>b<span class="hljs-comment">(:,:,3)</span>=a<span class="hljs-comment">(:,:,3)</span>;<br>b=ui<span class="hljs-symbol">nt8</span><span class="hljs-comment">(b)</span>;<br>subplot<span class="hljs-comment">(224)</span>,imshow<span class="hljs-comment">(b)</span>;<br>title<span class="hljs-comment">('B-component-image')</span><br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-16-5.png" alt=""></p><p>​</p><p>彩色图像灰度化的方法：</p><ul><li><p>平均值法：每个像素的三原色值等于红、绿、蓝3个分量的平均值</p></li><li><p>最大值法</p></li><li><p>加权平均值法</p><p>人眼对三原色的敏感度从高到低为绿、红、蓝。所以三原色权值取值关系也是这样。</p></li></ul></li></ol><p><code>R=G=B=0.299R+0.587G+0.114B</code>时，能够得到最合理的灰度图像。</p><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">i = imread<span class="hljs-comment">('2017-03-16-4.jpeg')</span>;<br>r=i<span class="hljs-comment">(:,:,1)</span>;<br>g=i<span class="hljs-comment">(:,:,2)</span>;<br>b=i<span class="hljs-comment">(:,:,3)</span>;<br>subplot<span class="hljs-comment">(1,3,1)</span>,imhist<span class="hljs-comment">(r)</span>,title<span class="hljs-comment">('R component')</span>;<br>subplot<span class="hljs-comment">(1,3,2)</span>,imhist<span class="hljs-comment">(g)</span>,title<span class="hljs-comment">('G component')</span>;<br>subplot<span class="hljs-comment">(1,3,3)</span>,imhist<span class="hljs-comment">(b)</span>,title<span class="hljs-comment">('B component')</span>;<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-17-4.jpg" alt=""></p><h2 id="灰度线性变换"><a href="#灰度线性变换" class="headerlink" title="灰度线性变换"></a>灰度线性变换</h2><p>利用线性公式进行一维变换：</p><p><code>y=kx+d</code>(0&lt;=y&lt;=255)</p><ol><li><p>当k&gt;1时</p><p>可用于增加图像对比度。在直方图中表现就是灰度分布被拉伸了。</p></li><li><p>当K=1时</p><p>用于调节图像亮度。就是将图像的各个像素值都增加或者减少一定量。</p><p>通过改变d值，达到增加或者减少图像亮度的目的。</p></li><li><p>当K&lt;1时</p><p>图像的对比度和整体效果都被削弱了。K值越小，图像的灰度分布越窄，图像看起来越暗。</p></li><li><p>K&lt;0时</p><p>图像较亮的地方区域会变暗，较暗的区域会变亮。k=-1，d=255时，可以让图像实现反色效果(或底片效果)</p></li></ol><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs undefined">i=imread('<span class="hljs-number">2017</span><span class="hljs-number">-03</span><span class="hljs-number">-16</span><span class="hljs-number">-4.</span>jpeg');<br>i = im2double(rgb2gray(i));<br>[m,n]=size(i);<br><br>%增加对比对<br>Fa=<span class="hljs-number">1.25</span>;Fb=<span class="hljs-number">0</span>;<br>O = Fa.*i + Fb/<span class="hljs-number">255</span>;<br>figure(<span class="hljs-number">1</span>),subplot(<span class="hljs-number">221</span>),imshow(O);<br>title('Fa = <span class="hljs-number">1.25</span>,Fb=<span class="hljs-number">0</span>,Contrast increasing');<br>figure(<span class="hljs-number">2</span>),subplot(<span class="hljs-number">221</span>),[H,x]=imhist(O,<span class="hljs-number">64</span>);<br>stem(x,(H/m/n),'.');<br>title('Fa=<span class="hljs-number">1.25</span>,Fb=<span class="hljs-number">0</span>,contrast increasing');<br><br>%减小对比度<br>Fa = <span class="hljs-number">0.5</span>;Fb=<span class="hljs-number">0</span>;<br>O=Fa.*i + Fb/<span class="hljs-number">255</span>;<br>figure(<span class="hljs-number">1</span>),subplot(<span class="hljs-number">222</span>),imshow(O);<br>title('Fa = <span class="hljs-number">0.5</span>, Fb = <span class="hljs-number">0</span>, contrast decreasing');<br>figure(<span class="hljs-number">2</span>),subplot(<span class="hljs-number">222</span>),[H,x]=imhist(O,<span class="hljs-number">64</span>);<br>stem(x,(H/m/n),'.');<br>title('Fa = <span class="hljs-number">0.5</span>,Fb=<span class="hljs-number">0</span>,contrast decreasing');<br><br>%线性亮度增加<br>Fa=<span class="hljs-number">0.5</span>;Fb=<span class="hljs-number">50</span>;<br>O=Fa.*i + Fb/<span class="hljs-number">255</span>;<br>figure(<span class="hljs-number">1</span>),subplot(<span class="hljs-number">223</span>),imshow(O);<br>title('Fa=<span class="hljs-number">0.5</span>,Fb=<span class="hljs-number">50</span>,brightness <span class="hljs-section">control</span>');<br>figure(<span class="hljs-number">2</span>),subplot(<span class="hljs-number">223</span>),[H,x]=imhist(O,<span class="hljs-number">64</span>);<br>stem(x,(H/m/n),'.');<br>title('Fa=<span class="hljs-number">0.5</span>,Fb=<span class="hljs-number">50</span>,brightness <span class="hljs-section">control</span>');<br><br>%反相显示<br>Fa = <span class="hljs-number">-1</span>;Fb=<span class="hljs-number">255</span>;<br>O=Fa.*i+Fb/<span class="hljs-number">255</span>;<br>figure(<span class="hljs-number">1</span>),subplot(<span class="hljs-number">224</span>),imshow(O);<br>title('Fa=<span class="hljs-number">-1</span>,Fb=<span class="hljs-number">255</span>,reversal processing');<br>figure(<span class="hljs-number">2</span>),subplot(<span class="hljs-number">224</span>),[H,x]=imhist(O,<span class="hljs-number">64</span>);<br>stem(x,(H/m/n),'.');<br>title('Fa=<span class="hljs-number">-1</span>,Fb=<span class="hljs-number">255</span>,reversal processing');<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-18-1.jpg" alt=""></p><p><img src="/pic/2017-03/2017-03-18-2.jpg" alt=""></p><blockquote><p>用其他软件进行线性变换：可以将256种灰度都先进性一次变换运算，结果保存在一个大小为256的数组中。这种方法对于任意图像都只进行了256次运算，大大提高了效率。</p></blockquote><h2 id="灰度非线性变换"><a href="#灰度非线性变换" class="headerlink" title="灰度非线性变换"></a>灰度非线性变换</h2><h3 id="1-灰度对数变换"><a href="#1-灰度对数变换" class="headerlink" title="1. 灰度对数变换"></a>1. 灰度对数变换</h3><p>   对数变换的基本形式为：y=(log(1+x))/b</p><blockquote><p>b为一个正常数，用以控制曲线的弯曲程度，b值越大，弯曲程度越小。x是原始灰度值，y是变换后的目标灰度值。在对数函数的曲线上，函数自变量较低时，曲线斜率很大；自变量较高时，曲线斜率变得很小。</p><p>对数变换实现了图像灰度的拓展和压缩功能。拓展了低灰度值而压缩了高灰度值，让图像的灰度分布更加符合人的视觉特征。</p></blockquote><ul><li><p>重要应用：用来增强图像中较暗部分的细节。</p><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">i = imread<span class="hljs-comment">('2017-03-16-4.jpeg')</span>;<br>i = rgb<span class="hljs-number">2</span>gray<span class="hljs-comment">(i)</span>;<br>i = double<span class="hljs-comment">(i)</span>;<br><br>out<span class="hljs-number">1</span> = log<span class="hljs-comment">(1+i)</span>/<span class="hljs-number">0.065</span>;<br>out<span class="hljs-number">2</span> = log<span class="hljs-comment">(1+i)</span>/<span class="hljs-number">0.035</span>;<br>out<span class="hljs-number">1</span><span class="hljs-comment">(find(out1&gt;255)</span>) = <span class="hljs-number">255</span>;<br>out<span class="hljs-number">2</span><span class="hljs-comment">(find(out2&gt;255)</span>) = <span class="hljs-number">255</span>;<br>out<span class="hljs-number">1</span> = ui<span class="hljs-symbol">nt8</span><span class="hljs-comment">(out1)</span>;<br>out<span class="hljs-number">2</span> = ui<span class="hljs-symbol">nt8</span><span class="hljs-comment">(out2)</span>;<br><br>subplot<span class="hljs-comment">(221)</span>, imshow<span class="hljs-comment">(out1)</span>,title<span class="hljs-comment">('image, p = 0.065')</span>;<br>subplot<span class="hljs-comment">(222)</span>,imhist<span class="hljs-comment">(out1)</span>,title<span class="hljs-comment">('histgram p = 0.065')</span>;<br>subplot<span class="hljs-comment">(223)</span>,imshow<span class="hljs-comment">(out2)</span>,title<span class="hljs-comment">('image, p = 0.035')</span>;<br>subplot<span class="hljs-comment">(224)</span>,imhist<span class="hljs-comment">(out2)</span>,title<span class="hljs-comment">('histgram,p = 0.035')</span>;<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-18-4.jpg" alt=""></p><blockquote><p>亮的部分收缩在很小一部分区域，而暗的部分扩散的比较开。</p></blockquote></li></ul><h3 id="2-灰度幂次变换"><a href="#2-灰度幂次变换" class="headerlink" title="2. 灰度幂次变换"></a>2. 灰度幂次变换</h3><ol><li><p>基本理论</p><p>y = c(x的r次方)</p><blockquote><p>其中c、r均为正数。幂次变换将部分灰度变换映射到更宽的区域中。当r为1，幂次变换转变为线性变换。</p><p>输出灰度会随着指数的增加迅速扩大。指数稍大时(r&gt;=2)整个变换曲线接近一条直线。就失去了变换的意义。</p><p>在实际运用中对x和y进行约束，让他们的值在0~1之间。</p></blockquote><p><code>y=255c[(x/255)的r次方]</code></p><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">i = rgb<span class="hljs-number">2</span>gray<span class="hljs-comment">(imread('2017-03-16-4.jpeg')</span>);<br>i = double<span class="hljs-comment">(i)</span>;<br>y<span class="hljs-number">1</span> = <span class="hljs-number">255</span>*<span class="hljs-comment">(i/255)</span>.^<span class="hljs-number">2.5</span>;<br>y<span class="hljs-number">2</span> = <span class="hljs-number">255</span>*<span class="hljs-comment">(i/255)</span>.^<span class="hljs-number">0.4</span>;<br>y<span class="hljs-number">1</span> = ui<span class="hljs-symbol">nt8</span><span class="hljs-comment">(y1)</span>;<br>y<span class="hljs-number">2</span> = ui<span class="hljs-symbol">nt8</span><span class="hljs-comment">(y2)</span>;<br>subplot<span class="hljs-comment">(221)</span>,imshow<span class="hljs-comment">(y1)</span>,title<span class="hljs-comment">('p=2.5')</span>;<br>subplot<span class="hljs-comment">(222)</span>,imhist<span class="hljs-comment">(y1)</span>,title<span class="hljs-comment">('p=2.5')</span>;<br>subplot<span class="hljs-comment">(223)</span>,imshow<span class="hljs-comment">(y2)</span>,title<span class="hljs-comment">('p=0.4')</span>;<br>subplot<span class="hljs-comment">(224)</span>,imhist<span class="hljs-comment">(y2)</span>,title<span class="hljs-comment">('p=0.4')</span>;<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-18-5.jpg" alt=""></p><blockquote><p>上述变换互为伽马校正。</p><p>在MATLAB中还提供了实现灰度变换的基本函数<code>imadjust()</code>.借助该函数，我们也可以进行伽马校正：</p></blockquote><figure class="hljs highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">J = imadjust(I,[low<span class="hljs-number">_</span><span class="hljs-keyword">in</span>;high<span class="hljs-number">_</span><span class="hljs-keyword">in</span>],[low<span class="hljs-number">_</span><span class="hljs-keyword">out</span>;high<span class="hljs-number">_</span><span class="hljs-keyword">out</span>])<br>J = imadjust(I,[low<span class="hljs-number">_</span><span class="hljs-keyword">in</span>;high<span class="hljs-number">_</span><span class="hljs-keyword">in</span>],[low<span class="hljs-number">_</span><span class="hljs-keyword">out</span>;high<span class="hljs-number">_</span><span class="hljs-keyword">out</span>],gamma)<br></code></pre></td></tr></table></figure><blockquote><p>该函数将图像I中的亮度值映射到J中的新值，即将low_in和high_in之间的值映射到low_out和high_out之间的值。而low_in之下，high_in之上被剪切掉。</p><p>第二种语法，同样是将I中的亮度映射到J中的新值，但gamma制定了描述值I和J关系的曲线。如果gamma小于1，则映射被加权到更高的输出值，此时偏重更高数值(明亮)输出；如果gamma大于1，则映射被加权到更低输出值，此时偏重更低数值(灰暗)输出；省略参数则为线性映射。如果采用默认映射值对应范围，也就实现了伽马校正。</p></blockquote><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">i = rgb<span class="hljs-number">2</span>gray<span class="hljs-comment">(imread('2017-03-16-4.jpeg')</span>);<br>y<span class="hljs-number">1</span> = double<span class="hljs-comment">(i)</span>;<br>y<span class="hljs-number">1</span> = <span class="hljs-number">255</span>*<span class="hljs-comment">(y1/255)</span>.^<span class="hljs-number">2.5</span>;<br>y<span class="hljs-number">2</span> = ui<span class="hljs-symbol">nt8</span><span class="hljs-comment">(y1)</span>;<br>y<span class="hljs-number">3</span> = imadjust<span class="hljs-comment">(y2,[],[],0.4)</span>;<br>subplot<span class="hljs-comment">(131)</span>,imshow<span class="hljs-comment">(i)</span>,title<span class="hljs-comment">('original image')</span>;<br>subplot<span class="hljs-comment">(132)</span>,imshow<span class="hljs-comment">(y2)</span>,title<span class="hljs-comment">('power=2.5')</span>;<br>subplot<span class="hljs-comment">(133)</span>,imshow<span class="hljs-comment">(y3)</span>,title<span class="hljs-comment">('gamma=0.4')</span>;<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-18-6.jpg" alt=""></p><blockquote><p>可以看出，通过伽马校正，图像已经基本得到了复原。(图3在图2的基础上进行了校正，得到了原图)</p></blockquote></li></ol><h3 id="3-灰度指数变换"><a href="#3-灰度指数变换" class="headerlink" title="3. 灰度指数变换"></a>3. 灰度指数变换</h3><ol><li><p>基本理论</p><p><code>y=b[c(x-a) - 1</code> (b的c(x-a)次方)</p><blockquote><p>b、c控制曲线形状，a控制曲线左、右位置。</p><p>指数变换作用是拓展图像的高级灰度，同时压缩低灰度级。</p></blockquote><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined">i = rgb<span class="hljs-number">2</span>gray<span class="hljs-comment">(imread('2017-03-16-4.jpeg')</span>);<br>i = double<span class="hljs-comment">(i)</span>;<br><br>y<span class="hljs-number">1</span> = <span class="hljs-number">1.5.</span>^<span class="hljs-comment">(i*0.070)</span><span class="hljs-number">-1</span>;<br>y<span class="hljs-number">2</span> = <span class="hljs-number">1.5.</span>^<span class="hljs-comment">(i*0.050)</span><span class="hljs-number">-1</span>;<br>y<span class="hljs-number">1</span><span class="hljs-comment">(find(y1&gt;255)</span>) = <span class="hljs-number">255</span>;<br>y<span class="hljs-number">2</span><span class="hljs-comment">(find(y2&gt;255)</span>) = <span class="hljs-number">255</span>;<br>y<span class="hljs-number">1</span> = ui<span class="hljs-symbol">nt8</span><span class="hljs-comment">(y1)</span>;<br>y<span class="hljs-number">2</span> = ui<span class="hljs-symbol">nt8</span><span class="hljs-comment">(y2)</span>;<br><br>subplot<span class="hljs-comment">(221)</span>,imshow<span class="hljs-comment">(y1)</span>,title<span class="hljs-comment">('c=0.070')</span>;<br>subplot<span class="hljs-comment">(222)</span>,imhist<span class="hljs-comment">(y1)</span>,title<span class="hljs-comment">('c=0.070')</span>;<br>subplot<span class="hljs-comment">(223)</span>,imshow<span class="hljs-comment">(y2)</span>,title<span class="hljs-comment">('c=0.050')</span>;<br>subplot<span class="hljs-comment">(224)</span>,imhist<span class="hljs-comment">(y2)</span>,title<span class="hljs-comment">('c=0.050')</span>;<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-18-7.jpg" alt=""></p></li></ol><h2 id="灰度拉伸"><a href="#灰度拉伸" class="headerlink" title="灰度拉伸"></a>灰度拉伸</h2><h3 id="1-基本原理"><a href="#1-基本原理" class="headerlink" title="1. 基本原理"></a>1. 基本原理</h3><p>利用线性变换曲线建立映射，使集中于一较小区间的灰度拉伸至较大取值区间。</p><p>灰度拉伸又叫做对比度拉伸，与线性变换类似，不同点在于灰度拉伸使用分段线性变换。</p><p>y = {</p><p>​     f1(x);(x&lt;x1)</p><p>​     f2(x);(x1&lt;x&lt;x2)</p><p>​     f3(x);(x&gt;x2)</p><p>}</p><ul><li>中间线段斜率大于1：可以利用这类控制点进行灰度拉伸，增加图像对比度，加强整体显示效果</li><li>中间线段斜率小于1：降低图像的对比度。</li><li>中间线段斜率等于1：此时变换函数化为一个线性函数，将产生一个没有变化的图像。</li><li>x2=x1,y1=0,y2=255：此时变换函数变成阈值函数，产生二值图像。</li></ul><figure class="hljs highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">i = imread('<span class="hljs-number">2017</span><span class="hljs-number">-03</span><span class="hljs-number">-16</span><span class="hljs-number">-4</span>.jpeg')<span class="hljs-comment">;</span><br>i = rgb2gray(<span class="hljs-name">i</span>)<span class="hljs-comment">;</span><br>L = imadjust(<span class="hljs-name">i</span>,[],[<span class="hljs-number">50/255</span><span class="hljs-comment">;150/255]);</span><br>J = imadjust(<span class="hljs-name">L</span>,[<span class="hljs-number">50/255</span><span class="hljs-comment">;150/255],[20/255;230/255]);</span><br>subplot(<span class="hljs-number">221</span>),imshow(<span class="hljs-name">L</span>),title('low contrast')<span class="hljs-comment">;</span><br>subplot(<span class="hljs-number">222</span>),imhist(<span class="hljs-name">L</span>),title('low contrast')<span class="hljs-comment">;</span><br>subplot(<span class="hljs-number">223</span>),imshow(<span class="hljs-name">J</span>),title('high contrast')<span class="hljs-comment">;</span><br>subplot(<span class="hljs-number">224</span>),imhist(<span class="hljs-name">J</span>),title('high contrast')<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-18-8.jpg" alt=""></p><h2 id="灰度均衡"><a href="#灰度均衡" class="headerlink" title="灰度均衡"></a>灰度均衡</h2><p>灰度均衡又称直方图均衡化。以累计分布函数为基础的直方图修正法，可以产生一副灰度级分布概率均匀的图像。</p><p>变换后，每一级灰度上像素点的数量相差不大，对应灰度直方图每一级灰度高度也差不多。</p><p>可使用灰度均衡算法函数<code>histeq()</code>:</p><figure class="hljs highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[J,T] = histe<span class="hljs-string">q(I,n)</span><br>J = histe<span class="hljs-string">q(I,n)</span><br></code></pre></td></tr></table></figure><blockquote><p>I 表示原始图像，J是灰度均衡变化之后的输出图像，T是变换矩阵(即能将图像I的直方图变换成图像J的直方图的变换T)。参数n指定直方图均衡后的灰度级数，默认值为64</p></blockquote><figure class="hljs highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">i = rgb2gray(<span class="hljs-name">imread</span>('<span class="hljs-number">2017</span><span class="hljs-number">-03</span><span class="hljs-number">-16</span><span class="hljs-number">-4</span>.jpeg'))<span class="hljs-comment">;</span><br>LC = imadjust(<span class="hljs-name">i</span>,[],[<span class="hljs-number">50/255</span><span class="hljs-comment">;150/255]);</span><br>figure(<span class="hljs-number">1</span>),subplot(<span class="hljs-number">221</span>),imshow(<span class="hljs-name">LC</span>)<span class="hljs-comment">;</span><br>title('low contrast')<span class="hljs-comment">;</span><br>figure(<span class="hljs-number">1</span>),subplot(<span class="hljs-number">222</span>),imhist(<span class="hljs-name">LC</span>)<span class="hljs-comment">;</span><br>title('low contrast')<span class="hljs-comment">;</span><br>HE1 = histeq(<span class="hljs-name">LC</span>)<span class="hljs-comment">;</span><br>figure(<span class="hljs-number">1</span>),subplot(<span class="hljs-number">223</span>),imshow(<span class="hljs-name">HE1</span>)<span class="hljs-comment">;</span><br>title('histogram equalization')<span class="hljs-comment">;</span><br>figure(<span class="hljs-number">1</span>),subplot(<span class="hljs-number">224</span>),imhist(<span class="hljs-name">HE1</span>)<span class="hljs-comment">;</span><br>title('histogram equalization')<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-18-9.jpg" alt=""></p><blockquote><p>直方图均衡化是图像增强的有效手段。</p></blockquote><h2 id="直方图规定化"><a href="#直方图规定化" class="headerlink" title="直方图规定化"></a>直方图规定化</h2><p>灰度均衡化可以自动确定灰度变换函数，从而获得拥有均匀直方图的输出图像。如果我们希望获得指定直方图的输出图像，就需要用到<code>直方图规定化</code>，又称为<code>直方图匹配</code>。</p><p>需要用到函数<code>histeq()</code></p><figure class="hljs highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[J,T] = histe<span class="hljs-string">q(I,hgram)</span><br>J = histe<span class="hljs-string">q(I,hgram)</span><br></code></pre></td></tr></table></figure><blockquote><p>此时函数会讲原始图像I的直方图编程用户指定的hgram(也就是参考图像的直方图)。参数hgram的分量数目就是直方图的收集箱数目，对于double类型的图像，hgram中各元素的值域是[0,1]；对于uint8类型的图像，hgram中各元素取值范围为[0,255].</p></blockquote><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">img = rgb2gray(imread('<span class="hljs-number">2017</span><span class="hljs-number">-03</span><span class="hljs-number">-16</span><span class="hljs-number">-4.</span>jpeg'));<br>img_ref = rgb2gray(imread('<span class="hljs-number">2017</span><span class="hljs-number">-03</span><span class="hljs-number">-18</span><span class="hljs-number">-10.</span>jpg'));<br>[hgram,x] = imhist(img_ref);<br>J = histeq(img,hgram);<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),imshow(img),title('original image');<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),imhist(img),title('original image');<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>),imshow(img_ref),title('reference image');<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>),imhist(img_ref),title('reference image');<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),imshow(J),title('output image');<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>),imhist(J),title('output image');<br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-18-11.jpg" alt=""></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>matlab学习笔记01</title>
      <link href="/2017/09/22/matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"/>
      <url>/2017/09/22/matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</url>
      <content type="html"><![CDATA[<h1 id="MATLB-学习笔记-01：绪论"><a href="#MATLB-学习笔记-01：绪论" class="headerlink" title="MATLB 学习笔记 01：绪论"></a>MATLB 学习笔记 01：绪论</h1><p>数字图形是用数字信号来表示的图像。数字图像相当于一个m x n的矩阵，其中，m x n被称为图像的分辨率。</p><p>每个网格颜色只能是一种，这个过程被称为图像颜色的离散化。</p><a id="more"></a><ul><li><p>数字图像处理研究的内容包括：</p><ul><li><p>图像获取和输出</p></li><li><p>图像压缩和编码</p></li><li><p>图像增强和复原</p></li><li><p>图像变换</p></li><li><p>图像分割</p></li><li><p>图像信息安全</p></li><li><p>图像的识别和检测</p></li></ul></li><li>matlab 发布时，伴随有新版的Simulink，它是matlab最重要的组件之一。是与matlab配套的仿真工具，提供了一个动态系统建模、仿真和综合分析的集成环境。只需通过简单的鼠标操作，即可构造复杂的系统。</li><li>特点：<ul><li>matlab具有高效完善的数值计算及符号计算功能，使用户从繁杂的数学运算分析中彻底解脱出来：有一套工具箱，涵盖信号处理、控制系统、神经网络、模糊逻辑、小波分析、系统仿真等。</li><li>matlab拥有友好的用户界面，以及接近数学表达式的自然化语言，易于学习和掌握。</li><li>matlab具有完备的图形处理功能，实现了计算结果和编程的可视化。</li></ul></li></ul><h2 id="matlab的结构"><a href="#matlab的结构" class="headerlink" title="matlab的结构"></a>matlab的结构</h2><ol><li>开发环境：像vs或Eclipse一样简单直接的界面 </li><li>数学函数库：大量的计算方法。从基本的算术运算、三角函数运算等，到复杂算法，如矩阵求逆、快速傅里叶变换等。</li><li>语言：语法与C/C++类似，包括流程控制、函数调用等语法规则。支持布尔值、数值型、文本类型和函数句柄等数据类型，每一种都定义为矩阵或阵列的形式。</li><li>图形处理系统：包括二维/三维图形函数、图像处理和动画显示等函数</li><li>应用程序接口：API能与C/C++、java等其他高级编程语言进行交互的函数库。</li></ol><h2 id="图像存储"><a href="#图像存储" class="headerlink" title="图像存储"></a>图像存储</h2><p>各种图像文件格式的差异，主要体现在它们采用的编码方式。其编码往往带有一定数据压缩成分的编码。</p><p>压缩方式分为有损压缩和无损压缩两种。如PNG是无损压缩，JPEG是有损压缩。</p><p><strong>共性</strong> ：图像文件一般由文件头、调色板数据、像素数据三部分组成。</p><blockquote><p>其中头文件用于存储图像文件的各种参数，这些参数表征了图像本身的许多特性</p><p>调色板是图像的颜色索引表</p><p>像素数据是图像信息的实体所在，存储了图像矩阵各个点的像素信息。一般压缩是针对这些像素数据进行的。</p></blockquote><ul><li><p>文件头：包括图像的类型、图像的宽度、高度、每个像素所占的位数、压缩类型、像素数据的首地址和有无调色板等。</p><blockquote><p>文件头参数可以使固定格式，也可以是灵活格式。如BMP文件，参数形式是固定格式的。</p></blockquote></li><li><p>图像调色板使图像显示具有真正的意义。</p><blockquote><p>调色板仅存在于二值、16色、256色图像之中，并指导这些图像正确的呈现色彩。但真彩色图像中没有调色板。</p><p>并不是每一种图像都能够完全支持二值、16色、256色到真色彩图像范围内的所有图像。如GIF不支持真色彩，因此GIF必存在调色板。</p></blockquote></li><li><p>像素可以使压缩的，也可以是非压缩的。</p><blockquote><p>不压缩的像素数据在不同图像文件中具有基本相同的存储结构。</p><p>对于压缩：有有损压缩和无损压缩两种</p></blockquote></li><li><p>任何图像在被计算机输出设备呈现时，都经过了解码步骤，呈现出用户看到的二维网格。</p></li></ul><h3 id="计算机中颜色表示方法"><a href="#计算机中颜色表示方法" class="headerlink" title="计算机中颜色表示方法"></a>计算机中颜色表示方法</h3><ul><li><p>RGB yanse kongjian （red，green，blue）</p><blockquote><p>RGB对应笛卡尔坐标系中一个立方体，R、G、B分别代表三个轴，当都取0时，表示黑色，都取最大值即255时，表示白色。黑白连线之间，介于黑、灰、白之间。对角线表示的就是灰度级。</p></blockquote></li><li><p><code>单色</code>、<code>16色</code>、<code>256色</code>和<code>24位真彩色</code>(根据存储一个像素所占的空间)：</p><blockquote><p>二值图像：这种图像中的每个像素只能在黑色和白色两者之间选一个。</p><p>16色图像：像素组中每4个比特代表一个像素</p><p>256色的图像：像素数组中每个字节代表一个像素，也就是8个比特来表示一个像素颜色。</p><p>对于24位<code>真彩色</code>图像来说，3个字节代表一个像素颜色，每个字节分别代表RGB中的一个分量。</p><p>matlab中数值一般采用double（64）位存储和运算，matlab还提供了特殊的数据类型unit8(8位无符号整数)，依此来存储的图像成为8位型图像。</p></blockquote></li><li><p>matlab中的图像类型包括<code>灰度图像</code>、<code>RGB图像</code>、<code>二值图像</code>和<code>索引图像</code>4种。</p><ul><li><p><code>灰度图像</code>，从白到黑，灰度级别最多有256级，也就是0到255</p></li><li><p><code>RGB图像</code>也就是真色彩图像，以红、绿、蓝3个<code>亮度值</code>为一组，代表每个像素的颜色。这些亮度值直接存储在图像数组矩阵中，图像数组矩阵大小为<code>mxnx3</code>,m,n 代表图像像素的行列数，3代表R/G/B三个分量。</p></li><li><p><code>二值图像</code>，只能显示黑或白两种颜色。每个像素取1或0.</p></li><li><p><code>索引图像</code>包括一个<code>数据矩阵X</code>和一个<code>颜色映射矩阵Map</code>。Map是一个包含3列和若干行的数据矩阵，其中每个元素的均值是[0,1]之间的double型数据。Map矩阵的每一行分别为红、绿、蓝(R/G/B)的颜色值。颜色矩阵是按图像中颜色值进行排序后的数组。对于每个像素，图像矩阵包含一个值，这个值就是颜色图数组中的索引。在Matlab中，索引图像是从像素值到颜色映射表值的直接映射。<strong>像素颜色由数据矩阵X作为索引指向矩阵Map进行映射。</strong></p></li><li><p>函数<code>image()</code>可以直接显示8位图像，但8位型数据和double型数据在image()中意义不一样。因为索引图像数值为1时，表示的是第二行颜色。</p><figure class="hljs highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">image(<span class="hljs-name">x</span>)<span class="hljs-comment">;</span><br>colormap(<span class="hljs-name">map</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>灰度图像：uint8型表示范围[0,255],double型表示范围[0,1].double型和unit8型灰度图像是不一样的，二者的格式转换如下：</p><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">I<span class="hljs-number">8</span> = u<span class="hljs-symbol">nit8</span><span class="hljs-comment">(round(I64*255)</span>); <span class="hljs-meta">%</span>double转成ui<span class="hljs-symbol">nt8</span><br>I<span class="hljs-number">64</span> = double<span class="hljs-comment">(I8)</span> / <span class="hljs-number">255</span>;     <span class="hljs-meta">%</span>ui<span class="hljs-symbol">nt8</span>转成double<br></code></pre></td></tr></table></figure></li><li><p>imread()根据文件中的图像种类进行不同的处理。当文件中的图像是灰度图像时，imread()把图像存入一个8位矩阵中，把色图矩阵转换为双精度矩阵，矩阵中的每个元素都在0至1之间取值；当图像为RGB图像时，imread()则把数据存储在一个8位的RGB矩阵中。</p></li><li><p>注意！matlab读入图像的数据是uint8，而在矩阵中使用的数据是double。所以需要将数组转成double类型，否则对uint8型数据进行加减可能会发生溢出。图像数据类型转换函数如下</p><ul><li>im2double():将图像数组转换成double型</li><li>im2uint8():将图像数组转换成uint8型</li><li>im2uint16():将图像数组转换成uint16型</li><li>mat2gray():把一个double型的任意数组转换成取值范围0~1之间的数组，讲一个矩阵转换成灰度图像的数据格式。</li><li>isgray():来判定矩阵是否为一个图像数据矩阵。</li></ul></li></ul></li><li><p>图像数据在进行计算前要转换成double型的，这样可以保证图像数据运算的精度。</p></li></ul><h2 id="MATLAB中的图像转换"><a href="#MATLAB中的图像转换" class="headerlink" title="MATLAB中的图像转换"></a>MATLAB中的图像转换</h2><p>包括：1.不同图像文件格式之间的转换、2.MATLAB中不同图像存储形式之间的转换(例如将灰度图像转换成二值图像)。</p><ol><li><p>索引图像与灰度图像之间的相互转换</p><ul><li>灰度图像像索引图像转换：<code>gray2ind()</code></li></ul><figure class="hljs highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">[X,MAP]</span> = gray2ind(I, <span class="hljs-string">[n]</span>)<br></code></pre></td></tr></table></figure><blockquote><p>I 表示存储灰度图像的变量，n表示颜色值(默认是64)</p></blockquote><ul><li>将索引图像转换为灰度图像函数：<code>ind2gray()</code></li></ul><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">I = i<span class="hljs-symbol">nd2</span>gray<span class="hljs-comment">(X, MAP)</span><br></code></pre></td></tr></table></figure><blockquote><p>X表示图像矩阵变量，MAP表示颜色图数组变量</p></blockquote></li><li><p>RGB彩色图像与索引图乡之间的相互转换</p><ul><li>RGB彩色图像像索引图像转换的函数为rgb2ind()</li></ul><figure class="hljs highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-string">[X, MAP]</span> = rgb2ind(RGB)<br></code></pre></td></tr></table></figure><blockquote><p>其中参数RGB表示存储RGB图像数据的变量。</p></blockquote><ul><li>将索引图像转换为RGB彩色图像的函数为ind2rgb()</li></ul><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">RGB = i<span class="hljs-symbol">nd2</span>rgb<span class="hljs-comment">(X, MAP)</span><br></code></pre></td></tr></table></figure><blockquote><p>X表示图像矩阵变量，MAP表示颜色图数组变量。</p></blockquote></li><li><p>RGB彩色图像与灰度图像之间的转换</p><p>将RGB彩色图像转换为灰度图像所使用的函数是<code>rgb2gray()</code>,</p><figure class="hljs highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">I</span> = rgb2gray(I_RGB)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>上述语句完成的任务是将真色彩图像I_RGB转换为灰度图像I。</p><p>在计算机中或网络上看到的大部分是彩色图像，但<strong>在数字图像处理中所需要使用的都是灰度图像</strong> 。</p></li><li><p>将索引图像、灰度图像和RGB彩色图像转换为二值图像</p><figure class="hljs highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">BW</span> = im2bw(X, MAP, level);<br><span class="hljs-attribute">BW</span> = im2bw(I, level);<br><span class="hljs-attribute">BW</span> = im2bw(RGB, level);<br></code></pre></td></tr></table></figure><blockquote><p>参数level是用来控制二值化结果的阈值，取值范围0~1，表示对于输入图像而言，所有亮度值小于给定值(level)的像素点都被置为0，其他像素点则被置为1.在默认情况下，matlab会自动赋一个阈值。</p></blockquote><p>下面代码演示了该函数的使用：</p><figure class="hljs highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">I = imread<span class="hljs-comment">('lena.jpg')</span>;<br>BW<span class="hljs-number">1</span> = i<span class="hljs-name">m2</span>bw<span class="hljs-comment">(I)</span>;<br>BW<span class="hljs-number">2</span> = i<span class="hljs-name">m2</span>bw<span class="hljs-comment">(I,0.3)</span>;<br>BW<span class="hljs-number">3</span> = i<span class="hljs-name">m2</span>bw<span class="hljs-comment">(I,0.6)</span>;<br>figure<br>subplot<span class="hljs-comment">(2,2,1)</span>,imshow<span class="hljs-comment">(I)</span>;<br>title<span class="hljs-comment">('original')</span>;<br>subplot<span class="hljs-comment">(2,2,2)</span>,imshow<span class="hljs-comment">(BW1)</span>;<br>title<span class="hljs-comment">('\default')</span>;<br>subplot<span class="hljs-comment">(2,2,3)</span>,imshow<span class="hljs-comment">(BW2)</span>;<br>title<span class="hljs-comment">('level = 0.3')</span>;<br>subplot<span class="hljs-comment">(2,2,4)</span>,imshow<span class="hljs-comment">(BW3)</span>;<br>title<span class="hljs-comment">('level = 0.6')</span><br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-15-1.jpg" alt=""></p><h2 id="MATLAB中图像的基本操作："><a href="#MATLAB中图像的基本操作：" class="headerlink" title="MATLAB中图像的基本操作："></a>MATLAB中图像的基本操作：</h2><ol><li><p>图像的读取</p><p><strong>清除MATLAB工作平台中所有变量：</strong> </p><figure class="hljs highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-built_in">clear</span><br></code></pre></td></tr></table></figure><p>然后用imread()函数来读取一幅图像。</p><blockquote><p>注意：文件名要用单括号括起来。末尾分号在MATLAB中用于取消输出，如果去掉末尾分号，MATLAB会显示改行运行的结果。</p></blockquote><figure class="hljs highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attr">I</span> = imread = (<span class="hljs-string">'baboon.jpg'</span>)<br></code></pre></td></tr></table></figure><blockquote><p>上面命令会从工作路径读取文件。还可以给出完整路径：</p></blockquote><figure class="hljs highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">I</span> = imread = (<span class="hljs-string">'C:\baboon.jpg'</span>);<br></code></pre></td></tr></table></figure><p>函数size()可以求一幅二维图像的大小：</p><figure class="hljs highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">I = imread = ('fruits.jpg')<span class="hljs-comment">;</span><br>size(<span class="hljs-name">I</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>程序运行结果如下：</p><figure class="hljs highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ans = <br><span class="hljs-number">480</span>   <span class="hljs-number">512</span>   <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><blockquote><p>图像宽为480个像素，高为512个像素，因为是彩色图像，所以有3个分量。如果是灰度图像，上述输出结果中将不包含最后一项“3”</p></blockquote><p>使用下面这种语法形式也可以自动确定一幅图像的大小：</p><figure class="hljs highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">I</span> = imread(<span class="hljs-string">'fruits.jpg'</span>);<br>[R,<span class="hljs-keyword">C</span>,<span class="hljs-keyword">D</span>] = size(<span class="hljs-keyword">I</span>)<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="hljs highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">R = <br>    480<br>C = <br>    512<br>D = <br>    3<br></code></pre></td></tr></table></figure><p>函数whos可以用于显示一个数组的附加信息，对一个图像数组来说，这些附加信息指存储方式。</p><figure class="hljs highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">whos I</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="hljs highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">Name</span>         <span class="hljs-built_in">Size</span>                  Bytes  <span class="hljs-keyword">Class</span>    Attributes<br><br>I         080x1920x3            <span class="hljs-number">6220800</span>  uint8<br></code></pre></td></tr></table></figure><blockquote><p>表明图像采用了8位存储方式，并占用了…字节</p></blockquote></li><li><p>图像写入</p><p>使用<code>imwrite()</code>写入文件</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">imwrite</span><span class="hljs-params">(I,<span class="hljs-string">'filename'</span>)</span></span><br></code></pre></td></tr></table></figure><p>filename必须是一种可识别的文件格式。如：</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">imwrite</span><span class="hljs-params">(I,<span class="hljs-string">'snight.png'</span>)</span></span><br></code></pre></td></tr></table></figure><p>也可以写成</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">imwrite</span><span class="hljs-params">(I,<span class="hljs-string">'snight'</span>,<span class="hljs-string">'png'</span>)</span></span><br></code></pre></td></tr></table></figure><p>仅适用于JPEG：</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">imwrite</span><span class="hljs-params">(I,<span class="hljs-string">'filename.jpg'</span>,<span class="hljs-string">'quality'</span>,q)</span></span><br></code></pre></td></tr></table></figure><blockquote><p>q 是整数，取值范围0~100.表示图像质量</p></blockquote><p>仅用于TIF：</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">imwrite</span><span class="hljs-params">(I,<span class="hljs-string">'filename.tif'</span>,<span class="hljs-string">'compression'</span>,<span class="hljs-string">'p'</span>,<span class="hljs-string">'res'</span>,...[colres rowres])</span></span><br></code></pre></td></tr></table></figure><p>p可以是：none表示无压缩，ccitt表示用CCITT压缩(二值图像的默认参数)，packbits表示比特压缩。1x2的矩阵包含两个整数，分别表示以每单位的点数给出的图像列和行的分辨率默认[72 72]。</p><p>另一种保存方式：file-另存为-</p></li><li><p>图像的显示</p><p>imshow()来显示图像文件，自动创建句柄图形图像对象，并自动设置各句柄图形属性和图像特征。</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">imshow</span><span class="hljs-params">(f,G)</span></span><br></code></pre></td></tr></table></figure><blockquote><p>f 表示一个二维图像数组，G表示该图像的灰度级数，默认的灰度级数是256.</p></blockquote><p>还可以写成：</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">imshow</span><span class="hljs-params">(f,[low,high])</span></span><br></code></pre></td></tr></table></figure><blockquote><p>f 同前。low和high表示，小于low显示黑色，大于high显示白色，之间以默认级数显示为中等亮度值。</p></blockquote><p>subplot()用来在一个窗口显示多幅图形<br>figure用来创建新的窗口</p><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">subplot</span><span class="hljs-params">(m,n,p)</span></span><br></code></pre></td></tr></table></figure><blockquote><p>m ，n表示图像排列成m行，n列，p表示图形所在的位置。</p></blockquote></li></ol></li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>CSS层叠样式表</title>
      <link href="/2017/09/22/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
      <url>/2017/09/22/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p><img src="/pic/2017-03/2017-03-07-1.jpg" alt=""></p><h1 id="CSS层叠样式表"><a href="#CSS层叠样式表" class="headerlink" title="CSS层叠样式表"></a>CSS层叠样式表</h1><a id="more"></a><h2 id="1-使用CSS样式的方式"><a href="#1-使用CSS样式的方式" class="headerlink" title="1. 使用CSS样式的方式"></a>1. 使用CSS样式的方式</h2><h3 id="1-HTML-lt-DOCTYPE-gt-声明标签"><a href="#1-HTML-lt-DOCTYPE-gt-声明标签" class="headerlink" title="1. HTML &lt;!DOCTYPE&gt;声明标签"></a>1. HTML <code>&lt;!DOCTYPE&gt;</code>声明标签</h3><p><strong>定义和用法：</strong><code>&lt;!DOCTYPE&gt;</code>声明必须是HTML文档的第一行，位于<html>标签之前<br>&lt;!DOCTYPE&gt;声明不是HTML标签；它是指示web浏览器关于页面是使用哪个HTML版本进行编写的指令。<br>在HTML 4.01中，&lt;!DOCTYPE&gt;声明引用DTD，因为HTML 4.01基于SGML。DLD规定了标记语言的规则，这样浏览器才能正确的呈现内容。<br>HTML5不基于SGML，所以不需要引用DTD</html></p><p><strong>各版本的声明</strong>：</p><ul><li><p>HTML5</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>HTML 4.01</p><p><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</code></p><p>该DTD包含所有HTML元素和属性，包括展示性的和弃用的元素(比如font)，不允许框架集(framesets)</p><p><code>&lt;meta http-equiv=Content-Type content=&quot;text/html;charset=utf-8&quot;&gt;</code></p><p>注意的规则：</p><p>单标记必须闭合：比如<code>&lt;br&gt;</code>必须写为<code>&lt;br/&gt; `</code><input>`</p><p>单属性必须添加属性值：比如:<code>&lt;input type=&quot;radio&quot; checked&gt;</code>必须写为<code>&lt;input type=&quot;radio&quot; checked=&quot;checked&quot;/&gt;</code></p><p>标记和属性必须使用小写：<code>&lt;Body&gt;</code>、<code>&lt;BODY&gt;</code>是错误的，必须写为<code>&lt;body&gt;</code></p><p>属性的属性值必须使用<code>&quot;&quot;</code>:在HTML4.01之前可以使用<code>&lt;body bgcolor=red&gt;</code>,HTML 4.01必须写为<code>&lt;body bgcolor=&quot;red&quot;&gt;</code></p></li></ul><h3 id="2-内链样式表"><a href="#2-内链样式表" class="headerlink" title="2. 内链样式表"></a>2. 内链样式表</h3><figure class="hljs highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;<span class="hljs-keyword">body</span> style=<span class="hljs-string">"background-color:green;margin:0;padding:0;"</span>&gt;&lt;<span class="hljs-keyword">body</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="3-嵌入式样式表"><a href="#3-嵌入式样式表" class="headerlink" title="3. 嵌入式样式表"></a>3. 嵌入式样式表</h3><p><strong>需要将样式放在<head></head>中</strong><br><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-comment">&lt;!--例如：--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS的使用方式<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css"><br>    <span class="hljs-selector-tag">body</span>&#123;<br>      <span class="hljs-attribute">background-color</span>: green;<br>      <span class="hljs-attribute">color</span>: red;<br>    &#125;<br>    <span class="hljs-selector-tag">p</span>&#123;<br>      <span class="hljs-attribute">background-color</span>: red;<br>      <span class="hljs-attribute">color</span>: green;<br>    &#125;<br>  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h3 id="4-引入式样式表"><a href="#4-引入式样式表" class="headerlink" title="4. 引入式样式表"></a>4. 引入式样式表</h3><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"StyleSheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"style.css"</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--例如：--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS的使用方式<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"style.css"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color:white;"</span>&gt;</span>CSS的使用方式<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--在当前文件夹下存在文件style.css,内容如下--&gt;</span><br>body&#123;background-color: red;color:#fff;&#125;<br></code></pre></td></tr></table></figure><h2 id="2-定义CSS样式表"><a href="#2-定义CSS样式表" class="headerlink" title="2. 定义CSS样式表"></a>2. 定义CSS样式表</h2><p><em>俗称：CSS选择器</em></p><h3 id="1-HTML标记定义"><a href="#1-HTML标记定义" class="headerlink" title="1. HTML标记定义"></a>1. HTML标记定义</h3><p>   比如HTML文档中有<code>&lt;p&gt;...&lt;/p&gt;</code>标记，我们可以直接写下面的来定义</p><p>的样式：</p><p>   <code>p{属性:属性值;属性1:属性值1;}</code></p><blockquote><p>p可以叫做选择器，定义那个标记中的内容执行其中的样式</p><p>一个选择器可以控制若干个样式属性，它们之间需要用英语的<code>&quot;,&quot;</code>隔开，最后一个可以不加<code>&quot;,&quot;</code></p></blockquote>   <figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">&lt;!--在head中定义--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css"><br>   <span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>:red;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">28px</span>;&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--而在body中定义了&lt;p&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这句话将会使用CSS的设置<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-Class定义"><a href="#2-Class定义" class="headerlink" title="2. Class定义"></a>2. Class定义</h3>   <figure class="hljs highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;p <span class="hljs-keyword">class</span>=<span class="hljs-string">"p"</span>&gt;...&lt;/p&gt;<br><span class="hljs-keyword">class</span> 定义是以<span class="hljs-string">"."</span>开始<br>.p&#123;属性：属性值；属性<span class="hljs-number">1</span>：属性值<span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure>   <figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">&lt;!--比如--&gt;</span><br><span class="hljs-comment">&lt;!--在head中定义--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css"><br>   <span class="hljs-selector-class">.p</span>&#123;<span class="hljs-attribute">color</span>:green;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">28px</span>;&#125;<br>   <span class="hljs-selector-class">.p</span> <span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">color</span>:red;&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--在body中定义了&lt;p&gt;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p"</span>&gt;</span><br>   这个将会使用.p的标记<br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这句话将会使用.p p的设置<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>.p p{color:red;}</code>这个叫做子选择器;选择了<code>class=&quot;p&quot;</code>下一层的<code>&quot;p&quot;</code>.</p><p>当然也可以:<code>&lt;div&gt;&lt;p class=&quot;pp&quot;&gt;这个...&lt;/p&gt;&lt;/div&gt;</code>然后在<style>中定义<code>.pp</code></p></blockquote><h3 id="3-ID定义"><a href="#3-ID定义" class="headerlink" title="3. ID定义"></a>3. ID定义</h3><figure class="hljs highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"p"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>ID 定义是以"#"开始的<br><br>p</span><span class="hljs-template-variable">&#123;属性：属性值；属性1：属性值1&#125;</span><span class="xml"></span><br></code></pre></td></tr></table></figure><blockquote><p><strong>!注意</strong>ID选择器是唯一选择器，通常只允许出现一次。</p><p>而上面的class的方法定义，允许出现多次。</p></blockquote><h3 id="4-优先级问题"><a href="#4-优先级问题" class="headerlink" title="4. 优先级问题"></a>4. 优先级问题</h3><ul><li>ID&gt;Class&gt;HTML</li><li>同级时选择离元素最近的一个的</li></ul><h3 id="5-组合选择器-同时控制多个元素"><a href="#5-组合选择器-同时控制多个元素" class="headerlink" title="5. 组合选择器(同时控制多个元素)"></a>5. 组合选择器(同时控制多个元素)</h3><p><code>h1,h2,h3{font-size:14px;color:red}</code><br>选择器组合可以使用”,”隔开<br><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="undefined"><br>   h1,h2&#123;color=red;&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是..<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是..<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h3 id="6-伪元素选择器-超链接样式"><a href="#6-伪元素选择器-超链接样式" class="headerlink" title="6. 伪元素选择器(超链接样式)"></a>6. 伪元素选择器(超链接样式)</h3><p>就是定义<strong>超链接的样式</strong></p><ol><li><code>a:link</code> 正常链接的样式</li><li><code>a:hover</code> 鼠标放上去的样式</li><li><code>a:active</code> 选择链接时的样式</li><li><code>a:visited</code> 已经访问过的链接的样式</li></ol><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css"><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span>&#123;<span class="hljs-attribute">color</span>:red;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;<span class="hljs-attribute">color</span>:green;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>&#123;<span class="hljs-attribute">color</span>:yellow;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span>&#123;<span class="hljs-attribute">color</span>:blue;&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.baidu.com"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-常见属性"><a href="#3-常见属性" class="headerlink" title="3. 常见属性"></a>3. 常见属性</h2><h3 id="1-颜色属性"><a href="#1-颜色属性" class="headerlink" title="1. 颜色属性"></a>1. 颜色属性</h3><p>color属性定义文本的颜色</p><ol><li><p>color：green</p></li><li><p>十六进制的颜色值color:#ff6600<br>简写式：color:#f60</p><blockquote><p>color:#ff(红) 66(绿) 00(蓝)<br>如果红绿蓝这三个颜色值都是重复的<code>aa</code>的形式，那么则可以简写。</p></blockquote></li><li><p>红(R)绿(G)蓝(B)每个的取值范围0-255 <code>color:rgb(255,255,255)</code></p><blockquote><p>color:rgb(红(r),绿(g),蓝(b))</p><p>比如：红色rgb(255,0,0)</p></blockquote></li><li><p>color:rgba(255,255,255,1)</p><p>RGBA是代表Red(红色)Green(绿色)Blue(蓝色)和Alpha的(色彩空间)透明度</p><blockquote><p>p{color:rgba(182,22,206,0~1)}</p><p>1就是百分百显示，0.6就是透明度百分之六十</p></blockquote></li></ol><h3 id="2-文字属性"><a href="#2-文字属性" class="headerlink" title="2. 文字属性"></a>2. 文字属性</h3><ol><li><p>font-size:字体大小</p><ul><li><code>px</code>：设置一个固定的值</li><li><code>%</code>：父元素的百分比</li><li><code>smaller</code>：比父元素更小</li><li><code>larger</code>：比父元素更大</li><li><code>inherit</code>：继承父元素的</li></ul></li><li><p>font-family：定义字体</p><ul><li><code>font-family:微软雅黑,serif</code>;</li><li>可以使用<code>,</code>隔开，以确保当前字体不存在的时候直接使用下一个</li><li>可以搜索”微软雅黑英文名称”，这样就可以替换掉中文名称了。</li></ul></li><li><p>font-weight：字体加粗</p><ul><li><p>normal(默认值)</p></li><li><p>bold(粗)</p></li><li><p>bolder(更粗)</p></li><li><p>lighter(更细)</p></li></ul><blockquote><p>400=normal，而700=bold.取值范围为<strong><code>100~900的整百数</code></strong></p></blockquote></li><li><p>font-style:字体样式</p><ul><li>normal：正常(标准)</li><li>italic：斜体</li><li>oblique：倾斜</li><li>inherit：继承</li></ul></li><li><p>font-variant：小型大写字母显示文本</p><p><em>针对于字母</em></p><ul><li>normal：标准</li><li>small-caps：小型大写字母显示文本</li><li>inherit：继承</li></ul></li></ol><p><strong>实例：</strong></p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css"><br><br><span class="hljs-selector-tag">h1</span>&#123;<br>  <span class="hljs-attribute">font-size</span>:<span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">font-family</span>:<span class="hljs-string">"宋体"</span>,<span class="hljs-string">"微软雅黑"</span>；<br>  font-weight:lighter;<br><br>&#125;<br><span class="hljs-selector-class">.hh</span>&#123;<br>  <span class="hljs-attribute">font-weight</span>:<span class="hljs-number">400</span>;<br>  <span class="hljs-attribute">font-style</span>:normal;<br>&#125;<br><br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hh"</span>&gt;</span>二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-背景属性"><a href="#3-背景属性" class="headerlink" title="3. 背景属性"></a>3. 背景属性</h3><ol><li><p>背景颜色:background-color</p><p>颜色取值跟上面的<code>颜色属性</code>一致。</p></li><li><p>背景图片:background-image</p><p><code>background-image:url(图片路径)</code><br><code>background-image:none</code></p></li><li><p>背景重复:background-repeat</p><ul><li>repeat:重复平铺满</li><li>repeat-x:向x轴重复</li><li>repeat-y:向y轴重复</li><li>no-repeat:不重复</li></ul></li></ol><ol start="4"><li><p>背景位置:background-position</p><ul><li><p>横向(left,center,right)</p></li><li><p>纵向(top,center,bottom)</p></li></ul><blockquote><p>参数其实是两个值：<code>background-position:left center;</code><br>但是要是居中，就可以缩写成<code>background-position:center;</code><br>居左边中部，就是<code>background-position:left;</code>,默认会添加<code>center</code></p></blockquote><ul><li>用数值表示位置</li></ul><blockquote><p><code>background-position:20px 20px;</code></p><p>background-position:(x)(y);#以左上角为原点。</p><p>这也是两个参数，表示距离左边20px，距离上边20px。如果只有一个参数，第二个参数默认是<code>center</code></p></blockquote></li><li><p>简写方式</p><figure class="hljs highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">background</span>:背景颜色 url(<span class="hljs-string">图像</span>) 重复 位置<br><span class="hljs-attribute">background</span>:<span class="hljs-number">#f60</span> url(<span class="hljs-string">images/bg.jpg</span>) no-repeat top center;<br></code></pre></td></tr></table></figure></li></ol><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="xml"><br><br>body&#123;<br>  <span class="hljs-comment">&lt;!--background-color:green;--&gt;</span><br>  background-image:url(image/bg.gif);<br>  background-repeat:repeat;<br>&#125;<br>body&#123;<br>  background:#f2f2f2;url(images/bg.jpg) no-repeat top center;<br>&#125;<br><br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-文本属性"><a href="#4-文本属性" class="headerlink" title="4. 文本属性"></a>4. 文本属性</h3><ol><li><p>text-align横向排列</p><ul><li>left</li><li>center</li><li>right ：右对齐</li></ul></li><li><p>line-height文本行高</p><ul><li><code>%</code>基于字体大小的百分比行高</li><li><code>数值</code>来设定固定值<blockquote><p>当行高小于字体大小时，就可能会发生文字行的重叠。</p></blockquote></li></ul></li><li><p>text-indent 首行缩进</p><ul><li><code>%</code>父元素的百分比</li><li><code>px</code>固定值，默认0</li><li><code>inherit</code>继承</li></ul></li><li><p>letter-spacing <em>字符</em>间距</p><ul><li>normal 默认</li><li>length设置具体的数值(可以设置负值)</li><li>inherit继承</li></ul></li><li><p>word-spacing <em>单词</em> 间距</p><ul><li><p>normal 标准间距</p></li><li><p>px固定值</p></li><li><p>inherit继承</p></li></ul><blockquote><p>定义单词英文状态下的距离</p></blockquote></li><li><p>direction文本方向</p><ul><li><p>ltr从左到右，默认值</p></li><li><p>rtl从右到左</p></li><li><p>inherit继承</p></li></ul><blockquote><p>跟右对齐差不多</p></blockquote></li><li><p>text-transform文本大小写</p><ul><li>none：默认</li><li>capitalize：<strong><em>每个单词</em></strong>以大写字母开头</li><li>uppercase：定义仅有大写字母</li><li>lowercase：定义仅有小写字母</li><li>inherit：规定应该从父元素继承text-transform属性值</li></ul></li></ol><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css"><br><br><span class="hljs-selector-tag">div</span>&#123;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">300px</span>;<br>&#125;<br><span class="hljs-selector-tag">p</span>&#123;<br>  <span class="hljs-attribute">text-align</span>:left;<br>  <span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">line-height</span>:<span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">text-indent</span>:<span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">letter-spacing</span>:<span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">word-spacing</span>:<span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">direction</span>:rtl;<br>&#125;<br><br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>测试字体<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-边框属性"><a href="#5-边框属性" class="headerlink" title="5. 边框属性"></a>5. 边框属性</h3><ol><li><p>边框风格border-style</p><ul><li>统一风格(简写风格):border-style</li><li>单独定义某一方向<ul><li>border-bottom-style下边边框样式</li><li>border-top-style上边边框样式</li><li>border-left-style左边边框样式</li><li>border-right-style右边边框样式</li></ul></li><li><p><strong>边框风格样式</strong>的属性值</p><ol><li><p><code>none</code>无边框</p></li><li><p><code>solid</code>直线边框</p></li><li><p><code>dashed</code>虚线边框</p></li><li><p><code>dotted</code>点状边框</p></li><li><p><code>double</code>双线边框</p></li><li><p><code>groove</code>凸槽边框</p></li><li><p><code>ridge</code>垄状边框</p></li><li><p><code>inset</code> inset边框</p></li><li><p><code>outset</code> outset边框</p><blockquote><p>6-9 是依托于border-color的属性值</p></blockquote></li><li><p>inherit继承</p></li></ol></li></ul></li><li><p><strong>边框宽度<code>border-width</code></strong></p><ul><li>统一风格：border-width</li><li>单独风格<ul><li>border-top-width：上边边框宽度</li><li>border-bottom-width：下边边框宽度</li><li>border-left-width：左边边框宽度</li><li>border-right-width：右边边框宽度</li></ul></li><li>边框宽度的属性值 <ol><li>thin： 细边框</li><li>medium ：中等边框</li><li>thick ：粗边框</li><li>px：固定值的边框</li><li>inherit：继承</li></ol></li></ul></li><li><p><strong>边框颜色<code>border-color</code></strong></p><ul><li><p>统一风格 border-color</p></li><li><p>单独风格：</p><ul><li><p>border-top-color:上边边框颜色</p></li><li><p>border-bottom-color：下边边框颜色</p></li><li><p>border-left-color：左边边框颜色</p></li><li><p>border-right-color：右边边框颜色</p></li></ul></li><li><p>属性值</p><ol><li><p>颜色值的名称:<code>green</code></p></li><li><p>RGB<code>rgb(255,255,0)</code></p></li><li><p>RGBA<code>rgba(255,255,0,0.2)</code></p></li><li><p>十六进制<code>#ff0</code>、<code>#ff0000</code></p></li><li><p>继承</p></li></ol></li></ul></li><li><p>小结：属性值的四种情况</p><ul><li>只有 一个值：border-color：(上、下、左、右)，比如<code>border-color:rgb(0,0,255);</code></li><li>两个值：border-color：(上下)(左右)，比如<code>border-color:green red;</code></li><li>三个值：border-color：(上)(左，右)(下)，同上</li><li>四个值：border-color:(上)(右)(下)(左)，同上。</li></ul></li><li><p>简写方式</p><p>border:solid 2px #f60</p><blockquote><p>边框样式，边框宽度，颜色值</p></blockquote></li></ol><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css"><br><span class="hljs-selector-tag">div</span>&#123;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">float</span>:left;<br>  <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#f60</span>;<br>&#125;<br><span class="hljs-selector-class">.div1</span>&#123;<span class="hljs-attribute">border-style</span>:solid;&#125;<br><span class="hljs-selector-class">.div2</span>&#123;<span class="hljs-attribute">border-style</span>:dashed;&#125;<br><span class="hljs-selector-class">.div3</span>&#123;<br>  <span class="hljs-attribute">border-top-style</span>:dotted;<br>  <span class="hljs-attribute">border-left-style</span>:solid;<br>  <span class="hljs-attribute">border-bottom-style</span>:groove;<br>  <span class="hljs-attribute">border-right-style</span>:ridge;<br>  &#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"div1"</span>&gt;</span>solid<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"div2"</span>&gt;</span>dashed<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"div3"</span>&gt;</span>dotted<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-列表属性"><a href="#6-列表属性" class="headerlink" title="6. 列表属性"></a>6. 列表属性</h3><blockquote><p>回顾：列表定义方式</p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> &lt;ul&gt;</span><br><span class="hljs-meta">&gt;</span><span class="bash">    &lt;li&gt;无序列表&lt;/li&gt;</span><br><span class="hljs-meta">&gt;</span><span class="bash">    &lt;li&gt;无序列表&lt;/li&gt;</span><br><span class="hljs-meta">&gt;</span><span class="bash">    &lt;li&gt;无序列表&lt;/li&gt;</span><br><span class="hljs-meta">&gt;</span><span class="bash"> &lt;/ul&gt;</span><br><span class="hljs-meta">&gt;</span><span class="bash"> &lt;ol&gt;</span><br><span class="hljs-meta">&gt;</span><span class="bash">    &lt;li&gt;有序列表&lt;/li&gt;</span><br><span class="hljs-meta">&gt;</span><span class="bash">    &lt;li&gt;有序列表&lt;/li&gt;</span><br><span class="hljs-meta">&gt;</span><span class="bash">    &lt;li&gt;有序列表&lt;/li&gt;</span><br><span class="hljs-meta">&gt;</span><span class="bash"> &lt;/ol&gt;</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br></code></pre></td></tr></table></figure></blockquote><ol><li><p>标记的类型：<code>list-style-type</code></p><p>| none                 | 无标记                              |<br>| ——————– | ——————————– |<br>| disc 默认              | 标记是实心圆                           |<br>| circle               | 标记是空心圆                           |<br>| square               | 标记是实心方块                          |<br>| decimal              | 标记是数字                            |<br>| decimal-leading-zero | 0开始的数字标记(01,02,03等)              |<br>| lower-roman          | 小写罗马数字                           |<br>| upper-roman          | 大写罗马数字                           |<br>| lower-alpha          | 大写英文字母                           |<br>| upper-alpha          | 大写英文字母                           |<br>| lower-greek          | 小写希腊字母                           |<br>| lower-latin          | 小写拉丁字母                           |<br>| upper-latin          | 大写拉丁字母                           |<br>| hebrew               | 传统的希伯来编号方式                       |<br>| armenian             | 传统的亚美尼亚编号方式(an,ban,gan,等)        |<br>| cjk-ideographic      | 简单的表意数字                          |<br>| hiragana             | 标记是：a,i,u,e,o,ka,ki,等(日本片假名)     |<br>| hiragana-iroha       | 标记是：i,ro,ha,ni,ko,he,to等(日本片假名)  |<br>| katakana-iroha       | 标记是：I,RO,HA,NI,HO,HE,TO,等(日文片假名) |</p><figure class="hljs highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;<span class="hljs-string">style </span><span class="hljs-string">type=</span><span class="hljs-string">"text/css"</span>&gt;<br>   <span class="hljs-string">ul&#123;</span><br>     <span class="hljs-built_in">list-style-type:decimal-leading-zero;</span><br>   &#125;<br>   <span class="hljs-string">ol&#123;</span><br>     ...<br>   &#125;<br>&lt;/<span class="hljs-string">style&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>标记的位置：<code>list-style-position</code></p><p><code>inside</code> 列表项目标记放置在文本以内，且环绕文本根据标记对齐。(差不多就是在每行前面放置了两个空格进行缩进)</p><p><code>outside</code> 默认值，保持标记位于文本的左侧，列表项目标记放置在文本以外，且环绕文本不根据标记对齐。</p><p><code>inherit</code> 规定应从父元素继承list-style-position 属性值。</p></li><li><p>设置图像列表标记：list-style-image</p><p>URL 图像的路径</p><p>none 默认，无图形被显示</p><p>inherit 规定应从父元素继承list-style-image属性的值</p><blockquote><p>list-style-image:url(image/1.gif)</p></blockquote></li><li><p>简写方式：list-style</p><p><code>list-style:square inside url(&#39;/i/arrow.jpg&#39;);</code></p></li></ol><h2 id="4-DIV-CSS-布局"><a href="#4-DIV-CSS-布局" class="headerlink" title="4. DIV+CSS 布局"></a>4. DIV+CSS 布局</h2><h3 id="1-div和span"><a href="#1-div和span" class="headerlink" title="1. div和span"></a>1. div和span</h3><p>DIV和SPAN在整个HTML标记中，没有任何意义，他们的存在就是为了应用CSS样式。<br>DIV和span的区别在于，span是内联元素，div是块级元素</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css"><br><span class="hljs-selector-tag">div</span>&#123;<br>  <span class="hljs-attribute">background-color</span>:green;<br>  <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;<br>&#125;<br><span class="hljs-selector-tag">span</span>&#123;<br>  <span class="hljs-attribute">background-color</span>:green;<br>  <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;<br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这里是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>结果将能看到，span块中，只有文字部分是绿色的，而div中，整个一行都是绿色的。</p></blockquote><h3 id="2-盒模型"><a href="#2-盒模型" class="headerlink" title="2. 盒模型"></a>2. 盒模型</h3><p>margin 盒子外边距</p><blockquote><p>margin-left:10px;margin-right:10px;…</p></blockquote><p>padding 盒子内边距</p><p>border 盒子边框宽度 <code>border:solid 10px;</code></p><p>width 盒子宽度</p><p>height 盒子高度</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS的使用方式<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!--可以这样引用css的定义。<br>&lt;link rel="stylesheet" type="text/css" href="style.css"&gt;<br>--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css"><br><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span>;<br><span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>这里是测试属性<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/pic/2017-03/2017-03-07-1.jpg" alt=""></p><blockquote><p>上面代码的盒子模型，可以在Chrome中<code>右键-检查</code>。</p></blockquote><h3 id="3-布局相关的属性"><a href="#3-布局相关的属性" class="headerlink" title="3. 布局相关的属性"></a>3. 布局相关的属性</h3><ol><li><p>定位方式 position</p><ol><li><p>relative 正常定位</p></li><li><p>absolute 根据父元素进行定位</p><blockquote><p>如果你想设定子元素相对于父元素进行定位，那么父元素要设置为正常定位。</p></blockquote></li><li><p>fixed 根据浏览器窗口进行定位<em>下拉窗口这个块位置不变</em></p></li><li><p>static 没有定位</p></li><li><p>inherit 继承</p></li></ol></li><li><p>定位：left，right，top，bottom离页面定点的距离</p></li><li><p>z-index 层覆盖先后顺序(优先级)：可以解决后定义的层覆盖先定义的层的问题。</p><p>z-index默认为0；在先定义的层里定义z-index:1;这样就会显示在其他层上面。z-index值越大，越在上面。</p></li><li><p>display 显示属性</p><p>display:none 层不显示<br>display:block 块状显示，在元素后面换行，显示下一个块元素<br>display:inline 内联显示，多个块可以显示在一行内</p><blockquote><p>块元素可以定义其宽度，而内联不可以。</p></blockquote></li><li><p>float 浮动属性</p><p>left 左浮动</p><p>right 右浮动</p><blockquote><p>当浮动和div紧邻的时候，浮动会影响div，所以要对div清除浮动，使用clear:both; </p></blockquote><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css"><br><span class="hljs-selector-tag">body</span>&#123;<br>  <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.div</span>&#123;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">960px</span>;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#f1f1f1</span>;<br>&#125;<br><span class="hljs-selector-class">.left</span>&#123;<br>  <span class="hljs-attribute">float</span>:left;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">260px</span>;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">460px</span>;<br>  <span class="hljs-attribute">background</span>:<span class="hljs-number">#ccc</span>;<br>&#125;<br><span class="hljs-selector-class">.right</span>&#123;<br>  <span class="hljs-attribute">float</span>:right;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">700</span>;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">460px</span>;<br>  <span class="hljs-attribute">background</span>:<span class="hljs-number">#ddd</span>;<br>&#125;<br><span class="hljs-selector-class">.bottom</span>&#123;<br>  <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">clear</span>:both;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">960px</span>;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background</span>:<span class="hljs-number">#eee</span>;<br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"div"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"left"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"right"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bottom"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>clear:both 清除浮动</p></li><li><p>overflow 溢出处理：比如设置的<code>div</code>比较小，但是文字比较多，就会发生溢出。</p><p><code>hidden</code> 隐藏超出层大小的内容</p><p><code>scrow</code> 无论内容是否超出层大小都添加滚动条</p><p><code>auto</code> 超出时添加滚动条</p></li></ol><figure class="hljs highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-params">&lt;style type="text/css"&gt;</span><br>body&#123;<br><span class="hljs-symbol">  padding:</span><span class="hljs-number">0</span>;<br><span class="hljs-symbol">  margin:</span><span class="hljs-number">0</span>;<br>&#125;<br>.div&#123;<br><span class="hljs-symbol">  width:</span><span class="hljs-number">300</span>px;<br><span class="hljs-symbol">  height:</span><span class="hljs-number">300</span>px;<br>  background-color:green;<br><span class="hljs-symbol">  position:</span>relative;<br><span class="hljs-symbol">  left:</span><span class="hljs-number">10</span>;<br><span class="hljs-symbol">  top:</span><span class="hljs-number">10</span>;<br>&#125;<br>span&#123;<br><span class="hljs-symbol">  position:</span>absolute;<br>  background-color:<span class="hljs-meta">#ff6600;</span><br><span class="hljs-symbol">  color:</span><span class="hljs-meta">#fff;</span><br><span class="hljs-symbol">  top:</span><span class="hljs-number">10</span>px;<span class="hljs-meta">#相对于父元素下移10px；</span><br><span class="hljs-symbol">  right:</span><span class="hljs-number">0</span>px;<span class="hljs-meta">#相对于父元素右边距离为0，也就是到右上角；</span><br>&#125;<br><br>.fixed&#123;<br><span class="hljs-symbol">  position:</span>fixed;<br>  background-color:green;<br><span class="hljs-symbol">  color:</span><span class="hljs-meta">#fff;</span><br><span class="hljs-symbol">  top:</span><span class="hljs-number">100</span>px;<span class="hljs-meta">#距离浏览器窗口上面100px；当我们的浏览器很长很长，我们往下拉网页的时候，这个块离浏览器位置不变！</span><br>  z-index:<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-params">&lt;/style&gt;</span><br><br><span class="hljs-params">&lt;div class="div"&gt;</span><br><span class="hljs-params">&lt;span&gt;</span>今日浏览次数<span class="hljs-number">100</span>次<span class="hljs-params">&lt;/span&gt;</span><br><span class="hljs-params">&lt;/div&gt;</span><br><br><span class="hljs-params">&lt;div class="fixed"&gt;</span><br><span class="hljs-params">&lt;p&gt;</span>联系电话：<span class="hljs-params">&lt;/p&gt;</span><br><span class="hljs-params">&lt;p&gt;</span>联系qq：<span class="hljs-params">&lt;/p&gt;</span><br><span class="hljs-params">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-兼容问题"><a href="#4-兼容问题" class="headerlink" title="4. 兼容问题"></a>4. 兼容问题</h3><ol><li><p>兼容性测试工具：<code>IE Tester</code>和<code>Multibrowser</code></p></li><li><p>常用的浏览器</p></li><li><p>高效的开发工具</p><ol><li>notepad++</li><li>sublime Text</li><li>记事本</li><li>WebStorm</li><li>Dramweaver</li></ol></li><li><p>网页设计工具</p><ol><li>fireworks</li><li>photoshop</li></ol></li><li><p>判断IE的方法</p><blockquote><p>判断条件只有在IE下才有效果！放在<code>&lt;body&gt;</code>中。</p></blockquote><p>条件判断格式：<code>&lt;!--[if 条件 版本]&gt;那么显示&lt;![endif]--&gt;</code></p><p>不等于：除了IE8都可以显示：<code>[if !IE 8]</code></p><p>小于：如果IE浏览器版本小于5.5的显示：<code>[if lt IE 5.5]</code></p><p>大于：如果IE浏览器版本大于5的显示：<code>[if gt IE 5]</code></p><p>小于或等于：如果浏览器版本小于6的显示：<code>[if lte IE 6]</code></p><p>大于或等于：如果浏览器版本大于7 的显示：<code>[if gte IE 7]</code></p><p>大于和小于之间：如果IE浏览器版本大于IE5小于7的显示：<code>[if (gt IE 5)&amp;(lt IE 7)]</code></p><p>或：如果IE6或者IE7：<code>[if (IE6)|(IE7)]</code></p><p>仅：如果是IE8：<code>&lt;!--[if IE 8]&gt;</code></p></li></ol></style></p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>WEB框架</title>
      <link href="/2017/09/22/WEB%E6%A1%86%E6%9E%B6/"/>
      <url>/2017/09/22/WEB%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h1 id="WEB框架"><a href="#WEB框架" class="headerlink" title="WEB框架"></a>WEB框架</h1><p>框架将浏览器划分为不同的部分，每一部分加载不同的网页，实现在同一浏览器窗口中加载多个页面的效果。</p><a id="more"></a><h2 id="lt-frameset-gt-划分框架标记"><a href="#lt-frameset-gt-划分框架标记" class="headerlink" title="&lt;frameset&gt;划分框架标记:"></a><code>&lt;frameset&gt;</code>划分框架标记:</h2><ol><li><p>语法格式</p><frameset>…</frameset></li><li><p>属性：</p><ol><li><p><code>cols</code> ：使用“像素数”和%分隔左右窗口，“*”表示剩余部分</p><p>如果使用<code>&quot;*&quot;,&quot;*&quot;</code>表示框架平均分成2个</p><p>如果使用<code>&quot;*&quot;,&quot;*&quot;,&quot;*&quot;</code>表示框架平均分成3个</p></li><li><p><code>rows</code>:使用像素数和%分隔上下窗口，<code>&quot;*&quot;</code>表示剩余部分</p></li><li><code>frameborder</code>:指定是否显示边框，0不显示，1显示 </li><li><code>border</code>：设置边框的大小，默认值5像素</li></ol></li><li><p><code>&lt;frame&gt;</code>子窗口标记，<strong>单标记</strong>，该标记必须放在<code>&lt;frameset&gt;</code>中使用，在<code>&lt;frameset&gt;</code>中设置了几个窗口，就必须对应使用几个<code>&lt;frame&gt;</code>框架，而且还必须使用<code>src属性</code>指定一个网页</p><ol><li><code>src</code>：加载网页文件的URL地址</li><li><code>name</code>：框架名称，是链接标记的target所要参数</li><li>noresize：表示不能调整框架大小，没有设置时就可以调整</li><li>scrolling：是否需要滚动条：加在顶层<code>&quot;frameset&quot;</code>不管用，必须要加在每一个<code>&lt;frame&gt;</code>进行控制。<ul><li>auto：根据需要自动出现</li><li>yes：</li><li>no：无</li></ul></li><li>frameborder：是否需要边框<ul><li><code>(1)</code>显示边框</li><li>(0)不显示边框</li></ul></li></ol></li></ol><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML框架<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"90,*,90"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"top"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"top.html"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"20%,80%"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"left"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"left.html"</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 其中几个框架的html代码没有显示。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"50%,50%"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"right1"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://bai.com"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">frame</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"right2"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://kaigedong.github.io"</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">"no"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">frame</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"bottom"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"bottom.html"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span>&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="/pic/2017-03/2017-03-03-1.jpg" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> HTML CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Affymetrix芯片原理</title>
      <link href="/2017/09/22/Affymetrix%E8%8A%AF%E7%89%87%E5%8E%9F%E7%90%86/"/>
      <url>/2017/09/22/Affymetrix%E8%8A%AF%E7%89%87%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="Affymetrix芯片原理"><a href="#Affymetrix芯片原理" class="headerlink" title="Affymetrix芯片原理"></a>Affymetrix芯片原理</h1><p>Affymetrix芯片公司的芯片包含了<code>RNA表达量分析（表达谱芯片）</code>、<code>SNP检测(基因分型)</code>、<code>拷贝数变异(Copy Number Variation,CNV)</code>、<code>small RNA</code>、<code>甲基化</code>等多种芯片。</p><p>应用最广的芯片:<code>表达谱芯片</code>和<code>SNP分型芯片</code>。</p><a id="more"></a><p>Affymetrix在售的仪器：主要有<strong>四个机型</strong>，从小到大分别是：</p><ul><li>GeneAtlas：是一个小型系统，可以扫描4张芯片一组的小芯片条。</li><li>GeneChip Scanner 3000 7G(简称：7G) 和 </li><li>GeneChip System 3000 DX2(简称：DX2)：这两个是一个机器的两个版本，其中“7G”是科研型版本，“DX2”是临床版本。</li><li>GeneTitan：新的机型，通量更大。</li></ul><h2 id="芯片制造原理"><a href="#芯片制造原理" class="headerlink" title="芯片制造原理"></a>芯片制造原理</h2><p>Affymetrix芯片制造过程，类似于半导体芯片的制造过程，是通过光蚀刻来完成的。生物芯片的<code>基片是一张大的玻璃片，称为“wafer”</code>.</p><ul><li>首先在玻璃基片上加上<code>保护基团</code></li></ul><blockquote><p>保护基团可以阻止接下来的DNA延长反应；这些保护基团是对光敏感的，受到紫外线的照射，这些基团会从所连接的羟基上掉下来。暴露羟基。</p></blockquote><ul><li>接下来进行光蚀刻。</li></ul><p>以玻璃基片上的<code>3*2</code>个小格子为例，说明光刻过程：</p><ul><li>先用一个光罩（mask 1）来遮住一部分的玻璃板区域，进行紫外光照射。</li></ul><blockquote><p>在光罩上是一系列排列整齐的小方格，有些小方格是透明的，有些是不透明的，紫外光透过光罩照到透明格子对应的玻璃基片上，光敏的保护基团会从羟基脱落，而不透明的格子保护基团还在。(蓝色为保护基团，紫外光照将会使其脱落)</p></blockquote><p><img src="/pic/2017-02/2017-02-26-19.jpg" alt=""></p><ul><li>接下来把要连接的碱基底物加到玻璃基片上。</li></ul><blockquote><p>这里第一个要加的碱基是‘A’，玻璃基片上，刚才被光照射的格子就会与A结合。而另一部分没被光照射的还仍然带有保护基团。</p><p>!注意：<code>加的A碱基也带有保护基团</code>。</p></blockquote><ul><li>下一步，进行光刻，用另一张光罩（mask2）盖在玻璃基片上，紫外光再次透过光罩，去掉<strong>一部分</strong>保护基团，第二章透明、不透明格子的分布与第一张不同。再将T碱基铺到玻璃基片上， 在第二轮去掉了保护基团的位置就会加上T。</li></ul><p><img src="/pic/2017-02/2017-02-26-20.jpg" alt=""></p><ul><li>然后，用Mask 3 进行下一轮遮盖，紫外光照，然后加上C碱基…</li></ul><p>这样就会根据设计者的意图，长出DNA链来，<code>这就是探针</code>。</p><blockquote><p>Affymetrix公司的芯片都是3‘端连在玻璃基片上的。</p><p>做<code>表达谱的芯片</code>，也就是测RNA表达量的芯片，探针的长度是<code>25个碱基</code>；<code>SNP分型的芯片</code>，探针长度是<code>30个碱基</code>。</p><p>Affymetrix芯片上，长有相同DNA链的一个小点被称为一个<code>Feature</code>，这也是未来芯片扫描图上的一个光点。一张芯片上最多可以有<code>680万个Feature</code>，每个Feature上会有几百万条相同序列的DNA探针。</p></blockquote><ul><li>一个大的玻璃基片，在种好所有的DNA链之后会被裁切成一个一个小玻璃片，每个小玻璃片都有一套完整的探针。每张小玻璃片加上辅助液流的外壳，再打上相应的标识，就成了一张生物芯片。</li></ul><blockquote><p>Affymetrix公司的芯片，它所有设计的探针，都在确定的位置，在最后的芯片判读过程中，也是通过光点的空间位置，来知道测到的是哪个探针。</p></blockquote><h2 id="表达谱芯片实验原理"><a href="#表达谱芯片实验原理" class="headerlink" title="表达谱芯片实验原理"></a>表达谱芯片实验原理</h2><p>Affymetrix的表达芯片，分为传统的<code>In Vitro Transcription</code> 芯片和新一代的<code>Whole Transcriptome</code>芯片。</p><h3 id="IVT芯片原理"><a href="#IVT芯片原理" class="headerlink" title="IVT芯片原理"></a>IVT芯片原理</h3><ul><li>其中<code>IVT芯片</code>使用<code>Oligo dT引物</code>和<code>T7逆转录酶</code>来得到<code>cDNA链</code>的：</li></ul><p><img src="/pic/2017-02/2017-02-26-1.jpg" alt=""></p><p>所以，它得到的cDNA主要是靠近mRNA3’位末端的cDNA，相应的，它的探针也<code>主要针对每个基因的最后一、二个外显子</code>来进行设计。</p><blockquote><p>比较著名的IVT芯片，有经典的<code>U133芯片</code>，和较为经济的<code>PrimeView芯片</code>。</p></blockquote><h3 id="WT-芯片原理"><a href="#WT-芯片原理" class="headerlink" title="WT 芯片原理"></a>WT 芯片原理</h3><ul><li>而<code>WT芯片</code>是用<code>随机引物</code>和<code>T7逆转录酶</code>来得到cDNA的:</li></ul><p><img src="/pic/2017-02/2017-02-26-2.jpg" alt=""></p><p>所以，它得到的cDNA会覆盖转录本上更多的区域。相应的，它的探针也是针对基因的整个转录本来进行设计的。</p><p><strong>WT芯片的好处：</strong></p><ol><li><p>可以覆盖转录本上更多的区域，实验结果的代表性就更好。</p></li><li><p>可以针对因为差异剪接所形成的不同转录本分别设计探针,这样就可以知道不同转录本表达量的情况了。</p></li><li><p>可以检测到长链非编码RNA</p></li></ol><blockquote><p>比较著名的WT芯片有<code>HTA 2.0</code>、<code>Exon 1.0</code>、<code>Gene 2.0/2.1</code>等</p></blockquote><ol><li>实验过程中，先通过逆转录得到第一链的cDNA，紧接着就合成第二链的cDNA</li></ol><p><img src="/pic/2017-02/2017-02-26-3.jpg" alt=""></p><ol start="2"><li>变成双链cDNA之后，这个双链cDNA就可以作为接下来的转录模板了。</li><li>接下来，用掺有生物素标记的UTP的聚合反应底物，也就是ATP、 CTP、TTP， 再加上生物素标记的UTP， 形成的4个 单核苷酸的 混合物进行体外转录， 转录得到 <code>cRNA (comple- mentary RNA)</code></li></ol><blockquote><p>因为转录的 原料中含有 被生物素标记的UTP，所以转录出来 的cRNA片段 就是带有生物素标签，然后用这些cRNA片段与芯片进行杂交，</p></blockquote><ol start="4"><li>之后，用标记了<code>藻红蛋白的链霉亲和素（SAPE）</code>对芯片进行染色：</li></ol><p><img src="/pic/2017-02/2017-02-26-4.jpg" alt=""></p><blockquote><p><code>链霉亲和素</code>会与cRNA上的<code>生物素</code>特异性的结合;<br>（SAPE上的）<code>藻红蛋白</code>在激发光的照射下，可以发出<code>红色荧光</code></p></blockquote><ol start="5"><li>再加入<code>标记了生物素</code>的<code>抗链霉亲和素抗体</code>，抗体就亲和吸附到那些已经吸附在cRNA上的链酶亲和素上。</li></ol><p><img src="/pic/2017-02/2017-02-26-9.jpg" alt=""></p><ol start="6"><li>亲和吸附完成之后，再加入SAPE对芯片二次染色，SAPE就吸附到那些生物素上。</li></ol><p><img src="/pic/2017-02/2017-02-26-10.jpg" alt=""></p><ol start="7"><li>通过上述的再次染色，可以把更多的藻红蛋白吸附到目标cRNA片段上以增加荧光强度。</li><li>化学反应完成之后，就可以把芯片拿到扫描仪上进行激光扫描了，激光扫描之后，得到一张有着密密麻麻光点的图片，这张图也就是荧光信号的矩阵。</li></ol><p><img src="/pic/2017-02/2017-02-26-7.jpg" alt=""></p><blockquote><p>光点的x轴，y轴的位置，也就是探针的ID号，光点的强度，对应着被杂交的cRNA的量。而这个cRNA的量，就反映了对应基因特定mRNA转录本的表达量。</p></blockquote><h2 id="SNP分型芯片原理（基因分型芯片）"><a href="#SNP分型芯片原理（基因分型芯片）" class="headerlink" title="SNP分型芯片原理（基因分型芯片）"></a>SNP分型芯片原理（基因分型芯片）</h2><p>Affymetrix公司的SNP分型芯片有两种实验原理：</p><ul><li>新的是Axiom芯片，是基于<code>连接反应的</code></li><li>老的卡式芯片，是基于目标DNA片段与探针序列进行杂交，看序列是否完全匹配。</li></ul><h3 id="Axiom方法及检测原理"><a href="#Axiom方法及检测原理" class="headerlink" title="Axiom方法及检测原理"></a>Axiom方法及检测原理</h3><p>有两种探针在起作用，第一种探针是芯片上的捕获探针，30个碱基长，作用是把目标DNA片段固定到芯片表面，第二种探针是显色探针，它负责对SNP芯片进行显色：</p><p><img src="/pic/2017-02/2017-02-26-8.jpg" alt=""></p><ul><li>显色探针的设计：</li></ul><p>显色探针共分为四组，<code>A/C/G/T</code>各一组探针，它们都是9个碱基的长度，它们的3‘末端的第一个碱基是特异的，而从第二个碱基到第九个碱基都是<code>简并的</code>，这其中，3’末端C，或者G的，设计成5‘端带一个生物素标签，也就是最后会被染成红色荧光。而3’端是A或者T的，5‘端被设计成带另一种标签，最后被染色成绿色荧光。</p><p><img src="/pic/2017-02/2017-02-26-11.jpg" alt="显色探针"></p><ul><li>以下，以一个<code>G:T</code>型的SNP位点为例，进行说明：  </li></ul><p>在设计这个SNP位点的探针的时候，所设计的捕获探针，是正好到SNP位点<strong>旁边</strong>的一个碱基，实验过程进行两轮杂交：</p><p><img src="/pic/2017-02/2017-02-26-12.jpg" alt=""></p><p>第一轮杂交：目标DNA与芯片进行杂交，结果是芯片上的捕获探针会抓到相匹配的目标DNA片段。</p><p>接着加入显色探针，进行第二轮杂交，这一轮杂交，把显色探针杂交到目标DNA片段上。</p><p><img src="/pic/2017-02/2017-02-26-13.jpg" alt=""></p><p>然后用连接酶进行连接，因为连接酶会对连接前后几个碱基进行识别，只有前后几个碱基都完全匹配连接才会发生。利用连接酶这种识别作用，让只有与目标DNA片段互补的显色探针才会被连接酶连接到捕获探针上。</p><p>连接反应后，把游离的显色探针洗掉，再用带荧光标记的染色试剂进行染色，</p><p><img src="/pic/2017-02/2017-02-26-14.jpg" alt=""></p><p>刚才连到捕获探针上的生物素标签就在这个染色过程中被染上红色荧光染料。</p><p>反之，如果目标DNA片段上，这个位点是“T”，则会被染成绿色荧光基团。</p><p>染色完成后，就可以在激光扫描仪下对芯片进行扫描了。</p><blockquote><p>扫描过程中，探针发出的光是单纯的红色，则该位点是<code>G型纯合子</code></p><p>如果是单纯的绿色，则是<code>T型纯合子</code></p><p>如果有红有绿，光强接近，则是<code>G，T杂合子</code></p></blockquote><p>同样的道理，对于以下四种SNP情况，因为不同基因型会发出不同的光，只要看荧光颜色和强度就可以分辨SNP型了。</p><p><img src="/pic/2017-02/2017-02-26-15.jpg" alt=""></p><p> 而对于<code>A/T</code>和<code>C/G</code>这种荧光相同的，就需要另外的检测方案：</p><p>以<code>A/T</code>型为例进行说明:</p><ul><li><p>针对A设计一个探针，再针对T设计一个探针，而这些探针，是<strong>覆盖到SNP位点的</strong>。</p><p>​<br><img src="/pic/2017-02/2017-02-26-16.jpg" alt=""></p></li></ul><p>这里以一个<code>5&#39;</code>端最后一个碱基为<code>A</code>的捕获探针为例：</p><ul><li>经过第一轮捕获杂交，目标DNA与之杂交，如果目标DNA是<code>T</code>碱基，则两个片段完美匹配.</li><li>经过第二轮杂交，一个显色探针杂交到它的旁边，在经过连接反应，显色探针上的标签就连到了这个捕获探针上。</li></ul><p><img src="/pic/2017-02/2017-02-26-17.jpg" alt=""></p><ul><li>反之，如果目标片段该SNP位点为<code>A</code>，则与探针上<code>A</code>是不完全匹配的，第二轮杂交过程中，虽然有显色探针停在它的附近，但是不会发生连接反应。随后会被洗脱下来。</li><li>这样，在随后的激光扫描过程中，如果探针发出荧光，则说明对应SNP位点有<code>T碱基</code>,如果不发出荧光，则说明无<code>T碱基</code></li><li>然后再看芯片上最后一个为<code>T碱基</code>的捕获探针，如果发光，说明有A，如果不发光，说明没有<code>A</code></li><li>综合两个探针的情况来看，都发光就说明是<code>A/T</code>杂合子；如果只有捕获探针末位为A的发光，则说明该位点为<code>T纯合子</code>；如果只有末位为T的发光，说明是<code>A纯合子</code></li></ul><blockquote><p>在Axiom芯片中，<code>CHB1</code>和<code>CHB2</code>是两款很常用的针对中国人的SNP分型芯片，它们有130万个SNP位点。</p></blockquote><h3 id="卡式SNP芯片原理"><a href="#卡式SNP芯片原理" class="headerlink" title="卡式SNP芯片原理"></a>卡式SNP芯片原理</h3><p>而卡式SNP芯片的原理与Axiom检测原理略有不同。</p><ul><li>卡式芯片不是以连接反应是否发生作为检测依据，而是检测目标DNA片段与捕获探针之间的杂交结果。</li><li>在探针设计过程中，对SNP两种情况都设计相应的探针。实验过程中，先把基因组DNA分成2份，</li></ul><p><img src="/pic/2017-02/2017-02-26-18.jpg" alt=""></p><p>一份用<code>Nsp I</code> 酶进行消化;另一份用<code>Sty I</code>酶进行消化，基因组DNA被消化成片断之后，在两头加上接头，进行PCR扩增。</p><ul><li><p>PCR扩增完成后，会得到长度主要分布在<code>200BP ~ 1100BP</code>之间的扩增片段，然后再用酶把PCR扩出来的DNA片段再次片段化，所得到的的，应该是平均长度小于<code>180bp</code>的片段。</p></li><li><p>接着用末端核苷酸转移酶(Terminal Deoxy- nucleotidyl Transferase)将带有生物素的单核苷酸加到目标片段上</p></li><li><p>然后把这些带生物素标签的目标DNA片段与芯片进行杂交，在染色、扫描。</p><blockquote><p>目标DNA片段与捕获探针杂交过程中，如果完全匹配，则杂交率高，杂交到捕获探针上的目标片段就多，反之，如果有一个碱基不匹配，则杂交效率就会低很多，杂交到捕获探针上的目标片段就会少许多。</p></blockquote></li><li><p>接下来在进行染色，染色完成后，进行激光扫描。</p></li></ul><p><strong>结果说明：</strong><br>扫描过程中，能发出荧光的探针，说明样本中有对应基因型的DNA；如果探针不能发出荧光信号或荧光信号很弱，说明样本中没有对应基因型的DNA；如果一个SNP的两种荧光探针都发光，且强度差不多，说明样本在该位置为杂合子。</p><blockquote><p>在卡式SNP芯片当中，<code>SNP 6.0</code>是一款很经典的芯片，上面有90多万个SNP位点的探针，并且同时还有94万个拷贝数变异探针。</p></blockquote><h2 id="分析软件"><a href="#分析软件" class="headerlink" title="分析软件"></a>分析软件</h2><p>Affymetrix <strong>分析表达谱的软件</strong>主要是用<code>Transciptome Analysis Console</code>软件，简称<code>TAC软件</code>；<strong>分析基因分型的软件</strong> 主要是用<code>Genotyping Console</code>软件。</p><p>除了上面两种芯片，Affymetrix公司还提供了：microRNA芯片、基因调控芯片、拷贝数变异芯片、分子细胞遗传学芯片、药物遗传学芯片等。</p><p>from 陈巍学基因：Affymetrix芯片原理</p>]]></content>
      
      
        <tags>
            
            <tag> geneChip </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ChIP-seq-macs</title>
      <link href="/2017/09/22/ChIP-seq-masc/"/>
      <url>/2017/09/22/ChIP-seq-masc/</url>
      <content type="html"><![CDATA[<p>from MACS manual ：<strong><em>Identifying ChIP-seq enrichment using MACS</em></strong></p><p>步骤：<code>版本1.4</code></p><ol><li>安装macs</li><li>安装可选软件</li></ol><a id="more"></a><figure class="hljs highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">bowtie; </span>samtools<span class="hljs-comment">;R;PeakSplitter;igv;</span><br></code></pre></td></tr></table></figure><figure class="hljs highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">下载<span class="hljs-keyword">bowtie </span>index<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>运行MACS to call peaks</li></ol><ul><li><strong>以下用不同的数据来阐述如何使用不同的参数来运行macs。</strong></li></ul><p>用<strong>A来call FoxA1 peaks</strong>; 用<strong>B来 call H3K4me3 peaks 并打开片段大小评估</strong>；用<strong>C来call H3K4me3 peaks 用一个固定的片段大小</strong>；用<strong>D来call H3K4me4 peaks</strong></p><hr><h2 id="A-Call-FoxA1-peaks"><a href="#A-Call-FoxA1-peaks" class="headerlink" title="A: Call FoxA1 peaks"></a>A: Call FoxA1 peaks</h2><ul><li>解压hg19 index 文件：<code>unzip hg19.ebwt.zip</code></li><li>下载FoxA1 raw reads from <a href="http://cistrome.dfci.harvard.edu/MACSNatureProtocol/HAIB_T47D_FoxA1.tar.gz" target="_blank" rel="noopener">http://cistrome.dfci.harvard.edu/MACSNatureProtocol/HAIB_T47D_FoxA1.tar.gz</a> 解压并将raw reads map到参考基因组上，使用bowtie：</li></ul><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xzvf HAIB_T47D_FoxA1.tar.gz<br>bowtie -m 1 -S -q /path_to/hg19 HAIB_T47D_FoxA1.fastq HAIB_T47D_FoxA1.sam<br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><blockquote><p><strong><code>-m 1</code></strong> #specifies that reads with only one hit on the genome are retained;</p><p><strong><code>-S</code></strong> #specifies the output format as SAM;</p><p><strong><code>-q</code></strong> #specifies the input format as FASTQTQ;</p><p><strong><code>/path_to/</code></strong> #is the directory containing the unzipped bowtie prebuilt indexes; and </p><p><strong><code>HAIB_T47D_FoxA1.fastq</code></strong> #contains the downloaded raw reads for FoxA1.</p></blockquote><ul><li>运行macs</li></ul><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">macs -t HAIB_T47D_FoxA1.sam -n HAIB_T47D_FoxA1 -g hs -B -S --call-subpeaks<br></code></pre></td></tr></table></figure><p><strong>MACS版本</strong></p><blockquote><p>直接使用<code>macs</code>调用的是<code>1.4.2</code><br>要使用macs 2 可使用命令：<code>macs2</code></p></blockquote><h3 id="输出文件说明"><a href="#输出文件说明" class="headerlink" title="输出文件说明"></a>输出文件说明</h3><table><thead><tr><th>File name</th><th>Description</th></tr></thead><tbody><tr><td>HAIB_T47D_FoxA1_model.r</td><td>一个R脚本可用来生成峰的PDF</td></tr><tr><td>HAIB_T47D_FoxA1_model.pdf</td><td>执行R脚本后生成，PDF文件描述了read在峰上的分布和片段大小评估</td></tr><tr><td>HAIB_T47D_FoxA1_peaks.xls</td><td>MACS使用的主要参数和鉴定出来的峰的细节信息</td></tr><tr><td>HAIB_T47D_FoxA1_peaks.bed</td><td>峰的坐标BED格式</td></tr><tr><td>HAIB_T47D_FoxA1_peaks.subpeaks.bed</td><td>Subpeak locations in BED-like format.由PeakSplitter 生成, 被MACS调用。</td></tr><tr><td>HAIB_T47D_FoxA1_summits.bed</td><td>Summit locations of the peaks in BED format</td></tr><tr><td>HAIB_T47D_FoxA1_MACS_bedGraph</td><td>Directory where the BedGraph files are generated. For each control or ChIP-seq sample, a BedGraph file describes the read distribution along the whole genome</td></tr></tbody></table><p><strong>参数说明</strong></p><blockquote><p><strong><code>-t</code></strong>  指定ChIP-seq read比对结果的文件名。MACS支持并能自动识别： SAM, BAM, BED, ELAND, ELANDMULTI, ELANDMULTIPET, ELANDEXPORT and BOWTIE. 使用参数<code>--format</code> 可以覆盖自动识别的格式。</p><p><strong><code>-g</code></strong> 指定基因组大小。<code>hs</code> 参数是人基因组大小的近似的缩写。等于2.7e9.</p><p><strong><code>-n</code></strong> 应用<code>‘HAIB_T47D_FoxA1’</code>作为输出文件的前缀。</p><p><strong><code>-B</code></strong>  生成bedGraph格式的文件包含拓展的每个碱基对的read 堆积的信号文件。这个步骤很耗费内存和时间。因此，只有在需要bedGraph文件时，才指定-B.</p><p><strong><code>-S</code></strong>对于真个基因组生成单一的bedGraph 文件。否则的话，会对每个染色体生成一个。 </p></blockquote><p><strong>其他可能会遇到的参数</strong></p><blockquote><p><strong><code>--bw</code></strong> sets the ‘bandwidth’, which is half of the sliding window size used in the model-building step.</p><p><strong><code>--mfold</code></strong> specifies an interval of high-confidence enrichment ratio against the background on which to build the model. The default value ‘10, 30’ means that a model will be built on the basis of regions having read counts that are 10- to 30-fold of the background.</p><p><strong><code>--pvalue</code></strong> establishes a threshold P value: only peaks surpassing the threshold will be reported. The default threshold is 10 − 5.Users can first set a loose P value cutoff so that a sufficient number of peaks will be reported and then select peaks having the smallest P values for downstream analyses.</p></blockquote><ul><li>检查MACS在终端的输出状态：</li></ul><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-builtin-name">INFO</span> @ Sun, 03 Jun 2012 23:36:03:<br><span class="hljs-comment"># ARGUMENTS LIST:</span><br><span class="hljs-comment"># name  =   HAIB_T47D_FoxA1</span><br><span class="hljs-comment"># format  =   AUTO</span><br><span class="hljs-comment"># ChIP-seq file  =   HAIB_T47D_FoxA1.sam</span><br><span class="hljs-comment"># control file  =   None</span><br><span class="hljs-comment"># effective genome size  =   2.70e + 09</span><br><span class="hljs-comment"># band width  =   300</span><br><span class="hljs-comment"># model fold  =   10,30</span><br><span class="hljs-comment"># pvalue cutoff  =   1.00e-05</span><br><span class="hljs-comment"># Large dataset will be scaled towards smaller dataset.</span><br><span class="hljs-comment"># Range for calculating regional lambda is: 10000 bps</span><br><span class="hljs-builtin-name">INFO</span> #1 read tag files.<br><span class="hljs-builtin-name">INFO</span> #1 read treatment tags.<br><span class="hljs-builtin-name">INFO</span> Detected format is: SAM<br> &lt; Several lines are skipped &gt; <br><span class="hljs-builtin-name">INFO</span> #2 Build Peak Model.<br><span class="hljs-builtin-name">INFO</span> #2 number of paired peaks: 16586<br><span class="hljs-builtin-name">INFO</span> #2 finished!<br><span class="hljs-builtin-name">INFO</span> #2 predicted fragment length is 114 bps<br><span class="hljs-builtin-name">INFO</span> #2.2 Generate R<span class="hljs-built_in"> script </span><span class="hljs-keyword">for</span> model : HAIB_T47D_FoxA1_model.r<br><span class="hljs-builtin-name">INFO</span> #3 Call peaks.<br><span class="hljs-builtin-name">INFO</span> #3 shift treatment data<br><span class="hljs-builtin-name">INFO</span> #3 merge  + /- strand of treatment data<br><span class="hljs-builtin-name">INFO</span> #3 save the shifted <span class="hljs-keyword">and</span> merged tag counts into bedGraph file.<br><span class="hljs-builtin-name">INFO</span> write <span class="hljs-keyword">to</span> a bedGraph file<br> &lt; Several lines are skipped &gt; <br><span class="hljs-builtin-name">INFO</span> #3 call peak candidates<br><span class="hljs-builtin-name">INFO</span> #3 use self <span class="hljs-keyword">to</span> calculate local lambda <span class="hljs-keyword">and</span><span class="hljs-built_in"> filter </span>peak candidates.<br><span class="hljs-builtin-name">INFO</span> #3 Finally, 74761 peaks are called!<br><span class="hljs-builtin-name">INFO</span> #4 Write output xls file. HAIB_T47D_FoxA1_peaks.xls<br><span class="hljs-builtin-name">INFO</span> #4 Write peak bed file. HAIB_T47D_FoxA1_peaks.bed<br><span class="hljs-builtin-name">INFO</span> #4 Write summits bed file. HAIB_T47D_FoxA1_summits.bed<br><span class="hljs-builtin-name">INFO</span> #5 Done! Check the output files!<br><span class="hljs-builtin-name">INFO</span> #6 Try <span class="hljs-keyword">to</span> invoke PeakSplitter.<br><span class="hljs-builtin-name">INFO</span> #6 Please check HAIB_T47D_FoxA1_peaks.subpeaks.bed file <span class="hljs-keyword">for</span> PeakSplitter <br>output!<br></code></pre></td></tr></table></figure><blockquote><p>输出的信息如下：<strong>日期（第一行）；主要参数（以<code>#</code>开头的行）；运行过程（以<code>INFO</code>开头的行）。</strong>运行过程中的时间信息已经被移除了（为了更直观）。如果MACS遇到了异常（比如MACS评估一个片段大小太小），警告信息将会出现。</p></blockquote><blockquote><p>! 注意 尽管警告信息不影响MACS运行，仍需要认真对待警告。例如，</p><p>警告信息：<strong><code>unbalanced reads between treatment and control</code></strong>means that the FDR of the resulting peaks will be overestimated when the control sample has more reads and will be underestimated when the ChIP-seq sample is sequenced more deeply. </p><p>警告信息：<strong><code>Fewer paired peaks X than 1,000</code></strong> means that MACS only identified X model peaks and may indicate potential data quality issues because 1,000 model peaks are needed to robustly estimate ChIP-DNA fragment size. </p><p>警告信息<strong><code>missing chromosome X data</code></strong>might suggest that <strong>the raw input file for that chromosome is incomplete</strong>.</p></blockquote><ul><li>生成peak模型的PDF图像（假设R已经被安装）</li></ul><figure class="hljs highlight R"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">Rscript HAIB_T47D_FoxA1_model.r<br></code></pre></td></tr></table></figure><blockquote><p>在当前目录生成名为<code>HAIB_T47D_FoxA1_model.pdf</code>的文件，图像描述了reads在峰的模型中正义链反义链上的分布和评估的片段的大小。</p></blockquote><hr><h2 id="B-call-H3K4me3-peaks"><a href="#B-call-H3K4me3-peaks" class="headerlink" title="B: call H3K4me3 peaks"></a>B: call H3K4me3 peaks</h2><ul><li><strong>数据的获取</strong>：数据包含一个<code>control replicate</code> 和一个 <code>ChIP-seq replicate</code></li></ul><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup wget -c  http://cistrome.dfci.harvard.edu/MACSNatureProtocol/UW_K562_H3K4me3.tar.gz &amp;<br>tar xvzf UW_K562_H3K4me3.tar.gz<br></code></pre></td></tr></table></figure><p><strong>运行MACS:</strong></p><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">macs -t UW_K562_H3K4me3.bam -c UW_K562_H3K4me3_Control.bam -g hs -n UW_K562_H3K4me3 -B -S --call-subpeaks<br></code></pre></td></tr></table></figure><blockquote><p>参数<code>-c</code>指明了control 样本的文件名。</p></blockquote><ul><li><p>**检查MACS的屏幕输出，如果运行成功，MACS会输出如下信息：</p><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined"> &lt; Several lines are skipped &gt; <br><span class="hljs-builtin-name">INFO</span> : #2 Build Peak Model.<br><span class="hljs-builtin-name">INFO</span> : #2 number of paired peaks: 12267<br><span class="hljs-builtin-name">INFO</span> : #2 finished!<br><span class="hljs-builtin-name">INFO</span> : #2 predicted fragment length is 156 bps<br> &lt; Several lines are skipped &gt; <br><span class="hljs-builtin-name">INFO</span> : #3 use control data <span class="hljs-keyword">to</span><span class="hljs-built_in"> filter </span>peak candidates.<br><span class="hljs-builtin-name">INFO</span> : #3 Finally, 20632 peaks are called!<br><span class="hljs-builtin-name">INFO</span> : #3 <span class="hljs-builtin-name">find</span> negative peaks by swapping treat <span class="hljs-keyword">and</span> control<br><span class="hljs-builtin-name">INFO</span> : #3 Finally, 4006 peaks are called!<br> &lt; Several lines are skipped &gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>生成PDF图像:</strong></p></li></ul><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Rscript UW_K562_H3K4me3_model.r<br></code></pre></td></tr></table></figure><blockquote><p>对于输出文件：因为这一步比上一个多用了一个control sample，会生成额外的文件<code>UW_K562_H3K4me3_negative_peaks.xls</code>包含了peaks called by comparing the control sample with the ChIP-seq sample. 这些peaks 被MACS用来评估报告的ChIP-seq峰的FDR。</p></blockquote><hr><h2 id="C-call-H3K4me3-peaks-with-a-specified-DNA-fragment-size"><a href="#C-call-H3K4me3-peaks-with-a-specified-DNA-fragment-size" class="headerlink" title="C: call H3K4me3 peaks with a specified DNA fragment size"></a>C: call H3K4me3 peaks with a specified DNA fragment size</h2><ul><li><strong>下载数据</strong>：包含一个ChIP-Seq replicate 和两个control replicates。<strong>两个control要被合并</strong>。</li></ul><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup wget -c  http://cistrome.dfci.harvard.edu/MACSNatureProtocol/BROAD_GM12878_H3K4me3.tar.gz 1&gt;download.log 2&gt;&amp;1&amp;<br>tar xvzf BROAD_GM12878_H3K4me3.tar.gz<br>samtools merge BROAD_GM12878_H3K4me3_Control.bam BROAD_GM12878_H3K4me3_Control_1.bam BROAD_GM12878_H3K4me3_Control_2.bam<br></code></pre></td></tr></table></figure><ul><li><strong>运行MACS：</strong></li></ul><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">macs -t BROAD_GM12878_H3K4me3.bam -c BROAD_GM12878_H3K4me3_Control.bam -g hs -n BROAD_GM12878_H3K4me3 -B -S --call-subpeaks<br></code></pre></td></tr></table></figure><ul><li>检查屏幕输出，应该包含下列行：</li></ul><figure class="hljs highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"> &lt; Several lines are skipped &gt; <br><span class="hljs-builtin-name">INFO</span> : #2 number of paired peaks: 31077<br><span class="hljs-builtin-name">INFO</span> : #2 finished!<br><span class="hljs-builtin-name">INFO</span> : #2 predicted fragment length is 53 bps<br> &lt; Several lines are skipped &gt;<br></code></pre></td></tr></table></figure><blockquote><p>MACS 建立的模型片段长度为53，是不同寻常的短在典型的ChIP-Seq 实验中。因此，修改参数重新运行MACS：</p></blockquote><ul><li>可使用Ctrl + C 终止MACS的运行。然后移除文件夹：<code>BROAD_GM12878_H3K4me3_MACS_bedGraph</code></li></ul><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf BROAD_GM12878_H3K4me3_MACS_bedGraph<br></code></pre></td></tr></table></figure><ul><li>重新运行MACS：</li></ul><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">macs14 -t BROAD_GM12878_H3K4me3.bam -c BROAD_GM12878_H3K4me3_Control.bam -g hs -n BROAD_GM12878_H3K4me3 --nomodel --shiftsize 73 -B -S --call-subpeak<br></code></pre></td></tr></table></figure><hr><h2 id="D-Calling-H3K36me3-peaks"><a href="#D-Calling-H3K36me3-peaks" class="headerlink" title="D:Calling H3K36me3 peaks"></a>D:Calling H3K36me3 peaks</h2><ul><li><strong>下载数据</strong>:该数据包含两个control replicates 和两个ChIP-seq replicates</li></ul><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://cistrome.dfci.harvard.edu/MACSNatureProtocol/BROAD_GM12878_H3K36me3.tar.gz<br>tar xvzf BROAD_GM12878_H3K36me3.tar.gz<br>samtools merge BROAD_GM12878_H3K36me3.bam BROAD_GM12878_H3K36me3_1.bam BROAD_GM12878_H3K36me3_2.bam<br>samtools merge BROAD_GM12878_H3K36me3_Control.bam BROAD_GM12878_H3K36me3_Control_1.bam BROAD_GM12878_H3K36me3_Control_2.bam<br></code></pre></td></tr></table></figure><ul><li><strong>Run MACS:</strong></li></ul><figure class="hljs highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">macs -t <span class="hljs-keyword">BROAD_GM12878_H3K36me3.bam </span>-c <span class="hljs-keyword">BROAD_GM12878_H3K36me3_Control.bam </span>-g hs -n <span class="hljs-keyword">BROAD_GM12878_H3K36me3 </span>--nomodel --<span class="hljs-keyword">shiftsize </span><span class="hljs-number">73</span> -<span class="hljs-keyword">B </span>-S --pvalue <span class="hljs-number">1</span>e-3 --call-<span class="hljs-keyword">subpeaks</span><br></code></pre></td></tr></table></figure><blockquote><p>与默认<code>--pvalue 1e-5</code>相比，这一步使用的p-value<code>--pvalue 1e-3</code>不太严格。因为H3K36me3 ChIP-seq 数据经常来自有更宽的不太集中的区域，参数<code>--nomodel</code> 和 <code>--shiftsize 73</code>优先采用。</p></blockquote><hr><h1 id="使用IGV加载MACS的结果"><a href="#使用IGV加载MACS的结果" class="headerlink" title="使用IGV加载MACS的结果"></a>使用IGV加载MACS的结果</h1><ol><li>首先解压并重命名 <code>bedGraph</code> 文件。以FoxA1数据集为例，首先定位到<code>HAIB_T47D_FoxA1_MACS_bedGraph/treat</code>,</li><li>解压文件 <code>gzip -d HAIB_T47D_FoxA1_treat_afterfiting_all.bdg.gz</code></li><li>更改后缀为<code>bedGraph</code>，这样可被IGV识别<code>mv HAIB_T47D_FoxA1_treat_afterfiting_all.bdg HAIB_T47D_FoxA1_treat_afterfiting_all.bedGraph</code></li><li>用IGV加载<code>HAIB_T47D_FoxA1_treat_afterfiting_all.bedGraph</code>，根据IGV的手册。</li></ol><hr><h2 id="macs2的用法-部分"><a href="#macs2的用法-部分" class="headerlink" title="macs2的用法(部分)"></a>macs2的用法(部分)</h2><p><a href="https://pypi.python.org/pypi/MACS2" target="_blank" rel="noopener">https://pypi.python.org/pypi/MACS2</a></p><h3 id="Usage-of-MACS2"><a href="#Usage-of-MACS2" class="headerlink" title="Usage of MACS2"></a>Usage of MACS2</h3><figure class="hljs highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">macs2 <span class="hljs-string">[-h]</span> <span class="hljs-string">[--version]</span><br>&#123;callpeak,filterdup,bdgpeakcall,bdgcmp,randsample,bdgdiff,bdgbroadcall&#125;<br></code></pre></td></tr></table></figure><h4 id="Example-for-regular-peak-calling"><a href="#Example-for-regular-peak-calling" class="headerlink" title="Example for regular peak calling"></a>Example for regular peak calling</h4><figure class="hljs highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">macs2 callpeak -t ChIP<span class="hljs-selector-class">.bam</span> -c Control<span class="hljs-selector-class">.bam</span> -f BAM -g hs -n test -B -<span class="hljs-selector-tag">q</span> <span class="hljs-number">0.01</span><br></code></pre></td></tr></table></figure><h3 id="Example-for-broad-peak-calling"><a href="#Example-for-broad-peak-calling" class="headerlink" title="Example for broad peak calling"></a>Example for broad peak calling</h3><figure class="hljs highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-symbol">macs2</span> callpeak -t ChIP.<span class="hljs-keyword">bam </span>-c Control.<span class="hljs-keyword">bam </span>--<span class="hljs-keyword">broad </span>-g hs --<span class="hljs-keyword">broad-cutoff </span><span class="hljs-number">0</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="几个常用的sub-commands"><a href="#几个常用的sub-commands" class="headerlink" title="几个常用的sub-commands"></a>几个常用的<strong>sub-commands</strong></h3><p><strong>callpeak</strong>:    Main MACS2 Function to Call peaks from alignment results.<br><strong>bdgpeakcall</strong>:    Call peaks from bedGraph output.<br><strong>bdgbroadcall</strong>:    Call broad peaks from bedGraph output.<br><strong>bdgcmp</strong>:    Deduct noise by comparing two signal tracks in bedGraph.<br><strong>bdgdiff</strong>:    Differential peak detection based on paired four bedgraph files.<br><strong>filterdup</strong>eads at the same position, then convert acceptable format to BED format.<br><strong>predictd</strong>:    Predict d or fragment size from alignment results.<br><strong>pileup</strong>:    Pileup aligned reads with a given extension size (fragment size or d in MACS language). Note there will be no step for duplicate reads filtering or sequencing depth scaling, so you may need to do certain post- processing.<br><strong>randsample</strong>:    Randomly sample number/percentage of total reads.<br><strong>refinepeak</strong>:    (Experimental) Take raw reads alignment, refine peak summits and give scores measuring balance of forward- backward tags. Inspired by SPP.</p><p><strong>下面只讲<code>callpeak</code>模块</strong>，其他内容可以<code>macs2 COMMAND -h</code>来查看细节</p><ul><li><p><strong>Call peaks</strong></p><p>是macs2的主要功能，可以用<code>macs2 callpeak</code>命令直接调用。如果不加参数直接输这个命令，你将会看到这个参数的详细描述。</p></li><li><p><strong>Options</strong></p><ul><li><code>-t/–treatment FILENAME</code>:这是唯一必须的参数，如果你有多个alignment files，你可以这样指明它们<code>-t A B C</code>,macs 将会pool up all these files</li><li><code>-c/–control</code>：与<code>-t</code>参数相同</li><li><code>-n/–name</code>:实验的名字，MACS将会使用这个名字来生成输出文件如<code>NAME_peaks.xls</code></li><li><code>–outdir</code>:MACS将通过这个参数将文件输出到指定的文件夹</li><li><code>-f/–format FORMAT</code>:Format of tag file, can be “ELAND”, “BED”, “ELANDMULTI”, “ELANDEXPORT”, “ELANDMULTIPET” (for pair-end tags), “SAM”, “BAM”, “BOWTIE”, “BAMPE” or “BEDPE”. Default is “AUTO” which will allow MACS to decide the format automatically. “AUTO” is also usefule when you combine different formats of files. Note that MACS can’t detect “BAMPE” or “BEDPE” format with “AUTO”, and you have to implicitly specify the format for “BAMPE” and “BEDPE”.</li></ul></li></ul>]]></content>
      
      
        <tags>
            
            <tag> macs ChIP-seq </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>站点目录</p><details><br>  <summary>软件定义网络(SDN)笔记</summary><br><p>1. 概述</p><br>   1.1 <a href="">软件定义网络技术的产生，发展与标准化</a><br><p>2. 基本原理</p><br>   2.1 <a href="">软件定义网络的基本架构—ONF的三层架构</a><br>   2.2 <a href="">软件定义网络的核心思想</a><br>   2.3 <a href="">实验一：Mininet应用实践</a><br><p>3. 数据平面</p><br>   3.1 <a href="">SDN数据平面</a><br>   3.2 <a href="">Openflow概述</a><br>   3.3 <a href="">OpenFlow流表</a><br>   3.4 <a href="">SDN交换机</a><br>   3.5 <a href="">实验二：Open vSwitch 应用实践</a><br><p>4. 南向结构协议</p><br>   4.1 <a href="">南向结构协议概述</a><br>   4.2 <a href="">OpenFlow协议</a><br>   4.3 <a href="">OF-CONFIG协议</a><br>   4.4 <a href="">NetConf协议</a><br>   4.5 <a href="">实验三：OpenFlow协议分析</a><br><p>5. 控制平面</p><br>   5.1. <a href="">SDN控制平面</a><br>   5.2. <a href="">开源SDN控制器</a><br><p>6. 北向接口</p><br>   6.1 <a href="">北向结构概述</a><br>   6.2 <a href="">什么是REST API</a><br>   6.3 <a href="">REST API设计规范</a><br><p>7. NX-OS与DNA-C API开发技术</p><br>   7.1 <a href="">DNA及SDA解决方案</a><br>   7.2 <a href="">Nexus 9000v</a><br>   7.3 <a href="">NX-OS API</a><br>   7.4 <a href="">DNA-C RESTful API</a><br><p>8. 课程链接：</p><br>   <a href="https://www.icourse163.org/course/WZU-1205809832" target="_blank" rel="noopener">中国慕课大学</a><br></details><details><br>  <summary>如何制作饥荒mod教程</summary><br>  <p>快速开始</p><br>  1. 如何安装并使用mod？<br>  1.1 从steam 创意工坊安装并启用 略。<br>  1.2 从Klei下载并安装：<br>  首先转到下载页面：<a href="https://forums.kleientertainment.com/files/" target="_blank" rel="noopener">https://forums.kleientertainment.com/files/</a><br>  然后下载喜欢的mod<br>  然后双击打开下载的压缩包，并将文件夹拷贝到mod文件夹：<br><figure class="hljs highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Steam/Windows: C:<span class="hljs-tag">\<span class="hljs-name">Program</span></span> Files (x86)<span class="hljs-tag">\<span class="hljs-name">Steam</span></span><span class="hljs-tag">\<span class="hljs-name">SteamApps</span></span><span class="hljs-tag">\<span class="hljs-name">common</span></span><span class="hljs-tag">\<span class="hljs-name">dont</span></span>_starve<span class="hljs-tag">\<span class="hljs-name">mods</span></span><span class="hljs-tag">\<span class="hljs-name"><br></span></span>Standalone/Windows: C:<span class="hljs-tag">\<span class="hljs-name">Program</span></span> Files<span class="hljs-tag">\<span class="hljs-name">dontstarve</span></span><span class="hljs-tag">\<span class="hljs-name">mods</span></span><br>Standalone/Mac: /Applications/Don't Starve/Don't Starve.app/Contents/mods/<br>Steam/Linux: /home/username/.local/share/Steam/SteamApps/common/dont_starve/mods<br></code></pre></td></tr></table></figure><br><br>  然后打开饥荒，并在饥荒中启用该mod<br><br>  <p>Art</p><br>  <p>生物</p><br>  <p>脚本</p><br>  <p>分享你的mod</p><br>  <p>声音</p><br>  <p>翻译</p><br>  <p>杂项</p><br>  <p>教程原文:</p><br>  <a href="https://forums.kleientertainment.com/forums/topic/28021-getting-started-guides-tutorials-and-examples/" target="_blank" rel="noopener">(2013年)</a><br></details><p>点击收起功能</p><details><br>  <summary>点击时的区域标题</summary><br>  <p> - 测试 测试测试</p><br>  <p> 测试二 测试三 。。。。。 .</p><br></details>]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>eCLIP-pipeline</title>
      <link href="/post_unpub/eCLIP-pipeline.html"/>
      <url>/post_unpub/eCLIP-pipeline.html</url>
      <content type="html"><![CDATA[<figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir software &amp;&amp; cd software<br>wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda2-latest-Linux-x86_64.sh # 安装到software/python2，不用添加环境变量。<br><br>mkdir packages &amp;&amp; cd packages<br>wget https://github.com/YeoLab/gscripts/archive/1.1.zip -O gscripts-1.1.zip<br>wget https://github.com/YeoLab/clipper/archive/1.1.zip -O clipper-1.1.zip<br>wget https://github.com/YeoLab/merge_peaks/archive/0.0.6.zip -O merge_peaks-0.0.6.zip<br><span class="hljs-meta"><br>#</span><span class="bash"> 解压上面三个文件</span><br>source python2/bin/activate<br>pip install Cython<br><br>cd clipper-1.1 &amp;&amp; python setup.py install<br>cd gscripts-1.1 &amp;&amp; python setup.py install<br>cd merge_peaks-0.0.6 &amp;&amp; source create_environment.sh<br>source run_perlbrew_perl5.10.1.sh<br></code></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>这是文章题目</title>
      <link href="/post_unpub/model.html"/>
      <url>/post_unpub/model.html</url>
      <content type="html"><![CDATA[<blockquote><p>hexo模板</p></blockquote><p><code>&lt;!-- more--&gt;</code>上面的将会显示在预览中。</p><a id="more"></a><p><code>&lt;!-- more--&gt;</code>下面的将会显示在正文里。</p><blockquote><h2 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h2><figure class="hljs highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash">  categories:</span><br><span class="hljs-meta">&gt;</span><span class="bash">  - Diary</span><br><span class="hljs-meta">&gt;</span><span class="bash">  - Life</span><br><span class="hljs-meta">&gt;</span><span class="bash"></span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p></blockquote><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">点击收起功能<br><br><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span>点击时的区域标题<span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> - 测试 测试测试<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> 测试二 测试三 。。。。。 .<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    </entry>
    
  
</search>
